openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'Platform API'
  description: Enterprise Platform API
servers:
  - url: 'localhost:3000'
    description: 'Computer development environment'
  - url: 'https://platform.prod.euler.tools'
    description: 'Production Environment'
tags:
  - name: Tokens
  - name: Blocks
  - name: Transactions
  - name: Addresses
  - name: Uncles
  - name: Contracts
  - name: Defi-Dex
  - name: Futures
  - name: Spot
  - name: Swaps
  - name: Market metrics
  - name: Explorers
  - name: App
paths:
  /tokens/{hash}/holders/latest:
    get:
      summary: 'Holders-Latest'
      description: Retrieves the token holders for the specified address.
      operationId: getHolders
      tags:
        - Tokens
      parameters:
        - name: hash
          in: path
          description: The address to retrieve token holders for.
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: numTokens
          in: query
          description: Filter by token holders who own the specified amount of tokens.
          required: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: numTokensGt
          in: query
          description: Filter by token holders who own more than the specified amount of tokens
          required: true
          schema:
            type: integer
            format: int32
            example: 20
        - name: numTokensGte
          in: query
          description: Filter by token holders who own more than or equal to the specified amount of tokens.
          required: true
          schema:
            type: integer
            format: int32
            example: 30
        - name: numTokensLt
          in: query
          description: Fitler by token holders who own less than the specified amount of tokens
          required: true
          schema:
            type: integer
            format: int32
            example: 35
        - name: numTokensLte
          in: query
          description: Filter by token holders who own less than or equal to the specified amount of tokens
          required: true
          schema:
            type: integer
            format: int32
            example: 35
        - name: timestampGt
          in: query
          description: Filter by token holders who started holding the token after the specified date
          required: true
          schema:
            type: integer
            format: int32
            example: 12
        - name: timestampGte
          in: query
          description: Filter by token holders who started holding the token after or equal to the specified date
          required: true
          schema:
            type: integer
            format: int32
            example: 12
        - name: timestampLt
          in: query
          description: Filter by token holders who started holding the token before the specified date
          required: true
          schema:
            type: integer
            format: int32
            example: 12
        - name: timestampLte
          in: query
          description: Filter by token holders who started holding the token before or equal to the specified date
          required: true
          schema:
            type: integer
            format: int32
            example: 12
        - name: tokenAddress
          in: query
          description: Filter by token holders for this token (mandatory)
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results. Options true, false.
          required: true
          schema:
            type: boolean
            example: true
        - name: currency
          in: query
          description: The currency of the price information (usd or btc.) - only used in conjunction with includePrice
          required: true
          schema:
            type: string
            example: EUR
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: size
          in: query
          description: Number of records per page
          required: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: query
          description: The id of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An array containing details about token holders'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/holder_latest'
  /tokens/{hash}/holders/historical:
    get:
      summary: 'Holders-Historical'
      description: Retrieves the historical (time series) token holders for the specified token address.
      operationId: getHistoricalHolders
      tags:
        - Tokens
      parameters:
        - name: hash
          in: path
          description: The address for which to retrieve token holders.
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: holderAddresses
          in: query
          description: A comma separated list of addresses for which the historical holdings are to be retrieved.
          required: true
          schema:
            type: string
            example: "0xb1690c08e213a35ed9bab7b318de14420fb57d8c"
        - name: timeFrame
          in: query
          description: The time frame to return the historical data in  by day (1d, 2d, ..., all), by hour (1h, 2h, ..., 72h), by minute (1m, 2m, ..., 360m) or by tick (1t, 10t, ..., 1000t).
          required: true
          schema:
            type: string
            example: 30d
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results. Options true, false.
          required: true
          schema:
            type: boolean
            example: true
        - name: currency
          in: query
          description: The currency of the price information (usd or btc.) - only used in conjunction with includePrice
          required: true
          schema:
            type: string
            example: EUR
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'The historical token holder data.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/holder_historical'
  /tokens/metrics/{symbol}/latest:
    get:
      summary: 'Metrics - Latest '
      description: Retrieves the latest metrics for the specified ERC token symbol.
      operationId: getMetrics
      tags:
        - Tokens
      parameters:
        - name: symbol
          in: path
          description: The symbol of the token contract.
          required: true
          schema:
            type: string
            example: link
        - name: timeFrame
          in: query
          description: The time frame to return the historical data in, by day (1d, 2d, ..., all), by hour (1h, 2h, ..., 72h) or by minute (1m, 2m, ..., 360m)
          required: true
          schema:
            type: string
            example: 30d
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: query
          description: The id of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object containing latest metrics'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metrics_latest'
  /tokens/metrics/{symbol}/historical:
    get:
      summary: 'Metrics - Historical'
      description: Retrieves the historical metrics for the specified ERC token symbol.
      operationId: getHistoricalMetrics
      tags:
        - Tokens
      parameters:
        - name: symbol
          in: path
          description: The symbol of the token contract.
          required: true
          schema:
            type: string
            example: link
        - name: startDate
          in: query
          description: Filter by data after this date.
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: Filter by data before this date.
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: timeInterval
          in: query
          description: The time interval to return the historical data in, by day (d), by hour (h) or by minute (m)
          required: true
          schema:
            type: string
            example: d
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
        - name: blockchain-id
          in: query
          description: The id of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object containing historical metrics'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metrics_historical'
  /tokens/{hash}/velocity:
    get:
      summary: 'Metrics - Velocity'
      description: Retrieves the historical velocity for the specified address.
      operationId: getVelocityMetrics
      tags:
        - Tokens
      parameters:
        - name: hash
          in: path
          description: The address of the token contract
          required: true
          schema:
            type: string
            example: "0x744d70fdbe2ba4cf95131626614a1763df805b9e"
        - name: timeFrame
          in: query
          description: The time frame to return the historical data in, by day (1d, 2d, ..., all), by hour (1h, 2h, ..., 72h) or by minute (1m, 2m, ..., 360m)
          required: true
          schema:
            type: string
            example: 30d
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
        - name: blockchain-id
          in: query
          description: The id of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'The historical token volume data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metrics_velocity'
  /tokens/{hash}/volume:
    get:
      summary: 'Metrics - Volume'
      description: Retrieves the historical number of transfers for the specified address.
      operationId: getVolumeMetrics
      tags:
        - Tokens
      parameters:
        - name: hash
          in: path
          description: The address of the token contract.
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: timeFrame
          in: query
          description: The time frame to return the historical data in, by day (1d, 2d, ..., all), by hour (1h, 2h, ..., 72h) or by minute (1m, 2m, ..., 360m)
          required: true
          schema:
            type: string
            example: 30d
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'The historical token volume data.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metrics_volume'
  /tokens/rankings:
    get:
      summary:  'Rankings - Latest'
      description: Retrieves the top ranked tokens by a specific metric.
      operationId: getLatestRanking
      tags:
        - Tokens
      parameters:
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
        - name: direction
          in: query
          description: The sort order in which tokens are ranked (ascending or descending).
          required: true
          schema:
            type: string
            example: descending
        - name: sortType
          in: query
          description: The metric used to rank the tokens (changeInPrice, currentPrice, marketCap, tokenVelocity, transactionVolume & uniqueAddresses).
          required: true
          schema:
            type: string
            example: marketCap
        - name: timeInterval
          in: query
          description: The time interval to return the historical data in, by day (d), by hour (h) or by minute (m)
          required: true
          schema:
            type: string
            example: days
        - name: type
          in: query
          description: The type(s) of tokens to include in the rankings (erc20, erc721, erc777, erc884, erc998)
          required: true
          schema:
            type: string
            example: erc20
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: size
          in: query
          description: Number of records per page
          required: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
      responses:
        '200':
          description: 'An object containing latests tokens rankings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ranking_latest'
  /tokens/rankings/historical:
    get:
      summary: 'Rankings - Historical'
      description: Retrieves the top ranked tokens by a specific metric, with a lookback window. Useful for viewing token trends.
      operationId: getHistoricalRankings
      tags:
        - Tokens
      parameters:
        - name: direction
          in: query
          description: The sort order in which tokens are ranked (ascending or descending).
          required: true
          schema:
            type: string
            example: descending
        - name: sortType
          in: query
          description: The metric used to rank the tokens (changeInPrice, currentPrice, marketCap, tokenVelocity, transactionVolume & uniqueAddresses).
          required: true
          schema:
            type: string
            example: marketCap
        - name: topN
          in: query
          description: Number denominating top ranking tokens to return
          required: true
          schema:
            type: string
            example: 5
        - name: startDate
          in: query
          description: Returns data after this date (expressed as milliseconds)
          required: true
          schema:
            type: string
            example: "1590969600000"
        - name: endDate
          in: query
          description: Returns data before this date (expressed as milliseconds)
          required: true
          schema:
            type: string
            example: "1593561600000"
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object containing historical addresses rankings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ranking_historical'
  /tokens/{hash}/transfers:
    get:
      summary: 'Transfers'
      description: Retrieves all token transfers involving the specified address.
      operationId: getTransfers
      tags:
        - Tokens
      parameters:
        - name: hash
          in: path
          description: The address to retrieve the token transfers for.
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: amount
          in: query
          description: Filter by token transfers which value is equal to this amount.
          required: true
          schema:
            type: integer
            format: int32
            example: "23138034684558475000"
        - name: amountGt
          in: query
          description: Filter by token transfers which value is greater than this amount.
          required: true
          schema:
            type: integer
            format: int32
            example: "23138034684558475000"
        - name: amountGte
          in: query
          description: Filter by token transfers which value is greater than or equal to this amount.
          required: true
          schema:
            type: integer
            format: int32
            example: "23138034684558475000"
        - name: amountLt
          in: query
          description: Filter by token transfers which value is less than this amount.
          required: true
          schema:
            type: integer
            format: int32
            example: "23138034684558475000"
        - name: amountLte
          in: query
          description: Filter by token transfers which value is less than or equal to this amount
          required: true
          schema:
            type: integer
            format: int32
            example: "23138034684558475000"
        - name: blockNumber
          in: query
          description: Filter by token transfers with this block number.
          required: true
          schema:
            type: integer
            format: int32
            example: 13715747
        - name: recipientAddress
          in: query
          description: Filter by token transfers which recipient is the specified address.
          required: true
          schema:
            type: string
            example: "0xa74476443119a942de498590fe1f2454d7d4ac0d"
        - name: senderAddress
          in: query
          description: Filter by token transfers which sender is the specified address.
          required: true
          schema:
            type: string
            example: "0x47da42696a866cdc61a4c809a515500a242909c1"
        - name: startDate
          in: query
          description: Filter by token transfers which happened after this date.
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: Filter by token transfers which happened before this date.
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: tokenAddress
          in: query
          description: Filter by token transfers for this token.
          required: true
          schema:
            type: string
            example: "0x47da42696a866cdc61a4c809a515500a242909c1"
        - name: transactionHash
          in: query
          description: Filter by token transfers for this transaction hash.
          required: true
          schema:
            type: string
            example: "0x33aa12f5252d57050b6e6e3e77c3913fb5927cbd163fdd80ba21966db253a009"
        - name: validationMethod
          in: query
          description: The validation method to be added to the response, none, basic, full
          required: true
          schema:
            type: string
            example: basic
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results.
          required: true
          schema:
            type: boolean
            example: true
        - name: currency
          in: query
          description: The currency of the price information. Options  usd, btc. Only used in conjunction with includePrice.
          required: true
          schema:
            type: string
            example: EUR
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: size
          in: query
          description: Number of records per page
          required: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Array of token transfer objects.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transfers'
  /tokens/{hash}/supplies/latest:
    get:
      summary: 'Supply - Latest'
      description: Retrieves the latest token supplies (and derivatives) for the specified address.
      operationId: getSupplyLatest
      tags:
        - Tokens
      parameters:
        - name: hash
          in: path
          description: The address for which to retrieve token holders.
          required: true
          schema:
            type: string
            example: "0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2"
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object containing supply chain record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/supplies'
  /tokens/{hash}/supplies/historical:
    get:
      summary: 'Supply - Historical'
      description: Retrieves the historical token supplies (and derivatives) for the specified address.
      operationId: getHistoricalSupply
      tags:
        - Tokens
      parameters:
        - name: hash
          in: path
          description: The address for which to retrieve token supply.
          required: true
          schema:
            type: string
            example: "0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2"
        - name: startDate
          in: query
          description: Filter by token prices after this date - note that the interval can not exceed 6 months (d), or 30 days (h).
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: Filter by token prices before this date - note that the interval can not exceed 6 months (d), or 30 days (h).
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: timeInterval
          in: query
          description: The time interval to return the historical data in  by day (days) or by hour (hours).
          required: true
          schema:
            type: string
            example: days
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object containing historical supply chain record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/supplies_historical'
  /blocks:
    get:
      summary: 'Blocks - All'
      description: Retrieves all blocks.
      operationId: getAllBlocks
      tags:
        - Blocks
      parameters:
        - name: startNumber
          in: query
          description: The range of blocks to return, inclusive (startNumber and endNumber should be both specified, or both empty)
          required: true
          schema:
            type: string
            example: "7000000"
        - name: endNumber
          in: query
          description: The end of the range of blocks to return, exclusive (startNumber and endNumber should be both specified, or both empty)
          required: true
          schema:
            type: string
            example: "7000001"
        - name: size
          in: query
          description: The number of results to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 100
        - name: validationMethod
          in: query
          description: The validation method to be added to the response  none, basic, full. Default  none.
          required: true
          schema:
            type: string
            example: basic
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Lists of blocks'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/All'
  /blocks/{id}:
    get:
      summary: 'Blocks - Single'
      description: Retrieves the block specified by its id (number or hash).
      operationId: getBlockById
      tags:
        - Blocks
      parameters:
        - name: id
          in: path
          description: 'The number or hash of the block for which to retrieve block information.'
          required: true
          schema:
            type: string
            example: "9061628"
        - name: validationMethod
          in: query
          description: The validation method to be added to the response  none, basic, full. Default  none.
          required: true
          schema:
            type: string
            example: basic
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object with block details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'
  /blocks/{id}/functions:
    get:
      summary: 'Functions & Logs - Functions'
      description: Retrieves all the functions which were called at the specified block number or hash.
      operationId: getAllFunctions
      tags:
        - Blocks
      parameters:
        - name: id
          in: path
          description: The number or hash of the for which to retrieve block information.
          required: true
          schema:
            type: string
            example: "9061628"
        - name: validationMethod
          in: query
          description: The validation method to be added to the response  none, basic, full. Default  none.
          required: true
          schema:
            type: string
            example: basic
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containing all functions of specific block'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Functions'
  /blocks/{id}/logs:
    get:
      summary: 'Functions & Logs - Logs'
      description: Retrieves all the logs at the specified block number or hash.
      operationId: getLogs
      tags:
        - Blocks
      parameters:
        - name: id
          in: path
          description: 'The number or hash from which the block information will be retrieved.'
          required: true
          schema:
            type: string
            example: "9061628"
        - name: transactionHash
          in: query
          description: 'Filter by logs for this transaction.'
          required: true
          schema:
            type: string
            example: "0x33aa12f5252d57050b6e6e3e77c3913fb5927cbd163fdd80ba21966db253a009"
        - name: validationMethod
          in: query
          description: The validation method to be added to the response  none, basic, full. Default  none.
          required: true
          schema:
            type: string
            example: basic
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containing all logs of a specific block'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logs'
  /blocks/metrics/latest:
    get:
      summary: 'Metrics - Latest'
      description: Get metrics for recent confirmed blocks for a given blockchain.
      operationId: getLatestMetrics
      tags:
        - Blocks
      parameters:
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containing latest metrics'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Latest'
  /blocks/metrics/historical:
    get:
      summary: 'Metrics - Historical'
      description: Get metrics for historical confirmed blocks for a given blockchain.
      operationId: getHistoricalMetrics
      tags:
        - Blocks
      parameters:
        - name: startDate
          in: query
          description: Filter by data after this date.
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: Filter by data before this date.
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: timeFrame
          in: query
          description: time frame to return the historical data in, options (1m, 5m, 1h, 1d, 1w)
          required: true
          schema:
            type: string
            example: 1m
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containing historical metrics'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Historical'
  /uncles/{hash}:
    get:
      summary: 'Uncles - Single'
      description: Retrieves the uncle specified by its hash.
      operationId: getUncleByHash
      tags:
        - Uncles
      parameters:
        - name: hash
          in: path
          description: 'The hash of the block for which to retrieve block information.'
          required: true
          schema:
            type: string
            example: "0x11b724abb27794818ac91851b625216f4349e009a467b2024e0f1e5af3ae1416"
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containing uncle details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Uncle'
  /uncles:
    get:
      summary: 'Uncles - All'
      description: Retrieves all the uncles within the specified range
      operationId: getAllUncles
      tags:
        - Uncles
      parameters:
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: size
          in: query
          description: Number of records per page
          required: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containing all uncles'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Uncles'
  /blocks/{id}/token-transfers:
    get:
      summary: 'Tokens - Transfers'
      description: Retrieves all the token which were transferred at the specified block number.
      operationId: getAllTransfers
      tags:
        - Blocks
      parameters:
        - name: id
          in: path
          description: The number or hash of the for which to retrieve block information
          required: true
          schema:
            type: string
            example: "9061628"
        - name: amount
          in: query
          description: Filter by tokens transfers where the number of tokens is equal to the specified amount.
          required: true
          schema:
            type: integer
            format: int32
            example: 23138034684558475000
        - name: amountGt
          in: query
          description: Filter by token transfers where the number of tokens is more than the specified amount.
          required: true
          schema:
            type: integer
            format: int32
            example: 23138034684558475000
        - name: amountGte
          in: query
          description: Filter by token transfers where the number of tokens is more than or equal to the specified amount.
          required: true
          schema:
            type: integer
            format: int32
            example: 23138034684558475000
        - name: amountLt
          in: query
          description: Filter by token transfers where the number of tokens is less than the specified amount.
          required: true
          schema:
            type: integer
            format: int32
            example: 23138034684558475000
        - name: amountLte
          in: query
          description: Filter by token transfers where the number of tokens is less than or equal to the specified amount.
          required: true
          schema:
            type: integer
            format: int32
            example: 23138034684558475000
        - name: from
          in: query
          description: Filter by token transfers originating from this address.
          required: true
          schema:
            type: string
            example: "0xa0b73e1ff0b80914ab6fe0444e65848c4c34450b"
        - name: to
          in: query
          description: Filter token transfers received by this address.
          required: true
          schema:
            type: string
            example: "0xa0b73e1ff0b80914ab6fe0444e65848c4c34450b"
        - name: tokenAddress
          in: query
          description: Filter by token transfers for this token.
          required: true
          schema:
            type: string
            example: "0x514910771af9ca656af840dff83e8264ecf986ca"
        - name: transactionHash
          in: query
          description: Filter by token transfers for this transaction
          required: true
          schema:
            type: string
            example: "0xcec13f1eb5e86e7c3c107c375fead3075c959eed87843e207c5a439055e6c145"
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results
          required: true
          schema:
            type: boolean
            example: true
        - name: currency
          in: query
          description: The currency of the price information. Options usd, btc. Only used in conjunction with includePrice
          required: true
          schema:
            type: string
            example: USD
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containing all token transfers of a specific block'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfers'
  /blocks/{id}/transactions:
    get:
      summary: 'Blocks - Transactions'
      description: Retrieves all the transactions included in a specified block id.
      operationId: getAllTransactions
      tags:
        - Blocks
      parameters:
        - name: id
          in: path
          description: The number for which to retrieve block functions.
          required: true
          schema:
            type: string
            example: "9061628"
        - name: includeFunctions
          in: query
          description: Indicates whether or not to include functions (aka internal messages) information for each transaction, if available.
          required: true
          schema:
            type: boolean
            example: true
        - name: includeTokenTransfers
          in: query
          description: Indicates whether or not to include token transfers information for each transaction, if available.
          required: true
          schema:
            type: boolean
            example: true
        - name: includeLogs
          in: query
          description: Indicates whether or not to include log information for each transaction, if available
          required: true
          schema:
            type: boolean
            example: true
        - name: decodeTransactions
          in: query
          description: Decodes transactions input via known ABIs.
          required: true
          schema:
            type: boolean
            example: false
        - name: startDate
          in: query
          description: Filter by transactions executed after this date. Note that the interval can not exceed 1 minute (startDate and endDate should be both specified, or both empty)
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: Filter by transactions executed before this date. Note that the interval can not exceed 1 minute (startDate and endDate should be both specified, or both empty).
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: validationMethod
          in: query
          description: The validation method to be added to the response, none, basic, full. Default, none
          required: true
          schema:
            type: string
            example: basic
        - name: currency
          in: query
          description: The currency of the price information. Options usd, btc. Only used in conjunction with includePrice
          required: true
          schema:
            type: string
            example: USD
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results
          required: true
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: size
          in: query
          description: The number of results to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containing all transactions of a specific block'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transactions'
  /transactions:
    get:
      summary: 'Transactions - All'
      description: Retrieves all transactions matching the specified filters.
      operationId: getAllTransactions
      tags:
        - Transactions
      parameters:
        - name: includeFunctions
          in: query
          description: Indicates whether or not to include log information for each transaction, if available
          required: true
          schema:
            type: boolean
            example: true
        - name: includeLogs
          in: query
          description: Indicates whether or not to include log information
          required: true
          schema:
            type: boolean
            example: true
        - name: decodeTransactions
          in: query
          description: Decodes transactions input via known ABIs.
          required: true
          schema:
            type: boolean
            example: false
        - name: includeTokenTransfers
          in: query
          description: Indicates whether or not to include token transfers information for each transaction, if available
          required: true
          schema:
            type: boolean
            example: true
        - name: status
          in: query
          description: Filter by the status of the transactions to retrieve (all, completed, failed, pending).
          required: true
          schema:
            type: string
            example: all
        - name: startDate
          in: query
          description: Filter by transactions executed after this date. Note that the interval can not exceed 1 minute (startDate and endDate should be both specified, or both empty)
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: Filter by transactions executed before this date. Note that the interval can not exceed 1 minute (startDate and endDate should be both specified, or both empty).
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: validationMethod
          in: query
          description: The validation method to be added to the response, none, basic, full. Default, none
          required: true
          schema:
            type: string
            example: basic
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results
          required: true
          schema:
            type: boolean
            example: true
        - name: currency
          in: query
          description: The currency of the price information. Options usd, btc. Only used in conjunction with includePrice
          required: true
          schema:
            type: string
            example: USD
        - name: size
          in: query
          description: The number of results to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 100
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Lists of all transactions of a specific blockchain.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/All_transactions'
  /transactions/{hash}:
    get:
      summary: 'Transactions - Single'
      description: Retrieves the transaction information for the specified hash.
      operationId: getTransactionByHash
      tags:
        - Transactions
      parameters:
        - name: hash
          in: path
          description: The hash of the transaction for which to retrieve.
          required: true
          schema:
            type: string
            example: "0x133f293b44b2eb632a26e8f7c972ad0f6152ca5c78377102e6804c46ebde6c83"
        - name: includeFunctions
          in: query
          description: Indicates whether or not to include log information for each transaction, if available
          required: true
          schema:
            type: boolean
            example: false
        - name: includeLogs
          in: query
          description: Indicates whether or not to include log information
          required: true
          schema:
            type: boolean
            example: false
        - name: decodeTransactions
          in: query
          description: Decodes transactions input via known ABIs.
          required: true
          schema:
            type: boolean
            example: false
        - name: includeTokenTransfers
          in: query
          description: Indicates whether or not to include token transfers information for each transaction, if available
          required: true
          schema:
            type: boolean
            example: false
        - name: validationMethod
          in: query
          description: The validation method to be added to the response, none, basic, full. Default, none
          required: true
          schema:
            type: string
            example: basic
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results
          required: true
          schema:
            type: boolean
            example: true
        - name: currency
          in: query
          description: The currency of the price information. Options usd, btc. Only used in conjunction with includePrice
          required: true
          schema:
            type: string
            example: USD
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containing detailed transaction information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /transactions/gas/percentiles:
    get:
      summary: 'Gas Price - Gas Percentiles'
      description: Retrieves the latest gas price percentiles for the transactions.
      operationId: getPercentiles
      tags:
        - Transactions
      parameters:
        - name: blockNumber
          in: query
          description: Block number for which to retrieve the data
          required: false
          schema:
            type: string
            example: "9000000"
        - name: numBlocks
          in: query
          description: Number of past blocks on which to calculate the percentiles (max allowed 1000).[Default] 100*
          required: false
          schema:
            type: integer
            format: int32
            example: 200
        - name: numBlocks
          in: query
          description: Number of past blocks on which to calculate the percentiles (max allowed 1000).[Default] 100*
          required: false
          schema:
            type: integer
            format: int32
            example: 200
        - name: timestamp
          in: query
          description: Time at which to retrieve the data. [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "1578531600"
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object Containing the percentile values.(percentile; gas price)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Percentiles'
  /transactions/gas/predictions:
    get:
      summary: 'Gas price - Gas Predictions'
      description: Retrieves the latest gas predictions for the transactions.
      operationId: getPredictions
      tags:
        - Transactions
      parameters:
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object with latest gas predictions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Predictions'
  /transactions/metrics/latest:
    get:
      summary: 'Metrics - Metrics Latest'
      description: Get metrics for recent confirmed transactions for a given blockchain.
      operationId: getLatestMetrics
      tags:
        - Transactions
      parameters:
        - name: includePrice
          in: query
          description: Include price in USD for value metrics
          required: true
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description:  Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object with blockchain latest metrics'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Latest_transaction'
  /transactions/metrics/historical:
    get:
      summary: 'Metrics Historical'
      description: Get metrics for historical confirmed transactions for a given blockchain.
      operationId: getHistoricalMetrics
      tags:
        - Transactions
      parameters:
        - name: startDate
          in: query
          description: Filter by transactions executed after this date. Note that the interval can not exceed 1 minute (startDate and endDate should be both specified, or both empty)
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: Filter by transactions executed before this date. Note that the interval can not exceed 1 minute (startDate and endDate should be both specified, or both empty).
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: timeFrame
          in: query
          description: time frame to return the historical data in, options (1m, 5m, 1h, 1d, 1w)
          required: true
          schema:
            type: string
            example: 1d
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description:  Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object with blockchain historical metrics'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Historical_transaction'
  /transactions/volume:
    get:
      summary: 'Metrics - Volume Historical'
      description: Retrieves the historical (time series) volume of transactions.
      operationId: getVolume
      tags:
        - Transactions
      parameters:
        - name: timeFrame
          in: query
          description: The time frame to return the historical data in.(by day (1d, 2d, ..., all), by hour (1h, 2h, ..., 72h) or by minute (1m, 2m, ..., 360m))
          required: true
          schema:
            type: string
            example: 30d
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description:  Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object with transaction volume by selected time frame.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volumes'
  /transactions/{hash}/token-transfers:
    get:
      summary: 'Token Transfers'
      description: Retrieves the token transfers that took place in the specified transaction.
      operationId: getTokenTransfer
      tags:
        - Transactions
      parameters:
        - name: hash
          in: path
          description: The hash of the transaction for which to retrieve token transfers.
          required: true
          schema:
            type: string
            example: "0x31c27c9b37e17056e67bb0948abf9b1676c91d38e40131a286c28a6c6ddaf90a"
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An array with token transfer information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer_transactions'
  /addresses:
    get:
      summary: 'Addresses - All'
      description: Retrieves every address that has been seen on the network.
      operationId: getAllAddresses
      tags:
        - Addresses
      parameters:
        - name: blockNumber
          in: query
          description: Filter by addresses first encountered at this block number
          required: true
          schema:
            type: integer
            format: int32
            example: 13715749
        - name: blockNumberGt
          in: query
          description: Filter by addresses first encountered after this block number, not including this blocknumber
          required: true
          schema:
            type: integer
            format: int32
            example: 13715749
        - name: blockNumberGte
          in: query
          description: Filter by addresses first encountered after this block number, including this block number
          required: true
          schema:
            type: integer
            format: int32
            example: 13715749
        - name: blockNumberLt
          in: query
          description: Filter by addresses first encountered before this block number, not including this block number
          required: true
          schema:
            type: integer
            format: int32
            example: 13715749
        - name: blockNumberLte
          in: query
          description: Filter by addresses first encountered before this block number, including this block number
          required: true
          schema:
            type: integer
            format: int32
            example: 13715749
        - name: hash
          in: query
          description: Filter by a specific address
          required: true
          schema:
            type: string
            example: "0xc60d5dc69e69a977d4c666c0e7cebe1ad4eae01b8d6804407dc5a5d8d5d195bb"
        - name: startDate
          in: query
          description: Filter by addresses first encountered after this date
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: Filter by addresses first encountered after before date
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: transactionHash
          in: query
          description: Filter by addresses first encountered at this transaction hash
          required: true
          schema:
            type: string
            example: "0xd98b913ab59398a9a643e25e4143a8579f928257ec2e8983c4ecc471f87f6837"
        - name: type
          in: query
          description: Filter by addresses of the specified type (EOA or CONTRACT)
          required: true
          schema:
            type: string
            example: CONTRACT
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: size
          in: query
          description: The number of results to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object with all addresses seen'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/All_addresses'
  /addresses/{hash}/account-balances/latest:
    get:
      summary: 'Balances - Balance Latest'
      description: Retrieves the current account balance for the specified address.
      operationId: getLatestBalance
      tags:
        - Addresses
      parameters:
        - name: hash
          in: path
          description: address to retrieve the account balance for
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results
          required: true
          schema:
            type: boolean
            example: true
        - name: currency
          in: query
          description: The currency of the price information (usd or eth.) - only used in conjunction with includePrice.
          required: true
          schema:
            type: string
            example: USD
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object with current account balance'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance_latest'
  /addresses/{hash}/account-balances/historical:
    get:
      summary: 'Balances - Balance Historical '
      description: Retrieves the historical (time series) account balances for the specified address.
      operationId: getHistoricalBalance
      tags:
        - Addresses
      parameters:
        - name: hash
          in: path
          description: The address to retrieve the account balances for
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: blockNumber
          in: query
          description: FIlter by account balances at block number
          required: true
          schema:
            type: integer
            format: int32
            example: 13715749
        - name: startDate
          in: query
          description: FIlter by account balances which happened after this date
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: FIlter by account balances which happened before this date
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: value
          in: query
          description: FIlter by account balances where the balance is equal to this value
          required: true
          schema:
            type: integer
            format: int32
            example: 207.18797038
        - name: valueGt
          in: query
          description: FIlter by account balances where the balance is greater than this value
          required: true
          schema:
            type: integer
            format: int32
            example: 201.18797035
        - name: valueGte
          in: query
          description: FIlter by account balances where the balance is greater than or equal to this value
          required: true
          schema:
            type: integer
            format: int32
            example: 101.18797034
        - name: valueLt
          in: query
          description: FIlter by account balances where the balance is less than this value
          required: true
          schema:
            type: integer
            format: int32
            example: 110.18797030
        - name: valueLte
          in: query
          description: FIlter by account balances where the balance is less than or equal to this value
          required: true
          schema:
            type: integer
            format: int32
            example: 10.18797050
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results
          required: true
          schema:
            type: boolean
            example: true
        - name: currency
          in: query
          description: The currency of the price information (usd or eth.) - only used in conjunction with includePrice.
          required: true
          schema:
            type: string
            example: USD
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: size
          in: query
          description: The number of results to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: timeFormat
          in: query
          description:  Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object with historical account balance'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance_historical'
  /addresses/{hash}/balances:
    get:
      summary: 'Balances - Balance & Tokens Latest'
      description: Retrieves the latest account and token balances for the specified address.
      operationId: getTokensAndBalance
      tags:
        - Addresses
      parameters:
        - name: hash
          in: path
          description: The address for which to retrieve balances.
          required: true
          schema:
            type: string
            example: "0x3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be"
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results
          required: true
          schema:
            type: boolean
            example: true
        - name: currency
          in: query
          description: The currency of the price information (usd or eth.) - only used in conjunction with includePrice.
          required: true
          schema:
            type: string
            example: USD
        - name: timeFormat
          in: query
          description:  Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'The object containing detailed data about the address s balances.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance_tokens'
  /addresses/balances:
    get:
      summary: 'Balances Batch'
      description: Retrieves the latest account and token balances for the specified addresses.
      operationId: getBalanceBatch
      tags:
        - Addresses
      parameters:
        - name: addresses
          in: query
          description: A comma separated list of addresses. NOTE  Max 50 addresses per request!
          required: true
          schema:
            type: string
            example: 0x3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be,0x06012c8cf97bead5deae237070f9587f8e7a266d
        - name: blockNumber
          in: query
          description: Get balances for addresses at a specific block height. (NOTE does not support token holdings for Ethereum at this time.)
          required: true
          schema:
            type: string
            example: "600000"
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results
          required: true
          schema:
            type: boolean
            example: true
        - name: currency
          in: query
          description: The currency of the price information (usd or eth.) - only used in conjunction with includePrice.
          required: true
          schema:
            type: string
            example: USD
        - name: timeFormat
          in: query
          description:  Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'The object containing detailed data about the address s balances.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance_batch'
  /addresses/{hash}/functions:
    get:
      summary: 'Internal Messages'
      description: Retrieves internal messages where this address is either the originator or a recipient.
      operationId: getFunctions
      tags:
        - Addresses
      parameters:
        - name: hash
          in: path
          description: The address of the account
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: blockNumber
          in: query
          description: Filter by internal messages contained within this block number
          required: true
          schema:
            type: integer
            format: int64
            example: 7280444
        - name: direction
          in: query
          description: The order in which to return the results (ascending or descending). By default, records are returned in descending order, so the most recent records are returned first.
          required: true
          schema:
            type: string
            example: descending
        - name: from
          in: query
          description: Filter by internal messages for this "from" address
          required: true
          schema:
            type: string
            example: "0x09191d18729da57a83a9afc8ace0c8d7d104e118"
        - name: to
          in: query
          description: Filter by internal messages for this "to" address
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: transactionHash
          in: query
          description: Filter by internal messages for this transaction
          required: true
          schema:
            type: string
            example: "0x63e10d5ce03fce3116a19a4d8c1869fd53630f8ff9d8fb16790200af965ba0c2"
        - name: startDate
          in: query
          description: Filter by internal messages which happened after this date
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: Filter by internal messages which happened before this date
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: validationMethod
          in: query
          description: The validation method to be added to the response, none, basic, full. Default, none
          required: true
          schema:
            type: string
            example: basic
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 0
        - name: size
          in: query
          description: Number of records per page
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Array of transaction objects.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses_functions'
  /addresses/{hash}/logs:
    get:
      summary: 'Logs'
      description: Retrieves the logs for the transactions where this address is either the originator or a recipient.
      operationId: getLogs
      tags:
        - Addresses
      parameters:
        - name: hash
          in: path
          description: The address to retrieve logs for
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: blockNumber
          in: query
          description: Filter by logs contained in this block number
          required: true
          schema:
            type: integer
            format: int32
            example: 7280571
        - name: transactionHash
          in: query
          description: Filter by logs from a specific transaction hash
          required: true
          schema:
            type: string
            example: "0x3c0abea77f9324b565696e51a6e7109a10fe320e985963b869105ce6e8db20f7"
        - name: startDate
          in: query
          description: Filter by logs which happened after this date
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: Filter by logs which happened before this date
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 0
        - name: size
          in: query
          description: Number of records per page
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containig logs of specific address'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address_logs'
  /addresses/{hash}/converter:
    get:
      summary: 'Converter'
      description: Converts the specified address in the Bitcoin Cash & Legacy formats.
      operationId: getAddress
      tags:
        - Addresses
      parameters:
        - name: hash
          in: path
          description: The address to convert.
          required: true
          schema:
            type: string
            example: pp8xkgfvyjhkdkta0awjx7ud7qmnwd0rvy5vdtxqnv
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: bitcoin-mainnet
      responses:
        '200':
          description: 'Object containing address with new format'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses_converter'
  /addresses/{hash}/information:
    get:
      summary: 'Information'
      description: Retrieves information about the specified address, network(s) and blockchain(s) this address exist within.
      operationId: getInformation
      tags:
        - Addresses
      parameters:
        - name: hash
          in: path
          description: The address to retrieve information for.
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results
          required: true
          schema:
            type: boolean
            example: true
        - name: currency
          in: query
          description: The currency of the price information (usd or eth.) - only used in conjunction with includePrice.
          required: true
          schema:
            type: string
            example: USD
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: bitcoin-mainnet
      responses:
        '200':
          description: 'Object with specific address information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses_information'
  /addresses/{hash}/metadata:
    get:
      summary: 'Metadata'
      description: Retrieves statistics about the specified address, balances, holdings, etc.
      operationId: getMetadata
      tags:
        - Addresses
      parameters:
        - name: hash
          in: path
          description: The address to retrieve statistics formats.
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: timeFormat
          in: query
          description:  Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Array with statistics about the specified address'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address_statistics'
  /addresses/extended/{address}:
    get:
      summary: 'Extended Public Key'
      description: Generates derived addresses based an x,y,z public address and a path
      operationId: getKey
      tags:
        - Addresses
      parameters:
        - name: address
          in: path
          description: The X, Y or Z public address used to generate derived addresses.
          required: true
          schema:
            type: string
            example: ypub6XTWVFLfqkFYarn9NArqtBLziffJttqf1Utaur3sTbTGtgfNaTzkGcRpFgiiieBjQ6rV1rJ7iJ9r9oXGpPXZpkq71yfss2mrKLaauxhjXD4
        - name: path
          in: query
          description: The path into the HD addresses generated from the extended public key.
          required: true
          schema:
            type: string
            example: m/0/0/0
        - name: type
          in: query
          description: Which type of extended public key to parse, this is not needed unless the address is somehow encoded differently.
          required: true
          schema:
            type: string
            example: ypub
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 0
        - name: size
          in: query
          description: Number of records per page
          required: true
          schema:
            type: integer
            format: int32
            example: 100
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: bitcoin-mainnet
      responses:
        '200':
          description: 'Array with statistics about the specified address'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses_extended'
  /addresses/{address}/pending-transactions:
    get:
      summary: 'Mempool'
      description: Retrieves mempool transactions the specified address is involved in.
      operationId: getMempool
      tags:
        - Addresses
      parameters:
        - name: address
          in: path
          description: The address of the account for which to retrieve transactions.
          required: true
          schema:
            type: string
            example: 1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY
        - name: from
          in: query
          description: Filter by transactions for this "from" address.
          required: true
          schema:
            type: string
            example: 1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY
        - name: to
          in: query
          description: Filter by transactions for this "to" address
          required: true
          schema:
            type: string
            example: 1KGG9kvV5zXiqyQAMfY32sGt9eFLMmgpgX,1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY
        - name: startDate
          in: query
          description: Filter by transactions which happened after this date.
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: Filter by transactions which happened before this date.
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results
          required: true
          schema:
            type: boolean
            example: true
        - name: currency
          in: query
          description: The currency of the price information (usd or eth.) - only used in conjunction with includePrice.
          required: true
          schema:
            type: string
            example: USD
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 0
        - name: size
          in: query
          description: Number of records per page
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: bitcoin-mainnet
      responses:
        '200':
          description: 'Object containing transaction data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses_mempool'
  /addresses/metrics/latest:
    get:
      summary: 'Metrics Latest'
      description: Get metrics for all addresses that have exist publicly for a given blockchain.
      operationId: getMetrics
      tags:
        - Addresses
      parameters:
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containing latest metrics'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses_latest'
  /addresses/{hash}/adoption:
    get:
      summary: 'Adoption'
      description: Retrieves the historical adoption for the specified address.
      operationId: getAdoption
      tags:
        - Addresses
      parameters:
        - name: hash
          in: path
          description: The address for which to receive adoption statistics.
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: timeFrame
          in: query
          description: The time frame to return the historical data(by day (1d, 2d, ..., all), by hour (1h, 2h, ..., 72h) or by minute )
          required: true
          schema:
            type: string
            example: 30d
        - name: timePeriod
          in: query
          description: The time period (in minutes) to aggregate the historical data.
          required: true
          schema:
            type: string
            example: "5000000"
        - name: timeFormat
          in: query
          description:  Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'The historical address adoption data.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses_adoptions'
  /addresses/{hash}/usage:
    get:
      summary: 'Usage'
      description: Retrieves the historical usage for the specified address.
      operationId: getUsage
      tags:
        - Addresses
      parameters:
        - name: hash
          in: path
          description: The address for which to receive usage statistics.
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: timeFrame
          in: query
          description: The time frame to return the historical data(by day (1d, 2d, ..., all), by hour (1h, 2h, ..., 72h) or by minute )
          required: true
          schema:
            type: string
            example: 30d
        - name: timePeriod
          in: query
          description: The time period (in minutes) to aggregate the historical data.
          required: true
          schema:
            type: string
            example: "5000000"
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description:  Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'The historical address usage data.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses_usage'
  /addresses/{hash}/token-balances/latest:
    get:
      summary: 'Tokens - Balances Latest'
      description: Retrieves the tokens this address is holding.
      operationId: getLatestBalance
      tags:
        - Addresses
      parameters:
        - name: hash
          in: path
          description: address to retrieve tokens for.
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: direction
          in: query
          description: The direction by which to sort the tokens (ascending or descending).
          required: true
          schema:
            type: string
            example: descending
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results.
          required: true
          schema:
            type: boolean
            example: true
        - name: currency
          in: query
          description: The currency of the price information (usd or eth.) - only used in conjunction with includePrice.
          required: true
          schema:
            type: string
            example: EUR
        - name: sortType
          in: query
          description: The metric by which to rank the tokens (amount, name, symbol).
          required: true
          schema:
            type: string
            example: amount
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: string
            example: "0"
        - name: size
          in: query
          description: The number of records per page.
          required: true
          schema:
            type: string
            example: "2"
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object containing details about a token owned by the specified address.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses_balances'
  /addresses/{hash}/token-balances/historical:
    get:
      summary: 'Tokens - Balances Historical'
      description: Retrieves the historical (time series) token balances for the specified address.
      operationId: getHistoricalBalance
      tags:
        - Addresses
      parameters:
        - name: hash
          in: path
          description: address to retrieve tokens for.
          required: true
          schema:
            type: string
            example: "0xff3d7ee787ce86641264920baadff8daab735a2a"
        - name: amount
          in: query
          description: Filters by token balances which value is equal to this amount
          required: true
          schema:
            type: integer
            format: int32
            example: 1341
        - name: amountGt
          in: query
          description: Filter by token balances which value is greater than this amount
          required: true
          schema:
            type: integer
            format: int32
            example: 2348
        - name: amountGte
          in: query
          description: Filter by token balances which value is greater than or equal to this amount
          required: true
          schema:
            type: integer
            format: int32
            example: 7941
        - name: amountLt
          in: query
          description: Filter by token balances which value is less than this amount
          required: true
          schema:
            type: integer
            format: int32
            example: 2580
        - name: amountLte
          in: query
          description: Filter by token balances which value is less than or equal to this amount
          required: true
          schema:
            type: integer
            format: int32
            example: 3560
        - name: startDate
          in: query
          description: Get balance after a start date (Requires endDate)
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: Get balances before the specified date (Requires startDate)
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: tokenAddress
          in: query
          description: Filter by the speficied token address.
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 0
        - name: size
          in: query
          description: The number of records per page.
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: format
          in: query
          description: Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An array containing details about a token owned by the specified address.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses_historical'
  /addresses/{hash}/token-transfers:
    get:
      summary: 'Tokens - Transfers'
      description: Retrieves all token transfers involving the specified address.
      operationId: getTransfers
      tags:
        - Addresses
      parameters:
        - name: hash
          in: path
          description: The address to retrieve the token transfers for
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: amount
          in: query
          description: Filter by token transfers which value is equal to this amount.
          required: true
          schema:
            type: integer
            format: int32
            example: 20000000000000000000
        - name: amountGt
          in: query
          description: Filter by token transfers which value is greater than this amount.
          required: true
          schema:
            type: integer
            format: int32
            example: 20000000000000000000
        - name: amountGte
          in: query
          description: Filter by token transfers which value is greater than or equal to this amount.
          required: true
          schema:
            type: integer
            format: int32
            example: 20000000000000000000
        - name: amountLt
          in: query
          description: Filter by token transfers which value is less than this amount.
          required: true
          schema:
            type: integer
            format: int32
            example: 20000000000000000000
        - name: amountLte
          in: query
          description: Filter by token transfers which value is less than or equal to this amount
          required: true
          schema:
            type: integer
            format: int32
            example: 20000000000000000000
        - name: blockNumber
          in: query
          description: Filter by token transfers with this block number.
          required: true
          schema:
            type: integer
            format: int32
            example: 7252428
        - name: startDate
          in: query
          description: Filter by token transfers which happened after this date.
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: Filter by token transfers which happened before this date
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: tokenAddress
          in: query
          description: Filter by token transfers for this token.
          required: true
          schema:
            type: string
            example: "0x26fb86579e371c7aedc461b2ddef0a8628c93d3b"
        - name: transactionHash
          in: query
          description: Filter by token transfers for this transaction hash.
          required: true
          schema:
            type: string
            example: "0x281d6478dee6d20da7e9293991cc68085532a915760f23d77ffa9923edb523de"
        - name: direction
          in: query
          description: The order in which to return the results (ascending or descending).
          required: true
          schema:
            type: string
            example: descending
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: size
          in: query
          description: The number of records per page.
          required: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: validationMethod
          in: query
          description: The validation method to be added to the response, none, basic, full. Default, none
          required: true
          schema:
            type: string
            example: basic
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results.
          required: true
          schema:
            type: boolean
            example: true
        - name: currency
          in: query
          description: The currency of the price information.(Options usd, btc.) Only used in conjunction with includePrice.
          required: true
          schema:
            type: string
            example: USD
        - name: format
          in: query
          description: Format of the return payload.([Defaults] csv | json*)
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Array of token transfer objects.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses_transfers'
  /addresses/{hash}/transactions:
    get:
      summary: 'Transactions'
      description: Retrieves all token transfers involving the specified address.
      operationId: getTransfers
      tags:
        - Addresses
      parameters:
        - name: hash
          in: path
          description: address to retrieve transactions for
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: blockNumber
          in: query
          description: Filter by transactions for this block number.
          required: true
          schema:
            type: integer
            format: int32
            example: 5703560
        - name: from
          in: query
          description: Filter by transactions for this "from" address.
          required: true
          schema:
            type: string
            example: "0xce9af648a831ddf0cd6d05e3fe5787b3c7987246"
        - name: to
          in: query
          description: Filter by transactions for this "to" address
          required: true
          schema:
            type: string
            example: "0xf85feea2fdd81d51177f6b8f35f0e6734ce45f5"
        - name: includeFunctions
          in: query
          description: Indicates whether or not to include functions (aka internal messages) information for each transaction, if available (false|true).
          required: true
          schema:
            type: boolean
            example: true
        - name: includeLogs
          in: query
          description: Indicates whether or not to include log information for each transaction, if available (false|true).
          required: true
          schema:
            type: boolean
            example: true
        - name: decodeTransactions
          in: query
          description: Decodes transactions input via known ABIs.
          required: true
          schema:
            type: boolean
            example: false
        - name: includeTokenTransfers
          in: query
          description: Indicates whether or not to include token transfers information for each transaction, if available (false|true).
          required: true
          schema:
            type: boolean
            example: true
        - name: includePrice
          in: query
          description: Indicates whether or not to include price data with the results. (Options true, false.)
          required: true
          schema:
            type: boolean
            example: true
        - name: startDate
          in: query
          description: Filter by transactions which happened after this date.
          required: true
          schema:
            type: string
            example: "2021-01-01 12:00:00"
        - name: endDate
          in: query
          description: Filter by transactions which happened before this date.
          required: true
          schema:
            type: string
            example: "2021-03-01 12:00:00"
        - name: validationMethod
          in: query
          description: The validation method to be added to the response ( none, basic, full. (Default none))
          required: true
          schema:
            type: string
            example: basic
        - name: currency
          in: query
          description: The currency of the price information (usd or btc.) - only used in conjunction with includePrice.
          required: true
          schema:
            type: string
            example: USD
        - name: direction
          in: query
          description: The order in which to return the results (ascending or descending). By default, records are returned in descending order, so the most recent records are returned first.
          required: true
          schema:
            type: string
            example: descending
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 2
        - name: size
          in: query
          description: The number of records per page.
          required: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: format
          in: query
          description: Format of the return payload. (Defaults csv | json*)
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An array containing objects containing data pertaining to the specified transaction.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Addresses_transactions'
  /contracts/{hash}:
    get:
      summary: 'Details'
      description: Retrieves all the detailed information for the specified contract (ABI, bytecode, sourcecode...).
      operationId: getDetails
      tags:
        - Contracts
      parameters:
        - name: hash
          in: path
          description: The address of the contract
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An object with detailed contract information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contracts_details'
  /contracts/{hash}/functions:
    get:
      summary: 'Functions'
      description: Retrieves the functions of the specified contract (if available) - if not available on chain, the byte code is decompiled and a list of functions is extracted from it.
      operationId: getFunctions
      tags:
        - Contracts
      parameters:
        - name: hash
          in: path
          description: The address of the contract
          required: true
          schema:
            type: string
            example: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'An array of every contract function along with details about each function.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contracts_functions'
  /signatures/{hash}:
    get:
      summary: 'Signatures'
      description: Retrieves detailed information about the specified signature hash.
      operationId: getSignatures
      tags:
        - Contracts
      parameters:
        - name: hash
          in: path
          description: The hash (keccak 256) of the signature (4 bytes)
          required: true
          schema:
            type: string
            example: "0x3d7d3f5a"
        - name: blockchain-id
          in: header
          description: ID of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Array with information about the specified signature hash.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contracts_signatures'
  /market/defi/lending/exchanges/information:
    get:
      summary: 'DeFi-Lending - Information'
      description: Retrieves the list of all available lending protocols and assets.
      operationId: getInformation
      tags:
        - Defi-Dex
      parameters:
        - name: exchange
          in: query
          description: Filter to a specific lending protocol
          required: false
          schema:
            type: string
            example: aave
        - name: includeDates
          in: query
          description: Add startDate and endDate to the returned payload. Helpful to know how long an asset has existed.
          required: true
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload ([Defaults] csv | json*)
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - (can only be used in combination with option format=csv.)
          required: false
          schema:
            type: string
            example: timestamp
      responses:
        '200':
          description: 'Array with lending protocols and assets.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lending_information'
  /market/defi/lending/exchanges/{exchange}/latest:
    get:
      summary: 'Lending Latest'
      description: Retrieves the latest lending information for the specified exchange (for example AAVE).
      operationId: getLatestLending
      tags:
        - Defi-Dex
      parameters:
        - name: exchange
          in: path
          description: The address of the lending protocol.
          required: true
          schema:
            type: string
            example: aave
        - name: asset
          in: query
          description: Asset to filter lending information to.
          required: false
          schema:
            type: string
            example: MKR
        - name: format
          in: query
          description:  Format of the return payload ([Defaults] csv | json*)
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - (can only be used in combination with option format=csv.)
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description:  Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with latest lending information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lending_latest'
  /market/defi/lending/exchanges/{exchange}/historical:
    get:
      summary: 'Lending Historical'
      description: Retrieves the timeseries lending information for the specified exchange (for example AAVE).
      operationId: getHistoricalLending
      tags:
        - Defi-Dex
      parameters:
        - name: exchange
          in: path
          description: The address of the lending protocol.
          required: true
          schema:
            type: string
            example: aave
        - name: asset
          in: query
          description: Asset to filter lending information to.
          required: false
          schema:
            type: string
            example: MKR
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive) [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "1626307200000"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds |
          required: false
          schema:
            type: string
            example: "1628812800000"
        - name: format
          in: query
          description:  Format of the return payload ([Defaults] csv | json*)
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description:  List of fields to include in the return payload - (can only be used in combination with option format=csv.)
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description:  Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with timeseries lending information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lending_historical'
  /market/defi/liquidity/information:
    get:
      summary: 'Liquidity - Information'
      description: Retrieves information about supported exchange-pairs for ohlcv.
      operationId: getLiquidityInformation
      tags:
        - Defi-Dex
      parameters:
        - name: exchange
          in: query
          description: Only return data for the specified exchange(s) (comma separated)
          required: true
          schema:
            type: string
            example: curvev1
        - name: includeMetadata
          in: query
          description: Include data for asset pair and pool information.NOTE If using this without specifying an exchange the endpoint will not return data.
          required: false
          schema:
            type: boolean
            example: true
        - name: includeDates
          in: query
          description: Include date ranges for each record.
          required: false
          schema:
            type: boolean
            example: true
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: size
          in: query
          description:  The number of records per page
          required: true
          schema:
            type: integer
            format: int32
            example: 100
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 10
      responses:
        '200':
          description: 'Object containing a list of pairs supported by the exchange.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Liquidity_information'
  /market/defi/liquidity/{pool}/latest:
    get:
      summary: 'Liquidity - Latest'
      description: Retrieves the latest liquidity information for the specified pair.
      operationId: getLatestsLiquidity
      tags:
        - Defi-Dex
      parameters:
        - name: pool
          in: path
          description: The pool to retrieve the most current data. Can be the pool/pair symbols or address.
          required: true
          schema:
            type: string
            example: DAI_WETH
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the data. Example exchange=uniswapv3,curvev1
          required: true
          schema:
            type: string
            example: uniswapv3,curvev1
        - name: format
          in: query
          description:  Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with latest liquidity information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Liquidity_latest'
  /market/defi/liquidity/{pool}/historical:
    get:
      summary: 'Liquidity - Historical'
      description: Retrieves the historical (time series) liquidity for the specified pair.
      operationId: getHistoricalLiquidity
      tags:
        - Defi-Dex
      parameters:
        - name: pool
          in: path
          description: The pool to retrieve the most current data. Can be the pool/pair symbols or address.
          required: true
          schema:
            type: string
            example: DAI_WETH
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the data. Example exchange=uniswapv3,curvev1
          required: true
          schema:
            type: string
            example: uniswapv3,curvev1
        - name: startDate
          in: query
          description: FIlter by pairs after this date.
          required: true
          schema:
            type: string
            example: "2019-12-10T23:42:25.997Z"
        - name: endDate
          in: query
          description: FIlter by pairs before this date.
          required: true
          schema:
            type: string
            example: "2020-12-10T23:42:25.997Z"
        - name: format
          in: query
          description:  Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with historical liquidity information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Liquidity_historical'
  /market/defi/ohlcv/information:
    get:
      summary: 'OHLCV - Information'
      description: Retrieves information about supported exchange-pairs for ohlcv.
      operationId: getMarketInformation
      tags:
        - Defi-Dex
      parameters:
        - name: exchange
          in: query
          description: Only return data for the specified exchange(s) (comma separated). Example curvev1
          required: true
          schema:
            type: string
            example: curvev1
        - name: includeMetadata
          in: query
          description: Include data for asset pair and pool information.
          required: false
          schema:
            type: boolean
            example: true
        - name: includeDates
          in: query
          description: Include date ranges for each record.
          required: false
          schema:
            type: boolean
            example: true
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: size
          in: query
          description: The number of records per page.
          required: true
          schema:
            type: integer
            format: int32
            example: 100
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 10
      responses:
        '200':
          description: 'Object containing a list of pairs supported by the exchange.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ohlcv_information'
  /market/defi/ohlcv/{pool}/latest:
    get:
      summary: 'OHLCV - Latest'
      description: Retrieves the latest open-high-low-close for the specified pair. Includes data for exchanges depending on where the pair is traded. Asset information is included in the payload.
        Base & Quote information is using the first and second asset in a pool/pair, which is the represented price.
      operationId: getLatestInformation
      tags:
        - Defi-Dex
      parameters:
        - name: pool
          in: path
          description: The pool to retrieve the most current data. Can be the pool/pair symbols or address.
          required: true
          schema:
            type: string
            example: DAI+USDC+USDT
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve OHLCV. Example exchange=uniswapv3,curvev1
          required: true
          schema:
            type: string
            example: uniswapv3,curvev1
        - name: format
          in: query
          description:  Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing latest open-high-low-close for the specified pair'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ohlcv_latest'
  /market/defi/ohlcv/{pool}/historical:
    get:
      summary: 'OHLCV - Historical'
      description: Retrieves the historical (time series) open-high-low-close for the specified pair. Includes data for exchanges depending on where the pair is traded.
        Base & Quote information is using the first and second asset in a pool/pair, which is the represented price.
      operationId: getHistoricalInformation
      tags:
        - Defi-Dex
      parameters:
        - name: pool
          in: path
          description: The pool to retrieve the most current data. Can be the pool/pair symbols or address.
          required: true
          schema:
            type: string
            example: DAI+USDC+USDT
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve OHLCV. Example exchange=uniswapv3,curvev1
          required: true
          schema:
            type: string
            example: uniswapv3,curvev1
        - name: startDate
          in: query
          description: FIlter by pairs after this date.
          required: true
          schema:
            type: string
            example: "2019-12-10T23:42:25.997Z"
        - name: endDate
          in: query
          description: FIlter by pairs before this date.
          required: true
          schema:
            type: string
            example: "2020-12-10T23:42:25.997Z"
        - name: timeInterval
          in: query
          description: Time interval to return the historical data in ("days" | "hours" | "minutes")
          required: true
          schema:
            type: string
            example: hours
        - name: format
          in: query
          description:  Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical (time series) open-high-low-close for the specified pair'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ohlcv_historical'
  /market/defi/metrics/exchanges/{exchange}/latest:
    get:
      summary: 'Metrics - Exchanges Latest'
      description: Retrieves the latest exchange daily metrics for the specified decentralized exchange.
      operationId: getExchangeLatest
      tags:
        - Defi-Dex
      parameters:
        - name: exchange
          in: path
          description: Exchange for which to return the global metrics - can be specified as -name (uniswapv2) -id (0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f)
          required: true
          schema:
            type: string
            example: uniswapv2
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object with latest exchange daily metrics'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exchanges_latest'
  /market/defi/metrics/exchanges/{exchange}/historical:
    get:
      summary: 'Metrics - Exchanges Historical'
      description: Retrieves historical daily exchange metrics for the specified decentralized exchange.
      operationId: getExchangeHistorical
      tags:
        - Defi-Dex
      parameters:
        - name: exchange
          in: path
          description: Exchange for which to return the global metrics - can be specified as -name (uniswapv2) -id (0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f)
          required: true
          schema:
            type: string
            example: uniswapv2
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Examples] 1578531600 | 1578531600000 | 2020-09-01T01:00:00
          required: false
          schema:
            type: string
            example: "2019-12-10T23:42:25.997Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Examples] 1578531600 | 1578531600000 | 2020-09-01T01:00:00
          required: false
          schema:
            type: string
            example: "2020-12-10T23:42:25.997Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object with historical daily exchange metrics '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exchanges_historical'
  /market/defi/metrics/exchanges/{exchange}/assets/{asset}/latest:
    get:
      summary: 'Metrics - Assets Latest'
      description: Retrieves the latest daily metrics for the specified asset (for example DAI).
      operationId: getAssetsLatest
      tags:
        - Defi-Dex
      parameters:
        - name: exchange
          in: path
          description: Exchange for which to return the global metrics - can be specified as -name (uniswapv2) -id (0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f)
          required: true
          schema:
            type: string
            example: uniswapv2
        - name: asset
          in: path
          description: Asset for which to return the metrics, for example 0x6b175474e89094c44da98b954eedeac495271d0f (DAI)
          required: true
          schema:
            type: string
            example: "0x6b175474e89094c44da98b954eedeac495271d0f"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with latest daily metrics for the specified asset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assets_latest'
  /market/defi/metrics/exchanges/{exchange}/assets/{asset}/historical:
    get:
      summary: 'Metrics - Assets Historical'
      description: Retrieves historical daily metrics for the specified asset (for example DAI).
      operationId: getAssetsHistorical
      tags:
        - Defi-Dex
      parameters:
        - name: exchange
          in: path
          description: Exchange for which to return the global metrics - can be specified as -name (uniswapv2) -id (0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f)
          required: true
          schema:
            type: string
            example: uniswapv2
        - name: asset
          in: path
          description: Asset for which to return the metrics, for example 0x6b175474e89094c44da98b954eedeac495271d0f (DAI)
          required: true
          schema:
            type: string
            example: "0x6b175474e89094c44da98b954eedeac495271d0f"
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Examples] 1578531600 | 1578531600000 | 2020-09-01T01:00:00
          required: false
          schema:
            type: string
            example: "2019-12-10T23:42:25.997Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Examples] 1578531600 | 1578531600000 | 2020-09-01T01:00:00
          required: false
          schema:
            type: string
            example: "2020-12-10T23:42:25.997Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with historical daily metrics for the specified asset '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assets_historical'
  /market/defi/metrics/exchanges/{exchange}/pairs/{pair}/latest:
    get:
      summary: 'Metrics - Pairs Latest'
      description: Retrieves the latest minute by minute metrics for the specified pair (for example DAI_WETH).
      operationId: getPairsLatest
      tags:
        - Defi-Dex
      parameters:
        - name: exchange
          in: path
          description: Exchange of the asset for which to return the metrics  - can be specified as -name (uniswapv2) -id (0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f)
          required: true
          schema:
            type: string
            example: uniswapv2
        - name: pair
          in: path
          description: Pair for which to return the metrics, for example, for example 0xa478c2975ab1ea89e8196811f51a7b7ade33eb11 (DAI_WETH)
          required: true
          schema:
            type: string
            example: "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with the latest minute by minute metrics for the specified pair'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pairs_latest'
  /market/defi/metrics/exchanges/{exchange}/pairs/{pair}/historical:
    get:
      summary: 'Metrics - Pairs Historical'
      description: Retrieves historical minute by minute metrics for the specified pair (for example DAI_WETH).
      operationId: getPairsHistorical
      tags:
        - Defi-Dex
      parameters:
        - name: exchange
          in: path
          description: Exchange for which to return the global metrics  - can be specified as -name (uniswapv2) -id (0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f)
          required: true
          schema:
            type: string
            example: uniswapv2
        - name: pair
          in: path
          description: Pair for which to return the metrics, for example, for example 0xa478c2975ab1ea89e8196811f51a7b7ade33eb11 (DAI_WETH)
          required: true
          schema:
            type: string
            example: "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11"
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Examples] 1578531600 | 1578531600000 | 2020-09-01T01:00:00
          required: false
          schema:
            type: string
            example: "2019-12-10T23:42:25.997Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Examples] 1578531600 | 1578531600000 | 2020-09-01T01:00:00
          required: false
          schema:
            type: string
            example: "2020-12-10T23:42:25.997Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with historical minute by minute metrics for the specified pair'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pairs_historical'
  /market/defi/prices/asset/information:
    get:
      summary: 'Price - Assets Information'
      description: Retrieves the list of all available market asset price data sets.
      operationId: getAssetsInformation
      tags:
        - Defi-Dex
      parameters:
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: json
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: baseAddress
      responses:
        '200':
          description: 'Array with the list of all available market asset price data sets.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assets_information'
  /market/defi/prices/asset/{asset}/latest:
    get:
      summary: 'Price - Assets Latest'
      description: Retrieves the latest minute by minute price for the specified asset (for example DAI).
      operationId: getAssetsLatest
      tags:
        - Defi-Dex
      parameters:
        - name: asset
          in: path
          description: The address of the asset. (example is DAI)
          required: true
          schema:
            type: string
            example: "0x6b175474e89094c44da98b954eedeac495271d0f"
        - name: lookbackPeriod
          in: query
          description:  Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: json
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: pair
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object with latest minute by minute price for the specified asset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prices_latest'
  /market/defi/prices/asset/{asset}/historical:
    get:
      summary: 'Price - Assets Historical'
      description: Retrieves the historical minute by minute price for the specified asset (for example DAI).
      operationId: getAssetsHistorical
      tags:
        - Defi-Dex
      parameters:
        - name: asset
          in: path
          description: The address of the asset. (example is DAI)
          required: true
          schema:
            type: string
            example: "0x6b175474e89094c44da98b954eedeac495271d0f"
        - name: startDate
          in: query
          description: FIlter by pairs after this date.
          required: true
          schema:
            type: string
            example: "1633374914078"
        - name: endDate
          in: query
          description: FIlter by pairs before this date.
          required: true
          schema:
            type: string
            example: "1633461314078"
        - name: timeInterval
          in: query
          description: Time interval to return the historical data in ("days" | "hours" | "minutes")
          required: true
          schema:
            type: string
            example: days
        - name: lookbackPeriod
          in: query
          description: Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: json
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: pairs
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object with historical minute by minute price for the specified asset '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prices_historical'
  /market/defi/prices/pairs/information:
    get:
      summary: 'Price - Pairs Information'
      description: Retrieves the list of all available market pair price data sets.
      operationId: getPairsInformation
      tags:
        - Defi-Dex
      parameters:
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: json
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: baseAddress
      responses:
        '200':
          description: 'Array with list of all available market pair price data sets.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pairs_information'
  /market/defi/prices/pairs/bases/{base}/quotes/{quote}/latest:
    get:
      summary: 'Price - Pairs Latest'
      description: Retrieves the latest minute by minute price for the specified pair (for example DAI_WETH).
      operationId: getPairsLatest
      tags:
        - Defi-Dex
      parameters:
        - name: base
          in: path
          description: The address of the base. (example is DAI)
          required: true
          schema:
            type: string
            example: "0x6b175474e89094c44da98b954eedeac495271d0f"
        - name: quote
          in: path
          description: The address of the quote. (Example is WETH)
          required: true
          schema:
            type: string
            example: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: json
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object with latest minute by minute price for the specified pair'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bases_latest'
  /market/defi/prices/pairs/bases/{base}/quotes/{quote}/historical:
    get:
      summary: 'Price - Pairs Historical'
      description: Retrieves the historical minute by minute price for the specified pair (for example DAI_WETH).
      operationId: getPairsHistorical
      tags:
        - Defi-Dex
      parameters:
        - name: base
          in: path
          description: The address of the base. (example is DAI)
          required: true
          schema:
            type: string
            example: "0x6b175474e89094c44da98b954eedeac495271d0f"
        - name: quote
          in: path
          description: The address of the quote. (Example is WETH)
          required: true
          schema:
            type: string
            example: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
        - name: startDate
          in: query
          description: FIlter by pairs after this date.
          required: true
          schema:
            type: string
            example: "1617653294495"
        - name: endDate
          in: query
          description: FIlter by pairs before this date.
          required: true
          schema:
            type: string
            example: "1617739694495"
        - name: timeInterval
          in: query
          description: Time interval to return the historical data in ("days" | "hours" | "minutes")
          required: true
          schema:
            type: string
            example: hours
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: json
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object with historical minute by minute price for the specified pair'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Base_historical'
  /market/defi/trades/information:
    get:
      summary: 'Trades - Information'
      description: Retrieves the list of all available market trade data sets.
      operationId: getTradesInformation
      tags:
        - Defi-Dex
      parameters:
        - name: exchange
          in: query
          description: Only return data for the given exchanges (comma separated) Example curvev1
          required: true
          schema:
            type: string
            example: curvev1
        - name: includeMetadata
          in: query
          description: Include data for asset pair and pool information.
           NOTE Using this flag enforces pagination, which is best used in addition to an exchange filter.
          required: false
          schema:
            type: boolean
            example: true
        - name: includeDates
          in: query
          description: Include date ranges for each record.
          required: false
          schema:
            type: boolean
            example: true
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: page
          in: query
          description: The page number to return.
          required: false
          schema:
            type: integer
            format: int32
            example: 2
        - name: size
          in: query
          description: The number of records per page.
          required: false
          schema:
            type: integer
            format: int32
            example: 100
      responses:
        '200':
          description: 'Exchange object, contains a list of pairs supported by the exchange.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefiTrades_information'
  /market/defi/trades/{pool}/historical:
    get:
      summary: 'Trades - Historical'
      description: Retrieves the historical (time series) trade data for the specified pool/pair.
      operationId: getHistoricalTrades
      tags:
        - Defi-Dex
      parameters:
        - name: pool
          in: path
          description: The pool/pair to retrieve the most current data. Can be a name, symbols or address.
          required: true
          schema:
            type: string
            example: DAI+USDC+USDT
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve market trades.
          required: true
          schema:
            type: string
            example: curvev1
        - name: startDate
          in: query
          description: FIlter by pairs after this date.
          required: true
          schema:
            type: string
            example: "2020-12-10T22:38:27.789Z"
        - name: endDate
          in: query
          description: FIlter by pairs before this date.
          required: true
          schema:
            type: string
            example: "2020-12-10T23:38:27.789Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: json
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: price
      responses:
        '200':
          description: 'Object containing historical (time series) trade data for the specified pool/pair.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefiTrades_historical'
  /market/futures/exchanges/information:
    get:
      summary: 'Pairs'
      description: Retrieves information about supported exchange & pairs.
      operationId: getExchangesInformation
      tags:
        - Futures
      parameters:
        - name: exchange
          in: query
          description:  Only return data for the given exchange(s) (comma separated)
          required: false
          schema:
            type: string
            example: curve1
        - name: instrument
          in: query
          description: Only return data for the given instrument(s) (comma separated)
          required: false
          schema:
            type: string
            example: AAVEUSDT
        - name: includeDates
          in: query
          description: Include date ranges for each record.
          required: false
          schema:
            type: boolean
            example: true
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: json
      responses:
        '200':
          description: 'Object containing a list of pairs supported by the exchange.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exchanges_information'
  /market/futures/exchanges/reference:
    get:
      summary: 'Reference'
      description: Retrieves reference information for each of the pairs.
      operationId: getReference
      tags:
        - Futures
      parameters:
        - name: exchange
          in: query
          description: Only return data for the given exchange(s) (comma separated)
          required: false
          schema:
            type: string
            example: curve1
        - name: instrument
          in: query
          description: Only return data for the given instrument(s) (comma separated)
          required: false
          schema:
            type: string
            example: AAVEUSDT
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: json
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: instrument
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing a list of pairs supported by the exchange.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exchanges_reference'
  /market/futures/funding-rates/information:
    get:
      summary: 'Funding Rates - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getFundingRatesInformation
      tags:
        - Futures
      parameters:
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: curve1
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: instrument
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing a list of all the available exchanges'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Funding_information'
  /market/futures/funding-rates/{instrument}/latest:
    get:
      summary: 'Funding Rates - Latest'
      description: Retrieves the latest funding rates for the specified instrument.
      operationId: getFundingRatesLatest
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description:  Retrieves the latest funding rates for the specified instrument.
          required: true
          schema:
            type: string
            example: BTCUSD_PERP
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: curve1
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: price
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing latest funding rates for the specified instrument.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Funding_latest'
  /market/futures/funding-rates/{instrument}/historical:
     get:
      summary: 'Funding Rates - historical'
      description: Retrieves the historical time series funding rates for the specified instrument and exchange(s).
      operationId: getHistoricalFundingRates
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: BTCUSD_PERP
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the requested data (comma separated).
          required: false
          schema:
            type: string
            example: curve1
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive).
          required: true
          schema:
            type: string
            example: "1598499778860"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive)
          required: true
          schema:
            type: string
            example: "1598521378860"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: value
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical time series funding rates for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Funding_historical'
  /market/futures/insurance-fund/information:
    get:
      summary: 'Insurance Fund - information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability
      operationId: getInsuranceFoundInformation
      tags:
        - Futures
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: json
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: instrument
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing  list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Insurance_information'
  /market/futures/insurance-fund/{instrument}/latest:
    get:
      summary: 'Insurance Fund - latest'
      description: Retrieves the latest Insurance Fund for the specified instrument and exchange(s).
      operationId: getLatestInsuranceFound
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: btc
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing the latest Insurance Fund for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Insurance_latest'
  /market/futures/insurance-fund/{instrument}/historical:
    get:
      summary: 'Insurance Fund - historical'
      description: Retrieves the historical insurance fund for the specified instrument and exchange(s).
      operationId: getHistoricalInsuranceFound
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: BTC
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). Beginning of the current hour (max time range is 1 hour).
          required: false
          schema:
            type: string
            example: "1609660800000"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). One hour after the beginning of the current hour (max time range is 1 hour).
          required: false
          schema:
            type: string
            example: "1609660800000"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical insurance fund for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Insurance_historical'
  /market/futures/liquidations/information:
    get:
      summary: 'Liquidations - information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getLiquidations
      tags:
        - Futures
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: instrument
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing the list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Liquidations'
  /market/futures/liquidations/{instrument}/latest:
    get:
      summary: 'Liquidations - latest'
      description: Retrieves the latest liquidations for the specified instrument and exchange(s).
      operationId: getLatestLiquidations
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: BTCUSD_PERP
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: price
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing  the latest liquidations for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Liquidations_latest'
  /market/futures/liquidations/{instrument}/historical:
    get:
      summary: 'Liquidations - historical'
      description: Retrieves the historical time series liquidations for the specified instrument and exchange(s).
      operationId: getHistoricalLiquidations
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: BTCUSD_PERP
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). Beginning of the current hour (max time range is 1 hour).
          required: false
          schema:
            type: string
            example: "2020-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). One hour after the beginning of the current hour (max time range is 1 hour).
          required: false
          schema:
            type: string
            example: "2020-07-21T00:00:00.000Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical time series liquidations for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Liquidations_historical'
  /market/futures/long-short-ratio/information:
    get:
      summary: 'Long/Short Ratio - information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getRatio
      tags:
        - Futures
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: instrument
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with list of all the available exchanges'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ratio'
  /market/futures/long-short-ratio/{instrument}/latest:
    get:
      summary: 'Long/Short Ratio - Latest'
      description: Retrieves the latest Long/Short Ratio data for the specified instrument.
      operationId: getLatestRatio
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: true
          schema:
            type: string
            example: BTCUSDT
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: timeFrame
          in: query
          description: Time frame for the historical data. by day (1d), by hour (1h) or by minute (5m)
          required: false
          schema:
            type: string
            example: 1h
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with latest Long/Short Ratio data for the specified instrument.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ratio_latest'
  /market/futures/long-short-ratio/{instrument}/historical:
    get:
      summary: 'Long/Short Ratio - Historical'
      description: Retrieves the historical time series Long/Short Ratio data for the specified instrument and exchange(s).
      operationId: getHistoricalRatio
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: true
          schema:
            type: string
            example: BTCUSDT
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: timeFrame
          in: query
          description: Time frame for the historical data. by day (1d), by hour (1h) or by minute (5m)
          required: false
          schema:
            type: string
            example: 1h
        - name: timeInterval
          in: query
          description: Time interval to return the historical data in. [Defaults] m* | minutes | h | hours | d | days
          required: false
          schema:
            type: string
            example: hours
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "2020-07-25T00:00:00.000Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "2020-07-26T00:00:00.000Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object with historical time series Long/Short Ratio data for the specified instrument'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ratio_historical'
  /market/futures/ohlcv/information:
    get:
      summary: 'OHLCV - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getInformation
      tags:
        - Futures
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: instrument
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with the list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Futures_information'
  /market/futures/ohlcv/{instrument}/latest:
    get:
      summary: 'OHLCV - Latest'
      description: Retrieves the latest Open High Low Close Volume data for the specified instrument.
      operationId: getLatest
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: BTCUSD_PERP
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with the latest Open High Low Close Volume data for the specified instrument.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Futures_latest'
  /market/futures/ohlcv/{instrument}/historical:
    get:
      summary: 'OHLCV - Historical'
      description: Retrieves the historical time series OHLCV data for the specified instrument and exchange(s).
      operationId: getHistorical
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: BTCUSD_PERP
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the requested data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "2020-07-25T00:00:00.000Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "2020-07-26T00:00:00.000Z"
        - name: timeInterval
          in: query
          description: Time interval to return the historical data in. [Defaults] m* | minutes | h | hours | d | days
          required: false
          schema:
            type: string
            example: hours
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object with historical time series OHLCV data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Futures_historical'
  /market/futures/open-interest/information:
    get:
      summary: 'Open Interest - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getOpenInterestInformation
      tags:
        - Futures
      parameters:
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the requested data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: instrument
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with list of all the available exchanges'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenInterest'
  /market/futures/open-interest/{instrument}/latest:
    get:
      summary: 'Open Interest - Latest'
      description: Retrieves the latest open interest for the specified instrument.
      operationId: getOpenInterestLatest
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description:  The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: BTCUSD_PERP
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the requested data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with latest open interest for the specified instrument.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenInterest_latest'
  /market/futures/open-interest/{instrument}/historical:
    get:
      summary: 'Open Interest - Historical'
      description: Retrieves the historical time series open interest for the specified instrument and exchange(s).
      operationId: getHistoricalOpenInterest
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: BTCUSD_PERP
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the requested data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "2020-08-12T16:54:09.638Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "2020-08-12T22:54:09.638Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object with historical time series open interest for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenInterest_historical'
  /market/futures/order-book-events/information:
    get:
      summary: 'Order Books- Events Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getEventInformation
      tags:
        - Futures
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing list of all the available exchanges.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fut_Order_books'
  /market/futures/order-book-events/{instrument}/historical:
    get:
      summary: 'Order Books- Events Historical'
      description: Retrieves the historical time series order book events (bid and ask) for the specified instrument and exchange(s).
      operationId: getHistoricalEvent
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: BTCUSD_PERP
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "2020-08-17 06:00:00"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "2020-08-17 07:00:00"
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical time series order book events (bid and ask) for the specified instrument'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fut_Order_historical'
  /market/futures/order-book-snapshots/information:
    get:
      summary: 'Order Books- Snapshots Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getSnapshotsInformation
      tags:
        - Futures
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: bitmex
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fut_snapshots_info'
  /market/futures/order-book-snapshots/{instrument}/historical:
    get:
      summary: 'Order Books- Snapshots Historical'
      description: Retrieves the historical time series order book snapshots (bid and ask) for the specified instrument and exchange. Note This endpoint returns a maximum of 10 minutes of historical data per request. The parameters startDate and endDate can be used to specify any arbitrary time range.
      operationId: getSnapshotsHistorical
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: BTCUSD_PERP
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "2020-08-17 06:00:00"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "2020-08-17 07:00:00"
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing  historical time series order book snapshots (bid and ask)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fut_snapshots_historical'
  /market/futures/tickers/information:
    get:
      summary: 'Tickers - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getTickersInformation
      tags:
        - Futures
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: json
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: instrument
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing list of all the available exchanges.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fut_Tickers_info'
  /market/futures/tickers/{instrument}/latest:
    get:
      summary: 'Tickers - Latest'
      description: Retrieves the latest liquidations for the specified instrument and exchange(s).
      operationId: getLatestTickers
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: BTCUSD_PERP
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing latest liquidations for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fut_Tickers_latest'
  /market/futures/tickers/{instrument}/historical:
    get:
      summary: 'Tickers - Historical'
      description: Retrieves the historical time series tickers for the specified instrument and exchange(s).
      operationId: getHistoricalTickers
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: BTCUSD_PERP
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the requested data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "1604401200000"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "1604404740000"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical time series tickers for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fut_Tickers_historical'
  /market/futures/trades/information:
    get:
      summary: 'Trades - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getTradesInformation
      tags:
        - Futures
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: instrument
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fut_Trades_info'
  /market/futures/trades/{instrument}/historical:
    get:
      summary: 'Trades - Historical'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getHistoricalTrades
      tags:
        - Futures
      parameters:
        - name: instrument
          in: path
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: true
          schema:
            type: string
            example: BTCUSDT
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "2020-09-23T14:42:15.702Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: false
          schema:
            type: string
            example: "2020-09-23T15:42:15.702Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fut_Trades_historical'
  /market/exchanges:
    get:
      summary: 'Exchanges & Pairs - Exchanges'
      description: Retrieves information about supported exchange-pairs for these types of data.
       • ohlcv (open-high-low-close-volume)
       • order book snapshot
       • order book event
       • ticker
       • trade
      operationId: getExchanges
      tags:
        - Spot
      parameters:
        - name: exchange
          in: query
          description: only return data for the given exchanges (comma separated)
          required: true
          schema:
            type: string
            example: binance
        - name: pair
          in: query
          description: only return data for the given pairs (comma separated)
          required: true
          schema:
            type: string
            example: "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11"
        - name: includeDates
          in: query
          description: Include date ranges for each record.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
      responses:
        '200':
          description: 'Object containing a list of pairs supported by the exchange.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exchanges'
  /market/pairs:
    get:
      summary: 'Exchanges & Pairs - Pairs'
      description: Retrieves information about supported exchange-pairs for these types of data
       • ohlcv (open-high-low-close-volume)
       • order book snapshot
       • order book event
       • ticker
       • trade
      operationId: getPairs
      tags:
        - Spot
      parameters:
        - name: exchange
          in: query
          description: only return data for the given exchanges (comma separated)
          required: true
          schema:
            type: string
            example: binance
        - name: pair
          in: query
          description: only return data for the given pairs (comma separated)
          required: true
          schema:
            type: string
            example: "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11"
        - name: includeDates
          in: query
          description: Include date ranges for each record.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
      responses:
        '200':
          description: 'Object containing a list of pairs supported by the exchange.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pairs'
  /market/spot/exchanges/reference:
    get:
      summary: 'Exchanges & Pairs - Reference'
      description: Retrieves reference information for each of the pairs.
      operationId: getReference
      tags:
        - Spot
      parameters:
        - name: exchange
          in: query
          description: only return data for the given exchanges (comma separated)
          required: false
          schema:
            type: string
            example: binance
        - name: pair
          in: query
          description: only return data for the given pairs (comma separated)
          required: false
          schema:
            type: string
            example: "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: instrument
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing a list of pairs supported by the exchange.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reference'
  /market/spot/vwap/assets/information:
    get:
      summary: 'Global VWAP - Assets Information'
      description: Retrieves the list of all the available supported assets and time range availability
      operationId: getAssetsInformation
      tags:
        - Spot
      parameters:
        - name: asset
          in: query
          description: The asset for which to retrieve the information. [Default] All available pairs.
          required: false
          schema:
            type: string
            example: btc
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: asset
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing a list of all the available supported assets and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assets'
  /market/spot/vwap/assets/{asset}/latest:
    get:
      summary: 'Global VWAP - Assets Latest'
      description: Retrieves the latest VWAP for the specified asset - this is the global VWAP across all exchanges which supports this asset, including all cross rates pairs, based on minutely data. VWAP is calculated as a volume weighted moving average across all exchanges.
      operationId: getAssetsLatest
      tags:
        - Spot
      parameters:
        - name: asset
          in: path
          description: The asset for which to retrieve the most recent data.
          required: true
          schema:
            type: string
            example: btc
        - name: lookbackPeriod
          in: query
          description: Number of historical data points used in the calculation. [Defaults] 60
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing the latest VWAP for the specified asset.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_Assets_latest'
  /market/spot/vwap/assets/{asset}/historical:
    get:
      summary: 'Global VWAP - Assets Historical'
      description: Retrieves the historical VWAP for the specified asset - this is the global VWAP across all exchanges which supports this asset, including all cross rates pairs.
                   Default results are over a 1m tick / 24h lookback period.
                   Price is calculated as a volume weighted moving average across all exchanges.
      operationId: getHistoricalAssets
      tags:
        - Spot
      parameters:
        - name: asset
          in: path
          description: The asset for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: btc
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive).
                        The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m). [Examples] 1578531600 | 1578531600000 | 2020-09-01T01:00:00
          required: false
          schema:
            type: string
            example: "2020-09-23T14:42:15.702Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive).
                       The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m). [Examples] 1578531600 | 1578531600000 | 2020-09-01T01:00:00
          required: false
          schema:
            type: string
            example: "2020-09-23T15:42:15.702Z"
        - name: timeInterval
          in: query
          description: The time interval of the timeseries in the return payload.
          required: false
          schema:
            type: string
            example: hour
        - name: lookbackPeriod
          in: query
          description:  Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containig historical VWAP for the specified asset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_Assets_historical'
  /market/spot/vwap/pairs/information:
    get:
      summary: 'Global VWAP - Pairs Information'
      description: Retrieves the list of all the available supported pairs and time range availability.
      operationId: getPairs
      tags:
        - Spot
      parameters:
        - name: pair
          in: query
          description: The pair for which to retrieve the information. [Default] All available pairs.
          required: false
          schema:
            type: string
            example: btc_usd
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: pair
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containig list of all the available supported pairs and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_pairs'
  /market/spot/vwap/pairs/{pair}/latest:
    get:
      summary: 'Global VWAP - Pairs Latest'
      description: Retrieves the latest VWAP for the specified pair - this is the global VWAP across all exchanges which supports this pair, based on minutely data. Price is calculated as a volume weighted moving average across all exchanges. If the parameter exchange is specified, the data returned is the VWAP for that pair on that exchange.
      operationId: getLatestPairs
      tags:
        - Spot
      parameters:
        - name: pair
          in: path
          description: The pair for which to retrieve the most recent data.
          required: true
          schema:
            type: string
            example: btc_usd
        - name: exchange
          in: query
          description: The exchange for which to retrieve the requested data.
          required: false
          schema:
            type: string
            example: binance
        - name: includeCrossRates
          in: query
          description:  If true, cross rate pairs are included in the price & VWAP calculations - this option only supports pairs quoted in usd (ie *_usd pairs).
          required: false
          schema:
            type: boolean
            example: false
        - name: lookbackPeriod
          in: query
          description:  Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing latest VWAP for the specified pair.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_Pairs_latest'
  /market/spot/vwap/pairs/{pair}/historical:
    get:
      summary: 'Global VWAP - Pairs Historical'
      description: Retrieves the historical VWAP for the specified pair - this is the global VWAP across all exchanges which supports this pair, including all cross rates pairs. Default results are over a 1m tick / 24h lookback period.
      operationId: getHistoricalPairs
      tags:
        - Spot
      parameters:
        - name: pair
          in: path
          description: The pair for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: btc_usd
        - name: exchange
          in: query
          description: The exchange for which to retrieve the requested data.
           Note that daily vwap is not supported with this parameter.
          required: false
          schema:
            type: string
            example: binance
        - name: includeCrossRates
          in: query
          description:   If true, cross rate pairs are included in the price & VWAP calculations - this option only supports pairs quoted in usd (ie *_usd pairs).
          required: false
          schema:
            type: boolean
            example: true
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive).
            The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m). [Examples] 1578531600 | 1578531600000 | 2020-09-01T01:00:00
          required: false
          schema:
            type: string
            example: "2020-09-23T14:42:15.702Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive).
            The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m). [Examples] 1578531600 | 1578531600000 | 2020-09-01T01:00:00
          required: false
          schema:
            type: string
            example: "2020-09-23T15:42:15.702Z"
        - name: timeInterval
          in: query
          description:  The time interval of the timeseries in the return payload.
            [Defaults] m* | minute | h | hour | d | day
          required: false
          schema:
            type: string
            example: hour
        - name: lookbackPeriod
          in: query
          description:  Number of historical data points used in the calculation. [Defaults] 60 for minutely, 24 for hourly and 20 for daily
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing historical VWAP for the specified pair'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_Pairs_historical'
  /market/spot/ohlcv/information:
    get:
      summary: 'OHLCV - Information'
      description: Retrieves information about supported exchange-pairs for ohlcv. Includes data for both centralized and decentralized exchange data.
      operationId: getInformation
      tags:
        - Spot
      parameters:
        - name: exchange
          in: query
          description: Only return data for the specified exchange(s) (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: includeDates
          in: query
          description: Include date ranges for each record.
          required: false
          schema:
            type: boolean
            example: true
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: timeInterval
          in: query
          description:  Time interval. [Defaults] minutes* | hours | days | weeks
          required: false
          schema:
            type: string
            example: hours
      responses:
        '200':
          description: 'Object containing a list of pairs supported by the exchange.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_ohlcv_info'
  /market/spot/ohlcv/{pair}/latest:
    get:
      summary: 'OHLCV - Latest'
      description: Retrieves the latest open-high-low-close for the specified pair.
      operationId: getLatest
      tags:
        - Spot
      parameters:
        - name: pair
          in: path
          description: The market pair for which to retrieve open-high-low-close.
          required: true
          schema:
            type: string
            example: eth_usd
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve OHLCV. Example, exchange=bitfinex,bitstamp
          required: true
          schema:
            type: string
            example: binance
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
        - name: timeInterval
          in: query
          description: Time interval.[Defaults] minutes* | hours | days | weeks
          required: false
          schema:
            type: string
            example: hours
      responses:
        '200':
          description: 'Object containing latest open-high-low-close for the specified pair.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_ohlcv_latest'
  /market/spot/ohlcv/{pair}/historical:
    get:
      summary: 'OHLCV - Historical'
      description: Retrieves the historical (time series) open-high-low-close for the specified pair. This endpoint returns a max of,
       12 months of daily data
       30 days of hourly data
       24 hours of minutely data.
      operationId: getHistorical
      tags:
        - Spot
      parameters:
        - name: pair
          in: path
          description: The market pair for which to retrieve open-high-low-close.
          required: true
          schema:
            type: string
            example: eth_usd
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve OHLCV. Example, exchange=bitfinex,bitstamp
          required: true
          schema:
            type: string
            example: binance
        - name: startDate
          in: query
          description: FIlter by pairs after this date.
          required: true
          schema:
            type: string
            example: "2019-12-10T23:42:25.997Z"
        - name: endDate
          in: query
          description: FIlter by pairs before this date.
          required: true
          schema:
            type: string
            example: "2020-12-10T23:42:25.997Z"
        - name: timeInterval
          in: query
          description: Time interval.[Defaults] minutes* | hours | days | weeks
          required: false
          schema:
            type: string
            example: hour
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical (time series) open-high-low-close for the specified pair.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_ohlcv_historical'
  /market/spot/order-book-events/{pair}/historical:
    get:
      summary: 'Order Books - Events Historical'
      description: Retrieves order book update/events (bid and ask). The volume of this data is very large for many exchanges and pairs. Time span being requested (via startDate and endDate) must not exceed 4 days. This endpoint returns a max of 1 hour historical data per request. In order to get more than 1 hour you must use the startDate & endDate parameters to move the time frame window to get the next n hours/days/months of data. Note that this endpoint is used to retrieve historical data only, and as such is updated every hour. If your query does not return any data, try the hour before with the startDate & endDate parameters.
      operationId: getEventHistorical
      tags:
        - Spot
      parameters:
        - name: pair
          in: path
          description: The market pair for which to retrieve the historical best bid and offer data.
          required: true
          schema:
            type: string
            example: btc_usd
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve order book data. Example exchange=bitfinex,bitstamp
          required: true
          schema:
            type: string
            example: bitfinex,bitstamp
        - name: startDate
          in: query
          description: FIlter by pairs after this date.
          required: true
          schema:
            type: string
            example: "1583773200000"
        - name: endDate
          in: query
          description: FIlter by pairs before this date.
          required: true
          schema:
            type: string
            example: "1583776800000"
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical (time series) open-high-low-close for the specified pair.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_OrderBooks_events'
  /market/spot/order-book-snapshots/{pair}/historical:
    get:
      summary: 'Order Books - Snapshots Historical'
      description: Retrieves the order book data for the specified pair.
      operationId: getSnapshotsHistorical
      tags:
        - Spot
      parameters:
        - name: pair
          in: path
          description: The market pair for which to retrieve order book data..
          required: true
          schema:
            type: string
            example: eth_usd
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve order book data. Example exchange=bitfinex,bitstamp
          required: true
          schema:
            type: string
            example: bitfinex
        - name: startDate
          in: query
          description: FIlter by pairs after this date. Formats milliseconds, iso, or iso8611
          required: true
          schema:
            type: string
            example: "2019-12-10T23:42:25.997Z"
        - name: endDate
          in: query
          description: FIlter by pairs before this date. Formats milliseconds, iso, or iso8611. Note, must be greater than startDate and cannot exceed 10 minutes.
          required: true
          schema:
            type: string
            example: "2020-12-10T23:42:25.997Z"
        - name: timestamp
          in: query
          description: The timestamp at which to return the order book information (closest match, lower or equal to the timestamp specified).
          required: true
          schema:
            type: string
            example: "2019-03-01T00:00:00.000Z"
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing order book data for the specified pair.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_OrderBooks_snapshots'
  /market/spot/prices/assets/information:
    get:
      summary: 'Prices - Assets Information'
      description: Retrieves the list of all the available supported assets and time range availability.
      operationId: getAssetsInformation
      tags:
        - Spot
      parameters:
        - name: asset
          in: query
          description: The asset for which to retrieve the information. [Default] All available pairs.
          required: false
          schema:
            type: string
            example: btc
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: asset
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing list of all the available supported assets and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prices_Assets_info'
  /market/spot/prices/assets/{asset}/latest:
    get:
      summary: 'Prices - Assets Latest '
      description: Retrieves the latest price for the specified asset - the global price is calculated across all exchanges which supports this asset, including all cross rates pairs.
      operationId: getAssetsLatest
      tags:
        - Spot
      parameters:
        - name: asset
          in: path
          description: The asset for which to retrieve the most recent data.
          required: true
          schema:
            type: string
            example: btc
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing latest price for the specified asset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prices_Assets_latest'
  /market/spot/prices/assets/{asset}/historical:
    get:
      summary: 'Prices - Assets Historical'
      description: Retrieves the historical price for the specified asset - the price is calculated across all exchanges which supports this asset, including all cross rates pairs.
      operationId: getAssetsHistorical
      tags:
        - Spot
      parameters:
        - name: asset
          in: path
          description: The asset for which to retrieve the requested data
          required: true
          schema:
            type: string
            example: btc
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive).
           The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m).
          required: false
          schema:
            type: string
            example: "2020-12-10T23:42:25.997Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive).
           The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m)..
          required: false
          schema:
            type: string
            example: "2019-03-01T00:00:00.000Z"
        - name: timeInterval
          in: query
          description: The time interval of the timeseries in the return payload.
          required: false
          schema:
            type: string
            example: hour
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with historical price for the specified asset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prices_Assets_historical'
  /market/spot/prices/pairs/information:
    get:
      summary: 'Prices - Pairs Information'
      description: Retrieves the list of all the available supported pairs and time range availability.
      operationId: getPairsInformationl
      tags:
        - Spot
      parameters:
        - name: pair
          in: query
          description: The pair for which to retrieve the information. [Default] All available pairs.
          required: false
          schema:
            type: string
            example: btc_usd
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: pair
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containig list of all the available supported pairs and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prices_Pairs_info'
  /market/spot/prices/pairs/{pair}/latest:
    get:
      summary: 'Prices - Pairs Latest'
      description: Retrieves the latest price for the specified pair - the price is calculated across all exchanges which supports this pair.
      operationId: getPairsLatest
      tags:
        - Spot
      parameters:
        - name: pair
          in: path
          description: The pair for which to retrieve the most recent data.
          required: true
          schema:
            type: string
            example: btc_usd
        - name: exchange
          in: query
          description: The exchange for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: binance
        - name: includeCrossRates
          in: query
          description: If true, cross rate pairs are included in the price calculations - this option only supports pairs quoted in usd (ie *_usd pairs).
           [Defaults] false* | true
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containig latest price for the specified pair.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prices_Pairs_latest'
  /market/spot/prices/pairs/{pair}/historical:
    get:
      summary: 'Prices - Pairs Historical'
      description: Retrieves the historical price for the specified pair - the price is calculated across all exchanges which supports this pair, including all cross rates pairs. Default results are over a 1m tick / 24h lookback period. If the parameter exchange is specified, the data returned is the VWAP for that pair on that exchange.
      operationId: getPairsHistorical
      tags:
        - Spot
      parameters:
        - name: pair
          in: path
          description: The pair for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: btc_usd
        - name: exchange
          in: query
          description: The exchange for which to retrieve the requested data.
          required: false
          schema:
            type: string
            example: binance
        - name: includeCrossRates
          in: query
          description: If true, cross rate pairs are included in the price calculations - this option only supports pairs quoted in usd (ie *_usd pairs).
           [Defaults] false* | true
          required: false
          schema:
            type: boolean
            example: true
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive).
           The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m).
          required: false
          schema:
            type: string
            example: "2020-12-10T23:42:25.997Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive).
           The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m)..
          required: false
          schema:
            type: string
            example: "2019-03-01T00:00:00.000Z"
        - name: timeInterval
          in: query
          description: The time interval of the timeseries in the return payload.
          required: false
          schema:
            type: string
            example: hour
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array with historical price for the specified pair'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prices_Pairs_historical'
  /market/spot/tickers/information:
    get:
      summary: 'Tickers - Information'
      description: Retrieves the list of all available market tickers.
      operationId: getTickersInformation
      tags:
        - Spot
      parameters:
        - name: exchange
          in: query
          description: Only return data for the given exchanges (comma separated).
          required: true
          schema:
            type: string
            example: binance
      responses:
        '200':
          description: 'Object containing all available market tickers.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_Tickers_info'
  /market/spot/tickers/{pair}/latest:
    get:
      summary: 'Tickers - Latest'
      description: Retrieves the latest market ticker Bid/Ask/Mid/Last for the specified pair.
      operationId: getTickersLatest
      tags:
        - Spot
      parameters:
        - name: pair
          in: path
          description: The market pair for which to retrieve market tickers.
          required: true
          schema:
            type: string
            example: eth_usd
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve market tickers. Example, exchange=bitfinex,bitstamp
          required: true
          schema:
            type: string
            example: bitfinex,bitstamp
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
      responses:
        '200':
          description: 'Object containing latest market ticker Bid/Ask/Mid/Last for the specified pair.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_Tickers_latest'
  /market/spot/tickers/{pair}/historical:
    get:
      summary: 'Tickers - Historical'
      description: Retrieves the historical ticker, bid/ask/mid/last, for the specified pair.
      operationId: getTickersHistorical
      tags:
        - Spot
      parameters:
        - name: pair
          in: path
          description: The market pair for which to retrieve market tickers.
          required: true
          schema:
            type: string
            example: eth_usd
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve market tickers. Example, exchange=bitfinex,bitstamp
          required: true
          schema:
            type: string
            example: bitfinex
        - name: startDate
          in: query
          description: Filter by ticker pairs after this date
          required: true
          schema:
            type: string
            example: "2020-12-10T23:42:25.997Z"
        - name: endDate
          in: query
          description: Filter by ticker pairs before this date.
          required: true
          schema:
            type: string
            example: "2019-03-01T00:00:00.000Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
      responses:
        '200':
          description: 'Object containing historical ticker, for the specified pair.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_Tickers_historical'
  /market/spot/trades/information:
    get:
      summary: 'Trades- Information'
      description: Retrieves the list of all available market trade data sets.
      operationId: getTradesInformation
      tags:
        - Spot
      parameters:
        - name: exchange
          in: query
          description: Only return data for the given exchanges (comma separated).
          required: true
          schema:
            type: string
            example: binance
        - name: includeDates
          in: query
          description: Include date ranges for each record.
          required: false
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: 'Object containing list of all available market trade data sets.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_Trades_info'
  /market/spot/trades/{pair}/historical:
    get:
      summary: 'Trades- Historical'
      description: Retrieves the historical (time series) trade data for the specified pair.
      operationId: getTradesHistorical
      tags:
        - Spot
      parameters:
        - name: pair
          in: path
          description: The market pair for which to retrieve market trades.
          required: true
          schema:
            type: string
            example: eth_usd
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve market trades.
          required: true
          schema:
            type: string
            example: bitfinex
        - name: startDate
          in: query
          description: FIlter by trades after this date.
          required: true
          schema:
            type: string
            example: "2020-12-10T22:38:27.789Z"
        - name: endDate
          in: query
          description: FIlter by trades before this date.
          required: true
          schema:
            type: string
            example: "2020-12-10T23:38:27.789Z"
      responses:
        '200':
          description: 'Object containing historical (time series) trade data for the specified pair.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot_Trades_historical'
  /market/swaps/exchanges/information:
    get:
      summary: 'Exchanges- Pairs'
      description: Retrieves information about supported exchange & pairs
      operationId: getPairsInformation
      tags:
        - Swaps
      parameters:
        - name: exchange
          in: query
          description: Only return data for the given exchange(s) (comma separated)
          required: false
          schema:
            type: string
            example: bitfinex,bitstamp
        - name: instrument
          in: query
          description: Only return data for the given instrument(s) (comma separated)
          required: false
          schema:
            type: string
            example: BCHUSDT
        - name: includeDates
          in: query
          description:  Include date ranges for each record.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing information about supported exchange & pairs'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_Pairs_info'
  /market/swaps/exchanges/reference:
    get:
      summary: 'Exchanges- Reference'
      description: Retrieves reference information for each of the pairs.
      operationId: getExchangesReference
      tags:
        - Swaps
      parameters:
        - name: exchange
          in: query
          description: Only return data for the given exchange(s) (comma separated)
          required: false
          schema:
            type: string
            example: bitfinex,bitstamp
        - name: instrument
          in: query
          description: Only return data for the given instrument(s) (comma separated)
          required: false
          schema:
            type: string
            example: BCHUSDT
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: instrument
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing reference information for each of the pairs.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_reference'
  /market/swaps/funding-rates/information:
    get:
      summary: 'Funding Rates- Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getFundingRatesInformation
      tags:
        - Swaps
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: bitfinex,bitstamp
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_Funding_rates'
  /market/swaps/funding-rates/{instrument}/latest:
    get:
      summary: 'Funding Rates- Latest'
      description: Retrieves the latest funding rates for the specified instrument.
      operationId: getFundingRatesLatest
      tags:
        - Swaps
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: MKR-USDT
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: bitfinex,bitstamp
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing  latest funding rates for the specified instrument.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_FundingRates_latest'
  /market/swaps/funding-rates/{instrument}/historical:
    get:
      summary: 'Funding Rates- Historical'
      description: Retrieves the historical time series funding rates for the specified instrument and exchange(s).
      operationId: getFundingRatesHistorical
      tags:
        - Swaps
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: MKR-USDT
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the requested data (comma separated).
          required: false
          schema:
            type: string
            example: bitfinex,bitstamp
        - name: startDate
          in: query
          description:  Payload only includes data after this date (inclusive).
          required: true
          schema:
            type: string
            example: "2020-12-10T22:38:27.789Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive).
          required: true
          schema:
            type: string
            example: "2020-12-10T23:38:27.789Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical time series funding rates for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_FundingRates_historical'
  /market/swaps/insurance-fund/information:
    get:
      summary: 'Insurance Funds- Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getInsuranceFundsInformation
      tags:
        - Swaps
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: bitfinex,bitstamp
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Insurance_Funds_info'
  /market/swaps/insurance-fund/{instrument}/latest:
    get:
      summary: 'Insurance Funds- Latest'
      description: Retrieves the latest Insurance Fund for the specified instrument and exchange(s).
      operationId: getInsuranceFundsLatest
      tags:
        - Swaps
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: BSV
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: bitfinex,bitstamp
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing latest Insurance Fund for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Insurance_Funds_latest'
  /market/swaps/insurance-fund/{instrument}/historical:
    get:
      summary: 'Insurance Funds- historical'
      description: Retrieves the latest Insurance Fund for the specified instrument and exchange(s).
      operationId: getInsuranceFundshistorical
      tags:
        - Swaps
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: BSV
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: bitfinex,bitstamp
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "1609660800000"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "1609660800000"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical insurance fund for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Insurance_Funds_historical'
  /market/swaps/liquidations/information:
    get:
      summary: 'Liquidations - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getLiquidationsInformation
      tags:
        - Swaps
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: bitfinex,bitstamp
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_Liquidations_info'
  /market/swaps/liquidations/{instrument}/historical:
    get:
      summary: 'Liquidations - Historical'
      description: Retrieves the historical time series liquidations for the specified instrument and exchange(s).
      operationId: getLiquidationsHistorical
      tags:
        - Swaps
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: BTC/USD
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the requested data (comma separated).
          required: false
          schema:
            type: string
            example: bitmex
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "2020-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "2020-07-21T00:00:00.000Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing  historical time series liquidations for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_Liquidations_historical'
  /market/swaps/ohlcv/information:
    get:
      summary: 'OHLCV - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getInformation
      tags:
        - Swaps
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_ohlcv_info'
  /market/swaps/ohlcv/{instrument}/latest:
    get:
      summary: 'OHLCV - Latest'
      description: Retrieves the latest Open High Low Close Volume data for the specified instrument.
      operationId: getLatest
      tags:
        - Swaps
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: XBTUSD
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing the latest Open High Low Close Volume data for the specified instrument.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_ohlcv_latest'
  /market/swaps/ohlcv/{instrument}/historical:
    get:
      summary: 'OHLCV - Historical '
      description: Retrieves the historical time series OHLCV data for the specified instrument and exchange(s).
      operationId: getHistorical
      tags:
        - Swaps
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: XBTUSD
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the requested data (comma separated).
          required: true
          schema:
            type: string
            example: bitmex
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "2020-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "2020-07-21T00:00:00.000Z"
        - name: timeInterval
          in: query
          description: The time interval to return the historical data in, by day (d), by hour (h) or by minute (m)
          required: true
          schema:
            type: string
            example: days
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical time series OHLCV data for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_ohlcv_historical'
  /market/swaps/open-interest/information:
    get:
      summary: 'Open Interest - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getOpenInterestInformation
      tags:
        - Swaps
      parameters:
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_Open_interest'
  /market/swaps/open-interest/{instrument}/latest:
    get:
      summary: 'Open Interest - Latest'
      description: Retrieves the latest open interest for the specified instrument.
      operationId: getOpenInterestLatest
      tags:
        - Swaps
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: XBTUSD
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing latest open interest for the specified instrument.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_OpenInterest_latest'
  /market/swaps/open-interest/{instrument}/historical:
    get:
      summary: 'Open Interest - Historical'
      description: Retrieves the historical time series open interest for the specified instrument and exchange(s).
      operationId: getOpenInterestHistorical
      tags:
        - Swaps
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: XBTUSD
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the requested data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "2020-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "2020-07-21T00:00:00.000Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing  historical time series open interest for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_OpenInterest_historical'
  /market/swaps/order-book-events/information:
    get:
      summary: 'Order Books - Events Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getEventsInformation
      tags:
        - Swaps
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: bitmex
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_OrderBooks_info'
  /market/swaps/order-book-events/{instrument}/historical:
    get:
      summary: 'Order Books - Events Historical'
      description: Retrieves the historical time series order book events (bid and ask) for the specified instrument and exchange(s).
      operationId: getEventsHistorical
      tags:
        - Swaps
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: "XBTUSD"
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the requested data (comma separated).
          required: false
          schema:
            type: string
            example: bitmex
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "2020-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "2020-07-21T00:00:00.000Z"
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical time series order book events (bid and ask) for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_OrderBooks_historical'
  /market/swaps/order-book-snapshots/information:
    get:
      summary: 'Order Books - Snapshots Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getSnapshotsInformation
      tags:
        - Swaps
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: "bitmex"
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_Snapshots_info'
  /market/swaps/order-book-snapshots/{instrument}/historical:
    get:
      summary: 'Order Books - Snapshots Historical'
      description: Retrieves the historical time series order book snapshots (bid and ask) for the specified instrument and exchange(s).
      operationId: getSnapshotsHistorical
      tags:
        - Swaps
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: "XBTUSD"
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the requested data (comma separated).
          required: false
          schema:
            type: string
            example: bitmex
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "2020-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "2020-07-21T00:00:00.000Z"
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical time series order book snapshots (bid and ask) for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_Snapshots_historical'
  /market/swaps/tickers/information:
    get:
      summary: 'Tickers - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getTickersInformation
      tags:
        - Swaps
      parameters:
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_Tickers_info'
  /market/swaps/tickers/{instrument}/latest:
    get:
      summary: 'Tickers - Latest'
      description: Retrieves the latest liquidations for the specified instrument and exchange(s).
      operationId: getTickersLatest
      tags:
        - Swaps
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: XRPUSDT
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing  latest liquidations for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_Tickers_latest'
  /market/swaps/tickers/{instrument}/historical:
    get:
      summary: 'Tickers - Historical'
      description: Retrieves the historical time series tickers for the specified instrument and exchange(s).
      operationId: getTickersHistorical
      tags:
        - Swaps
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: XRPUSDT
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the requested data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "2020-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "2020-07-21T00:00:00.000Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical time series tickers for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_Tickers_historical'
  /market/swaps/trades/information:
    get:
      summary: 'Trades - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getTradesInformation
      tags:
        - Swaps
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: binance
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_Trades_info'
  /market/swaps/trades/{instrument}/historical:
    get:
      summary: 'Trades - Historical'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getTradesHistorical
      tags:
        - Swaps
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: XBTUSD
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the requested data (comma separated).
          required: true
          schema:
            type: string
            example: bitmex
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "2020-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8611
          required: true
          schema:
            type: string
            example: "2020-07-21T00:00:00.000Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Swaps_Trades_historical'
  /market/metrics/{symbol}/latest:
    get:
      summary: 'Metrics - Latest'
      description: Get advanced metrics like Stock to Flow for a specific asset symbol.
      operationId: getMetricsLatest
      tags:
        - Market metrics
      parameters:
        - name: symbol
          in: path
          description: The symbol of a digital asset
          required: true
          schema:
            type: string
            example: btc
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: The id of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containing metrics like Stock to Flow for a specific asset symbol.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market_Metrics_latest'
  /market/metrics/{symbol}/historical/nvt:
    get:
      summary: 'Metrics - NVT Historical'
      description: Get advanced metrics like Stock to Flow for a specific asset symbol over a period of time.
      operationId: getMetricsHistorical
      tags:
        - Market metrics
      parameters:
        - name: symbol
          in: path
          description: The symbol of a digital asset
          required: true
          schema:
            type: string
            example: btc
        - name: startDate
          in: query
          description: Returns data after this date. Accepts ISO8601 and Epoch/Unix timestamps
          required: true
          schema:
            type: string
            example: "2020-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Returns data before this date. Accepts ISO8601 and Epoch/Unix timestamps
          required: true
          schema:
            type: string
            example: "2020-07-21T00:00:00.000Z"
        - name: timeFrame
          in: query
          description: time frame to return the historical data in, options  (1m, 5m, 1h, 1d, 1w)
          required: true
          schema:
            type: string
            example: 1m
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: The id of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containing advanced metrics like Stock to Flow for a specific asset symbol over a period of time.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market_NTV_historical'
  /market/metrics/{symbol}/historical/sharpe:
    get:
      summary: 'Metrics - Sharpe Historical'
      description: Get advanced metrics like Stock to Flow for a specific asset symbol over a period of time.
      operationId: getSharpeHistorical
      tags:
        - Market metrics
      parameters:
        - name: symbol
          in: path
          description: The symbol of a digital asset
          required: true
          schema:
            type: string
            example: btc
        - name: startDate
          in: query
          description: Returns data after this date. Accepts ISO8601 and Epoch/Unix timestamps
          required: true
          schema:
            type: string
            example: "2020-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Returns data before this date. Accepts ISO8601 and Epoch/Unix timestamps
          required: true
          schema:
            type: string
            example: "2020-07-21T00:00:00.000Z"
        - name: timeFrame
          in: query
          description: time frame to return the historical data in, options  (1m, 5m, 1h, 1d, 1w)
          required: true
          schema:
            type: string
            example: 1m
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: The id of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containing advanced metrics like Stock to Flow for a specific asset symbol over a period of time.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market_sharpe'
  /market/metrics/{symbol}/historical/stock-to-flow:
    get:
      summary: 'Metrics - Stock To Flow Historical'
      description: Get advanced metrics like Stock to Flow for a specific asset symbol over a period of time.
      operationId: getStockToFlowHistorical
      tags:
        - Market metrics
      parameters:
        - name: symbol
          in: path
          description: The symbol of a digital asset
          required: true
          schema:
            type: string
            example: btc
        - name: startDate
          in: query
          description: Returns data after this date. Accepts ISO8601 and Epoch/Unix timestamps
          required: true
          schema:
            type: string
            example: "2020-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Returns data before this date. Accepts ISO8601 and Epoch/Unix timestamps
          required: true
          schema:
            type: string
            example: "2020-07-21T00:00:00.000Z"
        - name: timeFrame
          in: query
          description: time frame to return the historical data in, options  (1m, 5m, 1h, 1d, 1w)
          required: true
          schema:
            type: string
            example: 1m
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: blockchain-id
          in: header
          description: The id of the blockchain
          required: true
          schema:
            type: string
            example: ethereum-mainnet
      responses:
        '200':
          description: 'Object containing advanced metrics like Stock to Flow for a specific asset symbol over a period of time.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market_StockToFlow'
  /market/metrics/{asset}/implied-yield/latest:
    get:
      summary: 'Implied Yield - Latest'
      description: Retrieves the implied yield of all available non-perpetual contracts for an asset on an exchange.
      operationId: getImpliedYieldLatest
      tags:
        - Market metrics
      parameters:
        - name: asset
          in: path
          description: The asset for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: btc
        - name: futuresExchange
          in: query
          description: The exchange for which to get the contract data from.
          required: true
          schema:
            type: string
            example: binance
        - name: spotExchange
          in: query
          description: The exchange for which to retrieve the requested spot price data.
          required: true
          schema:
            type: string
            example: binance
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: settlement
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing implied yield of all available non-perpetual contracts for an asset on an exchange.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market_Implied_Yield'
  /market/metrics/{instrument}/implied-yield/historical:
    get:
      summary: 'Implied Yield - Historical'
      description: Retrieves the historical basis APR for an instrument on an exchange.
      operationId: getImpliedYieldHistorical
      tags:
        - Market metrics
      parameters:
        - name: instrument
          in: path
          description: The asset for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: BTCUSD_211231
        - name: futuresExchange
          in: query
          description: The exchange for which to get contract data from.
          required: true
          schema:
            type: string
            example: binance
        - name: spotExchange
          in: query
          description: The exchange for which to retrieve the requested spot price data.
          required: true
          schema:
            type: string
            example: binance
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: settlement
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Array containing historical basis APR for an instrument on an exchange.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market_Implied_Yield_historical'
  /market/rankings:
    get:
      summary: 'Rankings - Asset Rankings Latest'
      description: Retrieves the top ranked assets by a specific metric.
      operationId: getRankingsLatest
      tags:
        - Market metrics
      parameters:
        - name: direction
          in: query
          description: The sort order in which assets are ranked ascending or descending.
          required: true
          schema:
            type: string
            example: descending
        - name: sortType
          in: query
          description: The metric used to rank the assets. Options changeInPrice, currentPrice, liquidMarketCap, marketCap, tokenVelocity, tradeVolume, transactionVolume, uniqueAddresses
          required: true
          schema:
            type: string
            example: changeInPrice
        - name: timeInterval
          in: query
          description: The time interval in which to return the historical data days or hours.
          required: true
          schema:
            type: string
            example: hours
        - name: type
          in: query
          description: The type(s) of assets to include in the rankings - erc20|, erc721, erc777, erc884, erc998. (Note, leaving this parameter empty means all tokens will be included.)
          required: true
          schema:
            type: string
            example: erc721
        - name: page
          in: query
          description: The page number to return.
          required: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: size
          in: query
          description: The number of records per page.
          required: true
          schema:
            type: integer
            format: int32
            example: 100
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
      responses:
        '200':
          description: 'Object containing the top ranked assets by a specific metric.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market_Rankings_assets'
  /market/metrics/{asset}/supply/latest:
    get:
      summary: 'Supply - Latest'
      description: Retrieves latest supply data for blockchains and tokens.
      operationId: getSupplyLatest
      tags:
        - Market metrics
      parameters:
        - name: asset
          in: path
          description: The symbol of the asset or token.
          required: true
          schema:
            type: string
            example: btc
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
      responses:
        '200':
          description: 'Object containing latest supply data for blockchains and tokens.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market_Supply_latest'
  /market/metrics/{asset}/supply/historical:
    get:
      summary: 'Supply - Historical'
      description: Retrieves historical supply data for blockchains and tokens.
      operationId: getSupplyHistorical
      tags:
        - Market metrics
      parameters:
        - name: asset
          in: path
          description: The symbol of the asset or token.
          required: true
          schema:
            type: string
            example: btc
        - name: startDate
          in: query
          description: Returns data after this date. Accepts ISO8601 and Epoch/Unix timestamps
          required: true
          schema:
            type: string
            example: "2021-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Returns data before this date. Accepts ISO8601 and Epoch/Unix timestamps
          required: true
          schema:
            type: string
            example: "2021-07-21T00:00:00.000Z"
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: iso
      responses:
        '200':
          description: 'Object containing historical supply data for blockchains and tokens.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market_Supply_historical'
  /market/tokens/prices/{hash}/latest:
    get:
      summary: 'Token Prices - Latest'
      description: Retrieves the latest price (and other market information) for the specified token.
      operationId: getTokenPricesLatest
      tags:
        - Market metrics
      parameters:
        - name: hash
          in: path
          description: The address of the token for which to retrieve the price.
          required: true
          schema:
            type: string
            example: "0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2"
        - name: currency
          in: query
          description: The additional currency (other than ETH and USD) for which to return price info.
          required: true
          schema:
            type: string
            example: EUR
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
      responses:
        '200':
          description: 'Array containing latest price for the specified token.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market_TokenPrices_latest'
  /market/tokens/prices/{hash}/historical:
    get:
      summary: 'Token Prices - Historical'
      description: Retrieves the historical prices (and other market information) for the specified token.
      operationId: getTokenPricesHistorical
      tags:
        - Market metrics
      parameters:
        - name: hash
          in: path
          description: The address of the token for which to retrieve the price.
          required: true
          schema:
            type: string
            example: "0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2"
        - name: currency
          in: query
          description: The additional currency (other than ETH and USD) for which to return price info.
          required: true
          schema:
            type: string
            example: EUR
        - name: startDate
          in: query
          description: FIlter by prices after this date. Note that the interval can not exceed 6 months (d), 30 days (h) or 24 hours (m).
          required: true
          schema:
            type: string
            example: "2021-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: FIlter by prices before this date. Note that the interval can not exceed 6 months (d), 30 days (h) or 24 hours (m).
          required: true
          schema:
            type: string
            example: "2021-07-21T00:00:00.000Z"
        - name: timeInterval
          in: query
          description: The time interval to return the historical data in, by day (d), by hour (h) or by minute (m)
          required: true
          schema:
            type: string
            example: d
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing historical prices for the specified token.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market_TokenPrices_historical'
  /market/defi/twap/asset/information:
    get:
      summary: 'Global TWAP - Assets Information'
      description: Retrieves the list of all available market asset twap data sets.
      operationId: getAssetsInformation
      tags:
        - Defi-Dex
      parameters:
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: pair
      responses:
        '200':
          description: 'Array containing list of all available market asset twap data sets.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefiTWAP_Assets_info'
  /market/defi/twap/asset/{asset}/latest:
    get:
      summary: 'Global TWAP - Assets Latest'
      description: Retrieves the latest minute by minute twap for the specified asset (for example DAI).
      operationId: getAssetsLatest
      tags:
        - Defi-Dex
      parameters:
        - name: asset
          in: path
          description:  The address of the asset. (example is DAI)
          required: true
          schema:
            type: string
            example: "0x6b175474e89094c44da98b954eedeac495271d0f"
        - name: lookbackPeriod
          in: query
          description: Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing the latest minute by minute twap for the specified asset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefiTWAP_Assets_latest'
  /market/defi/twap/asset/{asset}/historical:
    get:
      summary: 'Global TWAP - Assets Historical'
      description: Retrieves the historical minute by minute twap for the specified asset (for example DAI)
      operationId: getAssetsHistorical
      tags:
        - Defi-Dex
      parameters:
        - name: asset
          in: path
          description:  The address of the asset. (example is DAI)
          required: true
          schema:
            type: string
            example: "0x6b175474e89094c44da98b954eedeac495271d0f"
        - name: startDate
          in: query
          description: FIlter by pairs after this date.
          required: true
          schema:
            type: string
            example: "2021-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: FIlter by pairs before this date.
          required: true
          schema:
            type: string
            example: "2021-07-21T00:00:00.000Z"
        - name: timeInterval
          in: query
          description: Time interval to return the historical data in ("days" | "hours" | "minutes")
          required: true
          schema:
            type: string
            example: days
        - name: lookbackPeriod
          in: query
          description: Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing historical minute by minute twap for the specified asset '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefiTWAP_Assets_historical'
  /market/defi/twap/pairs/information:
    get:
      summary: 'Global TWAP - Pairs Information'
      description: Retrieves the list of all available market pair TWAP data sets.
      operationId: getPairsInformation
      tags:
        - Defi-Dex
      parameters:
        - name: pair
          in: query
          description: The pair for which to retrieve the information.
          required: false
          schema:
            type: string
            example: btc_usd
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: pair
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing list of all available market pair TWAP data sets.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefiTWAP_Pairs_info'
  /market/defi/twap/pairs/bases/{base}/quotes/{quote}/latest:
    get:
      summary: 'Global TWAP - Pairs Latest'
      description: Retrieves the latest TWAP for the specified base, quote pair - this is the global TWAP across all supported contracts based on minutely data.
      operationId: getPairsLatest
      tags:
        - Defi-Dex
      parameters:
        - name: base
          in: path
          description: The address of the base. (example is DAI)
          required: true
          schema:
            type: string
            example: "0x6b175474e89094c44da98b954eedeac495271d0f"
        - name: quote
          in: path
          description: The address of the quote. (Example is WETH)
          required: true
          schema:
            type: string
            example: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
        - name: lookbackPeriod
          in: query
          description: Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing  latest TWAP for the specified base, quote pair - this is the global TWAP across all supported contracts based on minutely data.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefiTWAP_Pairs_latest'
  /market/defi/twap/pairs/bases/{base}/quotes/{quote}/historical:
    get:
      summary: 'Global TWAP - Pairs Historical'
      description: Retrieves the historical TWAP for the specified base, quote pair - this is the global TWAP across all supported contracts.
      operationId: getPairsHistorical
      tags:
        - Defi-Dex
      parameters:
        - name: base
          in: path
          description: The address of the base. (example is DAI)
          required: true
          schema:
            type: string
            example: "0x6b175474e89094c44da98b954eedeac495271d0f"
        - name: quote
          in: path
          description: The address of the quote. (Example is WETH)
          required: true
          schema:
            type: string
            example: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive).
           The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m).
          required: false
          schema:
            type: string
            example: "2021-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive).
           The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m).
          required: false
          schema:
            type: string
            example: "2021-07-21T00:00:00.000Z"
        - name: timeInterval
          in: query
          description:  The time interval of the timeseries in the return payload.
           [Defaults] m* | minute | h | hour | d | day
          required: false
          schema:
            type: string
            example: d
        - name: lookbackPeriod
          in: query
          description: Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing  historical TWAP for the specified base, quote pair - this is the global TWAP across all supported contracts.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefiTWAP_Pairs_historical'
  /market/defi/vwap/asset/information:
    get:
      summary: 'Global VWAP - Assets Information'
      description: Retrieves the list of all available market asset vwap data sets.
      operationId: getAssetsInformation
      tags:
        - Defi-Dex
      parameters:
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: pair
      responses:
        '200':
          description: 'Array containing  list of all available market asset vwap data sets.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefiVWAP_Assets_info'
  /market/defi/vwap/asset/{asset}/latest:
    get:
      summary: 'Global VWAP - Assets Latest'
      description: Retrieves the latest minute by minute vwap for the specified aset (for example DAI).
      operationId: getAssetsLatest
      tags:
        - Defi-Dex
      parameters:
        - name: asset
          in: path
          description: The address of the asset. (example is DAI)
          required: true
          schema:
            type: string
            example: "0x6b175474e89094c44da98b954eedeac495271d0f"
        - name: lookbackPeriod
          in: query
          description: Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing latest minute by minute vwap for the specified aset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefiVWAP_Assets_latest'
  /market/defi/vwap/asset/{asset}/historical:
    get:
      summary: 'Global VWAP - Assets Historical'
      description: Retrieves the historical minute by minute twap for the specified asset (for example DAI).
      operationId: getAssetsHistorical
      tags:
        - Defi-Dex
      parameters:
        - name: asset
          in: path
          description: The address of the asset. (example is DAI)
          required: true
          schema:
            type: string
            example: "0x6b175474e89094c44da98b954eedeac495271d0f"
        - name: startDate
          in: query
          description: FIlter by pairs after this date.
          required: true
          schema:
            type: string
            example: "2021-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: FIlter by pairs before this date.
          required: true
          schema:
            type: string
            example: "2021-07-21T00:00:00.000Z"
        - name: timeInterval
          in: query
          description: Time interval to return the historical data in ("days" | "hours" | "minutes")
          required: true
          schema:
            type: string
            example: days
        - name: lookbackPeriod
          in: query
          description: Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing historical minute by minute twap for the specified asset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefiVWAP_Assets_historical'
  /market/defi/vwap/pairs/information:
    get:
      summary: 'Global VWAP - Pairs Information'
      description: Retrieves the list of all available market pair VWAP data sets.
      operationId: getPairsInformation
      tags:
        - Defi-Dex
      parameters:
        - name: pair
          in: query
          description: The pair for which to retrieve the information.
          required: false
          schema:
            type: string
            example: btc_usd
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: pair
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing list of all available market pair VWAP data sets.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefiVWAP_Pairs_information'
  /market/defi/vwap/pairs/bases/{base}/quotes/{quote}/latest:
    get:
      summary: 'Global VWAP - Pairs Latest'
      description: Retrieves the latest VWAP for the specified base, quote pair - this is the global VWAP across all supported contracts based on minutely data.
      operationId: getPairsLatest
      tags:
        - Defi-Dex
      parameters:
        - name: base
          in: path
          description: The address of the base. (example is DAI)
          required: true
          schema:
            type: string
            example: "0x6b175474e89094c44da98b954eedeac495271d0f"
        - name: quote
          in: path
          description: The address of the quote. (Example is WETH)
          required: true
          schema:
            type: string
            example: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
        - name: lookbackPeriod
          in: query
          description: Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: pair
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing latest VWAP for the specified base, quote pair '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefiVWAP_Pairs_latest'
  /market/defi/vwap/pairs/bases/{base}/quotes/{quote}/historical:
    get:
      summary: 'Global VWAP - Pairs Historical'
      description: Retrieves the historical VWAP for the specified base, quote pair - this is the global VWAP across all supported contracts.
      operationId: getPairsHistorical
      tags:
        - Defi-Dex
      parameters:
        - name: base
          in: path
          description: The address of the base. (example is DAI)
          required: true
          schema:
            type: string
            example: "0x6b175474e89094c44da98b954eedeac495271d0f"
        - name: quote
          in: path
          description: The address of the quote. (Example is WETH)
          required: true
          schema:
            type: string
            example: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive).
           The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m)
          required: true
          schema:
            type: string
            example: "2021-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive).
           The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m).
          required: true
          schema:
            type: string
            example: "2021-07-21T00:00:00.000Z"
        - name: timeInterval
          in: query
          description: The time interval of the timeseries in the return payload.
          required: true
          schema:
            type: string
            example: d
        - name: lookbackPeriod
          in: query
          description: Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: pair
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing historical VWAP for the specified base, quote pair'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefiVWAP_Pairs_historical'
  /market/spot/twap/assets/information:
    get:
      summary: 'Global TWAP - Assets Information'
      description: Retrieves the list of all the available supported assets and time range availability.
      operationId: getAssetsInformation
      tags:
        - Spot
      parameters:
        - name: asset
          in: query
          description: The asset for which to retrieve the information.
          required: true
          schema:
            type: string
            example: btc
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: asset
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing list of all the available supported assets and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotTWAP_Assets_info'
  /market/spot/twap/assets/{asset}/latest:
    get:
      summary: 'Global TWAP - Assets Latest'
      description: Retrieves the latest TWAP for the specified asset - this is the global TWAP across all exchanges which supports this asset, including all cross rates pairs, based on minutely data.
      operationId: getAssetsLatest
      tags:
        - Spot
      parameters:
        - name: asset
          in: path
          description: The asset for which to retrieve the mot recent data.
          required: true
          schema:
            type: string
            example: btc
        - name: lookbackPeriod
          in: query
          description: Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing latest TWAP for the specified asset '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotTWAP_Assets_latest'
  /market/spot/twap/assets/{asset}/historical:
    get:
      summary: 'Global TWAP - Assets Historical'
      description: Retrieves the historical TWAP for the specified asset - this is the global TWAP across all exchanges which supports this asset, including all cross rates pairs.
      operationId: getAssetsHistorical
      tags:
        - Spot
      parameters:
        - name: asset
          in: path
          description: The asset for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: btc
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive).
           The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m)
          required: true
          schema:
            type: string
            example: "2021-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive).
           The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m).
          required: true
          schema:
            type: string
            example: "2021-07-21T00:00:00.000Z"
        - name: timeInterval
          in: query
          description: The time interval of the timeseries in the return payload.
          required: true
          schema:
            type: string
            example: d
        - name: lookbackPeriod
          in: query
          description: Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing historical TWAP for the specified asset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotTWAP_Assets_historical'
  /market/spot/twap/pairs/information:
    get:
      summary: 'Global TWAP - Pairs Information'
      description: Retrieves the list of all the available supported pairs and time range availability.
      operationId: getPairsInformation
      tags:
        - Spot
      parameters:
        - name: pair
          in: query
          description: The pair for which to retrieve the information.
          required: false
          schema:
            type: string
            example: btc_usd
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: pair
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing list of all the available supported pairs and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotTWAP_Pairs_info'
  /market/spot/twap/pairs/{pair}/latest:
    get:
      summary: 'Global TWAP - Pairs Latest'
      description: Retrieves the latest TWAP for the specified pair - this is the global TWAP across all exchanges which supports this pair, based on minutely data.
      operationId: getPairsLatest
      tags:
        - Spot
      parameters:
        - name: pair
          in: path
          description: The pair for which to retrieve the most recent data.
          required: true
          schema:
            type: string
            example: btc_usd
        - name: exchange
          in: query
          description:  The exchange for which to retrieve the requested data.
          required: false
          schema:
            type: string
            example: binance
        - name: includeCrossRates
          in: query
          description: If true, cross rate pairs are included in the price & VWAP calculations - this option only supports pairs quoted in usd (ie *_usd pairs).
          required: false
          schema:
            type: boolean
            example: true
        - name: lookbackPeriod
          in: query
          description: Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing latest TWAP for the specified pair'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotTWAP_Pairs_latest'
  /market/spot/twap/pairs/{pair}/historical:
    get:
      summary: 'Global TWAP - Pairs Historical '
      description: Retrieves the historical TWAP for the specified pair
      operationId: getPairsHistorical
      tags:
        - Spot
      parameters:
        - name: pair
          in: path
          description: The pair for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: btc_usd
        - name: exchange
          in: query
          description:  The exchange for which to retrieve the requested data.
           Note that daily vwap is not supported with this parameter.
          required: false
          schema:
            type: string
            example: binance
        - name: includeCrossRates
          in: query
          description: If true, cross rate pairs are included in the price & VWAP calculations - this option only supports pairs quoted in usd (ie *_usd pairs).
          required: false
          schema:
            type: boolean
            example: true
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive).
           The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m)
          required: true
          schema:
            type: string
            example: "2021-07-20T00:00:00.000Z"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive).
           The interval can not exceed 12 months (d), 30 days (h) or 24 hours (m).
          required: true
          schema:
            type: string
            example: "2021-07-21T00:00:00.000Z"
        - name: timeInterval
          in: query
          description: The time interval of the timeseries in the return payload.
          required: true
          schema:
            type: string
            example: d
        - name: lookbackPeriod
          in: query
          description: Number of historical data points used in the calculation.
          required: false
          schema:
            type: integer
            format: int32
            example: 60
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. ([Defaults] milliseconds | ms* | iso | iso8611 | hr | human_readable)
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing historical TWAP for the specified pair'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotTWAP_Pairs_historical'
  /market/options/exchanges/information:
    get:
      summary: 'Exchanges - Instruments'
      description: Retrieves information about supported exchange & instruments.
      operationId: getExchangesInformation
      tags:
        - Options
      parameters:
        - name: exchange
          in: query
          description: Only return data for the given exchange(s) (comma separated)
          required: false
          schema:
            type: string
            example: Uniswap
        - name: instrument
          in: query
          description: Only return data for the given instrument(s) (comma separated)
          required: false
          schema:
            type: string
            example: AAVEUSDT
        - name: includeDates
          in: query
          description: Include date ranges for each record.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: exchange,asset
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing information about supported exchange & instruments'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Exchanges_info'
  /market/options/exchanges/reference:
    get:
      summary: 'Exchanges - Reference'
      description: Retrieves reference information for each of the pairs.
      operationId: getExchangesReference
      tags:
        - Options
      parameters:
        - name: exchange
          in: query
          description: Only return data for the given exchange(s) (comma separated)
          required: false
          schema:
            type: string
            example: Uniswap
        - name: instrument
          in: query
          description: Only return data for the given instrument(s) (comma separated)
          required: false
          schema:
            type: string
            example: AAVEUSDT
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: exchange,asset
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing information about supported exchange & instruments'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Exchanges_reference'
  /market/options/liquidations/information:
    get:
      summary: 'Liquidations - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getLiquidationsInformation
      tags:
        - Options
      parameters:
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the most current data (comma separated). [Default] All available exchanges.
          required: false
          schema:
            type: string
            example: Uniswap
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: includeDates
          in: query
          description: Include date ranges for each record.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: exchange,asset
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing list of all the available exchanges'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Liquidations_info'
  /market/options/liquidations/{instrument}/latest:
    get:
      summary: 'Liquidations - Latest'
      description: Retrieves the latest liquidations for the specified instrument and exchange(s).
      operationId: getLiquidationsLatest
      tags:
        - Options
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: ETH-30SEP22-9000-P
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the most current data (comma separated). [Default] All available exchanges.
          required: false
          schema:
            type: string
            example: Uniswap
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: exchange,asset
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing the latest liquidations for the specified instrument and exchange(s)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Liquidations_latest'
  /market/options/liquidations/{instrument}/historical:
    get:
      summary: 'Liquidations - Historical'
      description: Retrieves the historical time series liquidations for the specified instrument and exchange(s).
      operationId: getLiquidationsHistorical
      tags:
        - Options
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: ETH-30SEP22-9000-P
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the most current data (comma separated). [Default] All available exchanges.
          required: false
          schema:
            type: string
            example: Uniswap
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8601
          required: false
          schema:
            type: string
            example: "2020-09-01T01:00:00"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8601
          required: false
          schema:
            type: string
            example: "2020-09-01T01:00:00"
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: exchange,asset
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing historical time series liquidations for the specified instrument and exchange(s)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Liquidations_historical'
  /market/options/ohlcv/information:
    get:
      summary: 'OHLCV - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getOhlcvInformation
      tags:
        - Options
      parameters:
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the most current data (comma separated). [Default] All available exchanges.
          required: false
          schema:
            type: string
            example: Uniswap
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: timeInterval
          in: query
          description: Time interval. [Defaults] minutes* | hours | days | weeks
          required: false
          schema:
            type: string
            example: minutes
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: exchange,asset
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing list of all the available exchanges'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_OHLCV_information'  
  /market/options/ohlcv/{instrument}/latest: 
    get:
      summary: 'OHLCV - Latest'
      description: Retrieves the latest Open High Low Close Volume data for the specified instrument.
      operationId: getOhlcvLatest
      tags:
        - Options
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: BTC-10DEC21-100000-C 
        - name: exchange
          in: query
          description:  The exchange(s) for which to retrieve the most current data (comma separated). [Default] All available exchanges.
          required: false
          schema:
            type: string
            example: Uniswap
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: timeInterval
          in: query
          description: Time interval. [Defaults] minutes* | hours | days | weeks
          required: false
          schema:
            type: string
            example: minutes
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: exchange,asset
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing latest Open High Low Close Volume data for the specified instrument.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_OHLCV_latest'
  /market/options/ohlcv/{instrument}/historical:
    get:
      summary: 'OHLCV - Historical'
      description: Retrieves the historical time series OHLCV data for the specified instrument and exchange(s).
      operationId: getOhlcvHistorical
      tags:
        - Options
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: BTC-10DEC21-100000-C
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the requested data (comma separated).
          required: true
          schema:
            type: string
            example: deribit
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8601
          required: false
          schema:
            type: string
            example: "2020-09-01T01:00:00"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8601
          required: false
          schema:
            type: string
            example: "2020-09-01T01:00:00"
        - name: timeInterval
          in: query
          description: Time interval to return the historical data in ("days" | "hours" | "minutes")
          required: false
          schema:
            type: string
            example: hours
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing historical time series OHLCV data for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_OHLCV_historical'
  /market/options/open-interest/information:
    get:
      summary: 'Open Interest - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getOpenInterestInformation
      tags:
        - Options
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).[Default] All available exchanges.
          required: false
          schema:
            type: string
            example: deribit
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: exchange
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing list of all the available exchanges'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Open_Interest_info'
  /market/options/open-interest/{instrument}/latest:
    get:
      summary: 'Open Interest - Latest'
      description: Retrieves the latest open interest for the specified instrument.
      operationId: getOpenInterestLatest
      tags:
        - Options
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: BTC-10DEC21-100000-C
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).[Default] All available exchanges.
          required: false
          schema:
            type: string
            example: deribit
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing latest open interest for the specified instrument.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Open_Interest_latest'
  /market/options/open-interest/{instrument}/historical:
    get:
      summary: 'Open Interest - Historical'
      description: Retrieves the historical time series open interest for the specified instrument and exchange(s).
      operationId: getOpenInterestHistorical
      tags:
        - Options
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: BTC-10DEC21-100000-C
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).[Default] All available exchanges.
          required: false
          schema:
            type: string
            example: deribit
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8601
          required: false
          schema:
            type: string
            example: "2020-09-01T01:00:00"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8601
          required: false
          schema:
            type: string
            example: "2020-09-01T01:00:00"
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing historical time series open interest for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Open_Interest_historical'
  /market/options/order-book-events/information:
    get:
      summary: 'Order books - Events Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getOrderBooksInformation
      tags:
        - Options
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: deribit
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: includeDates
          in: query
          description: Include date ranges for each record.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: exchance
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing list of all the available exchanges'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Order_Books_information'
  /market/options/order-book-events/{instrument}/historical:
    get:
      summary: 'Order books - Events historical'
      description: Retrieves the historical time series order book events (bid and ask) for the specified instrument and exchange(s).
      operationId: getOrderBooksHistorical
      tags:
        - Options
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: BTC-30SEP22-50000-P
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated). [Default] All available exchanges.
          required: false
          schema:
            type: string
            example: deribit
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8601
          required: false
          schema:
            type: string
            example: "2020-09-01T01:00:00"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8601
          required: false
          schema:
            type: string
            example: "2020-09-01T01:00:00"
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: exchance
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing historical time series order book events (bid and ask) for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Order_Books_historical'
  /market/options/order-book-snapshots/information:
    get:
      summary: 'Order books - Snapshots Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getSnapshotsInformation
      tags:
        - Options
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated). [Default] All available exchanges.
          required: false
          schema:
            type: string
            example: deribit
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Snapshots_information'
  /market/options/order-book-snapshots/{instrument}/historical:
    get:
      summary: 'Order books - Snapshots Historical'
      description: Retrieves the historical time series order book snapshots (bid and ask) for the specified instrument and exchange(s).
      operationId: getSnapshotsHistorical
      tags:
        - Options
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: ETH-28JAN22-8000-C
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the requested data (comma separated). [Default] All available exchanges.
          required: true
          schema:
            type: string
            example: deribit
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Formats] seconds | milliseconds | iso8601
          required: false
          schema:
            type: string
            example: "2020-09-01T01:00:00"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Formats] seconds | milliseconds | iso8601
          required: false
          schema:
            type: string
            example: "2020-09-01T01:00:00"
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing historical time series order book snapshots (bid and ask) for the specified instrument and exchange(s).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Snapshots_historical'
  /market/options/tickers/information:
    get:
      summary: 'Tickers - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getTickersInformation
      tags:
        - Options
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: deribit
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: includeDates
          in: query
          description: Include date ranges for each record.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: exchance
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Tickers_information'
  /market/options/tickers/{instrument}/latest:
    get:
      summary: 'Tickers - Latest'
      description: Retrieves the latest tickers for the specified instrument and exchange(s).
      operationId: getTickersLatest
      tags:
        - Options
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the most current data.
          required: true
          schema:
            type: string
            example: ETH-30SEP22-9000-P
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the most current data (comma separated).
          required: false
          schema:
            type: string
            example: deribit
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: exchance
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing latest tickers for the specified instrument and exchange(s)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Tickers_latest'
  /market/options/tickers/{instrument}/historical:
    get:
      summary: 'Tickers - Historical'
      description: Retrieves the historical time series tickers for the specified instrument and exchange(s).
      operationId: getTickersHistorical
      tags:
        - Options
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: BTC-30SEP22-120000-C
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the requested data (comma separated).
          required: false
          schema:
            type: string
            example: deribit
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Defaults] Beginning of the current hour (max time range is 1 hour). [Formats] seconds | milliseconds | iso8601
          required: false
          schema:
            type: string
            example: "2020-09-01T01:00:00"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Defaults] One hour after the beginning of the current hour (max time range is 1 hour). [Formats] seconds | milliseconds | iso8601
          required: false
          schema:
            type: string
            example: "2020-09-01T01:00:00"
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: exchance
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing historical time series tickers for the specified instrument and exchange(s)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Tickers_historical'
  /market/options/trades/information:
    get:
      summary: 'Trades - Information'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getTradesInformation
      tags:
        - Options
      parameters:
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the requested data (comma separated).
          required: false
          schema:
            type: string
            example: deribit
        - name: includeInactive
          in: query
          description: If true, endpoint returns all instruments, including delisted ones.
          required: false
          schema:
            type: boolean
            example: true
        - name: includeDates
          in: query
          description: Include date ranges for each record.
          required: false
          schema:
            type: boolean
            example: true
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: exchance
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Array containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Trades_information'
  /market/options/trades/{instrument}/historical:
    get:
      summary: 'Trades - Historical'
      description: Retrieves the list of all the available exchanges, supported instruments and time range availability.
      operationId: getTradesHistorical
      tags:
        - Options
      parameters:
        - name: instrument
          in: path
          description: The instrument for which to retrieve the requested data.
          required: true
          schema:
            type: string
            example: ETH-30SEP22-9000-P
        - name: exchange
          in: query
          description: The exchange(s) for which to retrieve the requested data (comma separated).
          required: true
          schema:
            type: string
            example: deribit
        - name: startDate
          in: query
          description: Payload only includes data after this date (inclusive). [Defaults] Beginning of the current hour (max time range is 1 hour). [Formats] seconds | milliseconds | iso8601
          required: false
          schema:
            type: string
            example: "2020-09-01T01:00:00"
        - name: endDate
          in: query
          description: Payload only includes data before this date (exclusive). [Defaults] One hour after the beginning of the current hour (max time range is 1 hour). [Formats] seconds | milliseconds | iso8601
          required: false
          schema:
            type: string
            example: "2020-09-01T01:00:00"
        - name: format
          in: query
          description: Format of the return payload.
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv; [Defaults] All available fields (see return payload for a list of available fields).
          required: false
          schema:
            type: string
            example: timestamp
        - name: timeFormat
          in: query
          description: Time format of the timestamps in the return payload. [Defaults] milliseconds | ms* | iso | iso8601 | hr | human_readable
          required: false
          schema:
            type: string
            example: ms
      responses:
        '200':
          description: 'Object containing list of all the available exchanges, supported instruments and time range availability.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options_Trades_historical'  
  /tokens:
    post:
      summary: 'All Tokens'
      operationId: getAllTokens
      description: 'Returns all tokens available in the network,currently, BNB and Ethereum are the availables networks.'
      tags:
        - Tokens
      responses:
        '200':
          description: 'Object containing all tokens available.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokens'
  /tokens/{token}:
    get:
      summary: 'Token'
      operationId: getToken
      description: 'Retrieves token details given a token address'
      tags:
        - Tokens
      parameters:
        - name: token
          in: path
          description: 'Token address to retrieve the most current data'
          required: true
          schema:
            type: string
            example: "0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c"
        - name: fields\[\] 
          in: query
          description: 'Currency'
          required: true
          schema:
             type: string
             example: "price_usd"
      responses:
        '200':
          description: 'Object containing most current data of a given token address'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token' 
  /pairs/{pair}:  
     get:
      summary: 'Pair'
      operationId: getPair
      description: 'Returns pair information given a pair address'
      tags:
        - Pairs
      parameters:
        - name: pair
          in: path
          description: 'Pair address to retrieve data'
          required: true
          schema:
            type: string
            example: "0xCA56457F274921bc97319bCe79e04fd7196Ef203"   
      responses:
        '200':
          description: 'Object containing current data of a given pair address.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pair'    
  /pairs:  
    post:
      summary: 'Pairs'
      operationId: getPairs
      description: 'Returns all pairs available in the network, currently, BNB and Ethereum are the availables networks.'
      tags:
        - Pairs
      responses:
        '200':
          description: 'Object containing all pairs available in the network.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pairs'  
  /markets:
    get:
      summary: 'Markets'
      operationId: getMarkets
      description: 'Retrieves all markets available'
      tags:
        - Markets
      parameters:
        - name: vs_currency
          in: query
          description: 'Currency'
          required: true
          schema:
            type: string
            example: "usd"
        - name: order
          in: query
          description: 'Order'
          required: true
          schema:
            type: string
            example: "market_cap_desc"
        - name: per_page
          in: query
          description: 'Items per page'
          required: true
          schema:
            type: integer
            format: int32
            example: 16
        - name: page
          in: query
          description: 'Page'
          required: true
          schema:
            type: integer
            format: int32
            example: 1
        - name: sparkline
          in: query
          description: 'sparkline'
          required: true
          schema:
            type: boolean
            example: false
        - name: price_change_percentage
          in: query
          description: 'Price'
          required: true
          schema:
            type: string
            example: "24h,7d"
      responses:
        '200':
          description: 'Array containing markets information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/markets' 
  /token_proposal:
    get:
      summary: 'Token'
      description: "Retrieves a token proposal"
      operationId: getTokenProposal
      tags:
        - Explorers
      parameters:
        - name: address
          in: query
          description: "The token address for the proposal"
          required: true
          schema:
            type: string
            example: "0xdBaAa36B347d56b77Ce0e36f050fCeEBbF9fbc38"
      responses:
        '200':
          description: 'Object containing detailed token proposal information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/explorers_token'
  /pair_proposal:
    get:
      summary: 'Pair'
      description: "Returns an individual pair proposal"
      operationId: getPairProposal
      tags:
        - Explorers
      parameters:
        - name: address
          in: query
          description: "The pair address for the proposal"
          required: true
          schema:
            type: string
            example: "0xc2Eed0F5a0dc28cfa895084bC0a9B8B8279aE492"
      responses:
        '200':
          description: 'Object containing pair proposal'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/explorers_pair'
  /tokens_proposals:
    get:
      summary: 'Tokens'
      description: "Returns all tokens proposals"
      operationId: getAllTokensProposals
      tags:
        - Explorers
      parameters:
        - name: total
          in: query
          description: "Total number of tokens proposals"
          required: false
          schema:
            type: integer
            format: int32
            example: 3
        - name: limit
          in: query
          description: "The limit to retrieve data"
          required: false
          schema:
            type: integer
            format: int32
            example: 20
        - name: skip
          in: query
          description: "The number of skipped results"
          required: false
          schema:
            type: integer
            format: int32
            example: 0
      responses:
        '200':
          description: 'Array containing all tokens proposals'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/explorers_tokens'
  /pairs_proposals:
    get:
      summary: 'Pairs'
      description: "Retrieves all pairs proposals"
      operationId: getAllPairs
      tags:
        - Explorers
      parameters:
        - name: total
          in: query
          description: "Total number of pairs proposals"
          required: false
          schema:
            type: integer
            format: int32
            example: 3
        - name: limit
          in: query
          description: "The limit to retrieve data"
          required: false
          schema:
            type: integer
            format: int32
            example: 20
        - name: skip
          in: query
          description: "The number of skipped results"
          required: false
          schema:
            type: integer
            format: int32
            example: 0
      responses:
        '200':
          description: 'Array containing all pairs proposals'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/explorers_pairs'
  /marketplace/{identifier}:
    get:
      summary: 'Single Sale'
      description: Returns details of a single sale given an identifier.
      operationId: getSingleSale
      tags:
        - Marketplace
      parameters:
        - name: identifier
          in: path
          description: "ID"
          required: true
          schema:
            type: string
            example: "121"
      responses:
        '200':
          description: 'Object containing details of a single sale given an identifier'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/singular_sale'
  /subscription_settings:
    get:
      summary: 'Subscriptions'
      description: Returns all subscription tiers
      operationId: getSubscriptions
      tags:
        - Subscriptions
      responses:
        '200':
          description: 'Array containing subscription settings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriptions'
  /profiles/me:
    get:
      summary: 'Profiles'
      description: Returns account details.
      operationId: getProfiles
      tags:
        - Subscriptions
      responses:
        '200':
          description: 'Object containing account information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profiles'
  /farms:
    get:
      summary: 'Farms'
      description: Returns all farms.
      operationId: getFarms
      tags:
        - Farms
      responses:
        '200':
          description: 'Object containing farms information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farms'
  /portfolios:
    post:
      summary: 'Creates a new portfolio'
      description: Creates a new portfolio.
      operationId: createPortfolios
      tags:
        - Portfolios
      parameters:
        - name: origin
          in: header
          description: "Server"
          required: true
          schema:
            type: string
            example: https://euler.tools
        - name: sec-fetch-site
          in: header
          description: "Site"
          required: true
          schema:
            type: string
            example: same-site
        - name: sec-fetch-mode
          in: header
          description: "Mode"
          required: true
          schema:
            type: string
            example: cors
        - name: referer
          in: header
          description: "Referer"
          required: true
          schema:
            type: string
            example: https://euler.tools/
        - name: accept-language
          in: header
          description: "Language"
          required: true
          schema:
            type: string
            example: es-ES,es;q=0.9
      responses:
        '201':
          description: 'Object containing information of a new portfolio'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolios'
    get:
      summary: 'Get portfolios'
      description: Retrieves portfolios of a account user.
      operationId: getPortfolios
      tags:
        - Portfolios
      parameters:
        - name: origin
          in: header
          description: "Server"
          required: true
          schema:
            type: string
            example: https://euler.tools
        - name: sec-fetch-site
          in: header
          description: "Site"
          required: true
          schema:
            type: string
            example: same-site
        - name: sec-fetch-mode
          in: header
          description: "Mode"
          required: true
          schema:
            type: string
            example: cors
        - name: referer
          in: header
          description: "Referer"
          required: true
          schema:
            type: string
            example: https://euler.tools/
        - name: accept-language
          in: header
          description: "Language"
          required: true
          schema:
            type: string
            example: es-ES,es;q=0.9
        - name: authorization
          in: header
          description: "Bearer token"
          required: true
          schema:
            type: string
            example: eyJraWQiOiI5TU9ScXNlMDhhY1N0S25KVXFTV1RZc0hIMUhnWlJ2ZFRkM3k5eFlEZ1wvMD0iLC
      responses:
        '200':
          description: 'Object containing portfolios of a account user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Get_portfolios'
  /wallets:
    post:
      summary: 'Creates a wallet'
      description: Creates a new wallet.
      operationId: createWallet
      tags:
        - Wallets
      parameters:
        - name: authority
          in: header
          description: "Domain"
          required: true
          schema:
            type: string
            example: bsc.catalog.prod.euler.tools
        - name: accept
          in: header
          description: "Accepted formats"
          required: true
          schema:
            type: string
            example: "application/json, text/plain, */*"
        - name: content-type
          in: header
          description: "Type"
          required: true
          schema:
            type: string
            example: application/json
        - name: origin
          in: header
          description: "Server"
          required: true
          schema:
            type: string
            example: https://euler.tools
        - name: sec-fetch-site
          in: header
          description: "Site"
          required: true
          schema:
            type: string
            example: same-site
        - name: sec-fetch-dest
          in: header
          description: "sec-fetch-site"
          required: true
          schema:
            type: string
            example: empty
        - name: referer
          in: header
          description: "Referer"
          required: true
          schema:
            type: string
            example: https://euler.tools/
      responses:
        '200':
          description: 'Object containing details of a new wallet'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wallets'
    get:
      summary: 'Get wallets'
      description: Returns wallet information given a wallet address.
      operationId: getWallet
      tags:
        - Wallets
      responses:
        '200':
          description: 'Array containing wallets details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
  /wallets/{id}:
    delete:
      summary: 'Deletes a wallet'
      description: Deletes a wallet.
      operationId: deleteWallet
      tags:
        - Wallets
      parameters:
        - name: id
          in: path
          description: "identifier"
          required: true
          schema:
            type: string
            example: ba4b79ea-541e-4612-93ce-fd0994f171e1
        - name: authority
          in: header
          description: "Domain"
          required: true
          schema:
            type: string
            example: bsc.catalog.prod.euler.tools
        - name: accept
          in: header
          description: "Accepted formats"
          required: true
          schema:
            type: string
            example: "application/json, text/plain, */*"
        - name: content-type
          in: header
          description: "Type"
          required: true
          schema:
            type: string
            example: application/json
        - name: origin
          in: header
          description: "Server"
          required: true
          schema:
            type: string
            example: https://euler.tools
        - name: sec-fetch-site
          in: header
          description: "Site"
          required: true
          schema:
            type: string
            example: same-site
        - name: sec-fetch-dest
          in: header
          description: "sec-fetch-site"
          required: true
          schema:
            type: string
            example: empty
        - name: referer
          in: header
          description: "Referer"
          required: true
          schema:
            type: string
            example: https://euler.tools/
      responses:
        '200':
          description: 'Object with metadata information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wallet_delete'
    put:
      summary: 'Updates a wallet'
      description: Updates a wallet.
      operationId: updatesWallet
      tags:
        - Wallets
      parameters:
        - name: id
          in: path
          description: "Wallet identifier"
          required: true
          schema:
            type: string
            example: "43e82635-de5e-4441-858d-4be09b9e66a1"
        - name: authority
          in: header
          description: "Domain"
          required: true
          schema:
            type: string
            example: "bsc.catalog.prod.euler.tools"
        - name: content-type
          in: header
          description: "Type"
          required: true
          schema:
            type: string
            example: "application/json"
        - name: origin
          in: header
          description: "Server"
          required: true
          schema:
            type: string
            example: "https://euler.tools"
        - name: sec-fetch-site
          in: header
          description: "Site"
          required: true
          schema:
            type: string
            example: "same-site"
        - name: sec-fetch-dest
          in: header
          description: "fetch"
          required: true
          schema:
            type: string
            example: "empty"
        - name: referer
          in: header
          description: "Referer"
          required: true
          schema:
            type: string
            example: "https://euler.tools/"
        - name: accept-language
          in: header
          description: ""
          required: true
          schema:
            type: string
            example: "es-ES,es;q=0.9"
      responses:
        '200':
          description: 'Object with updated wallet deatils'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wallet_update'
  /trades:
    get:
      summary: 'Trades'
      operationId: getTrades
      description: 'Returns all trades of a specific token'
      tags:
        - App
      parameters:
        - name: address
          in: query
          description: "The address to retrieve trade information"
          required: true
          schema:
            type: string
            example: "0x31045e7023e6c388f9447e632a3f9eaff90393fa"
        - name: $sort[block_timestamp]
          in: query
          description: "Sort"
          required: true
          schema:
            type: integer
            format: int32
            example: -1
        - name: $limit
          in: query
          description: "Limit"
          required: true
          schema:
            type: integer
            format: int32
            example: 10
        - name: $skip
          in: query
          description: "Skip"
          required: true
          schema:
            type: integer
            format: int32
            example: 0
        - name: block_timestamp[$gte]
          in: query
          description: "timestamp"
          required: true
          schema:
            type: string
            example: "2021-10-01T03:00:00.000Z"
        - name: block_timestamp[$lte]
          in: query
          description: "timestamp"
          required: true
          schema:
            type: string
            example: "2021-12-31T03:00:00.000Z"
        - name: volume[$gte]
          in: query
          description: "Volume"
          required: true
          schema:
            type: integer
            format: int32
            example: 0
      responses:
        '200':
          description: 'Array containig all trades information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/App_trades'
  /portfolios/{id}:
    put:
      summary: 'Updates a portfolio'
      description: Updates a portfolio.
      operationId: updatePortfolio
      tags:
        - Portfolios
      parameters:
        - name: id
          in: path
          description: "Portfolio identifier"
          required: true
          schema:
            type: string
            example: "43e82635-de5e-4441-858d-4be09b9e66a1"
        - name: authority
          in: header
          description: "Domain"
          required: true
          schema:
            type: string
            example: "bsc.catalog.prod.euler.tools"
        - name: accept
          in: header
          description: "Accepted formats"
          required: true
          schema:
            type: string
            example: "application/json, text/plain, */*"
        - name: content-type
          in: header
          description: "Type"
          required: true
          schema:
            type: string
            example: "application/json"
        - name: origin
          in: header
          description: "Server"
          required: true
          schema:
            type: string
            example: "https://euler.tools"
        - name: sec-fetch-site
          in: header
          description: "Site"
          required: true
          schema:
            type: string
            example: "same-site"
        - name: sec-fetch-dest
          in: header
          description: "fetch"
          required: true
          schema:
            type: string
            example: "empty"
        - name: referer
          in: header
          description: "Referer"
          required: true
          schema:
            type: string
            example: "https://euler.tools/"
        - name: accept-language
          in: header
          description: ""
          required: true
          schema:
            type: string
            example: "es-ES,es;q=0.9"
      responses:
        '200':
          description: 'Object with updates details of a specific portfolio.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/portfolios_update'
    delete:
      summary: 'Deletes a portfolio'
      description: Deletes a portfolio.
      operationId: deletePortfolio
      tags:
        - Portfolios
      parameters:
        - name: id
          in: path
          description: "Portfolio id"
          required: true
          schema:
            type: string
            example: "43e82635-de5e-4441-858d-4be09b9e66a1"
        - name: authority
          in: header
          description: "Domain"
          required: true
          schema:
            type: string
            example: "bsc.catalog.prod.euler.tools"
        - name: accept
          in: header
          description: "Accepted formats"
          required: true
          schema:
            type: string
            example: "application/json, text/plain, */*"
        - name: origin
          in: header
          description: "Server"
          required: true
          schema:
            type: string
            example: "https://euler.tools"
        - name: sec-fetch-site
          in: header
          description: "Site"
          required: true
          schema:
            type: string
            example: "same-site"
        - name: sec-fetch-dest
          in: header
          description: "fetch"
          required: true
          schema:
            type: string
            example: "empty"
        - name: referer
          in: header
          description: "Referer"
          required: true
          schema:
            type: string
            example: "https://euler.tools/"
        - name: accept-language
          in: header
          description: ""
          required: true
          schema:
            type: string
            example: "es-ES,es;q=0.9"
      responses:
        '200':
          description: 'Object with metadata information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/portfolios_delete'
  /prices/{hash}:
    get:
      summary: 'Token Prices - Latest'
      description: Retrieves the latest price (and other market information) for the specified token.
      operationId: getLatestPrices
      tags:
        - Prices
      parameters:
        - name: hash
          in: path
          description: The address of the token for which to retrieve the price.
          required: true
          schema:
            type: string
            example: "0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2"
        - name: currency
          in: query
          description: The additional currency (other than ETH and USD) for which to return price info.
          required: true
          schema:
            type: string
            example: EUR
        - name: format
          in: query
          description:  Format of the return payload. [Defaults] csv | json*
          required: false
          schema:
            type: string
            example: csv
        - name: fields
          in: query
          description: List of fields to include in the return payload - can only be used in combination with option format=csv.
          required: false
          schema:
            type: string
            example: timestamp
      responses:
        '200':
          description: 'Array containing latest price for the specified token.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token_prices_latest'
  /prices:
    get:
      summary: 'Prices'
      description: Returns prices for all tokens.
      operationId: getPrices
      tags:
        - Prices
      parameters:
        - name: tickers
          in: query
          description: The symbols to retrieve the prices for.
          required: false
          allowReserved: true
          schema:
            type: array
            items:
              type: string
              example: bnb, bake
      responses:
        '200':
          description: 'Object containing prices for all tokens'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/All_prices'
  /marketplace:
    post:
      summary: 'Search Sales'
      description: Returns all sales in the network.
      operationId: getSales
      tags:
        - Marketplace
      parameters:
        - name: User-Agent
          in: header
          description: "User-Agent"
          required: true
          schema:
            type: string
            example: Mozilla/5.0 (X11; Linux x86_64; rv:97.0) Gecko/20100101 Firefox/97.0 
        - name: Accept
          in: header
          description: "Accepted formats"
          required: true
          schema:
            type: string
            example: "application/json, text/plain, */*"
        - name: Accept-Language
          in: header
          description: "Language"
          required: true
          schema:
            type: string
            example: es-ES,es;q=0.9
        - name: Accept-Encoding
          in: header
          description: "Encoding"
          required: true
          schema:
            type: string
            example: gzip, deflate, br
        - name: Authorization
          in: header
          description: "Auth"
          required: true
          schema:
            type: string
            example: 234FFnnweo$as
        - name: Origin
          in: header
          description: "Server"
          required: true
          schema:
            type: string
            example: https://development.euler.tools
        - name: Connection
          in: header
          description: "Connection"
          required: true
          schema:
            type: string
            example: keep-alive
        - name: Referer
          in: header
          description: "Referer"
          required: true
          schema:
            type: string
            example: https://development.euler.tools/
        - name: Sec-Fetch-Dest
          in: header
          description: "Dest"
          required: true
          schema:
            type: string
            example: empty
        - name: Sec-Fetch-Mode
          in: header
          description: "Mode"
          required: true
          schema:
            type: string
            example: cors
        - name: Sec-Fetch-Site
          in: header
          description: "Site"
          required: true
          schema:
            type: string
            example: same-site
        - name: If-None-Match
          in: header
          description: "If-None-Match"
          required: true
          schema:
            type: string
            example: W/"3834-NvE892Xn4t86xhz9UBxKYB0i3qY"
        - name: TE
          in: header
          description: "trailers"
          required: true
          schema:
            type: string
            example: trailers
        - name: content-type
          in: header
          description: "Type"
          required: true
          schema:
            type: string
            example: application/json
      responses:
        '200':
          description: 'Object containing all sales in the network'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sales'
  /cognito:
    post:
      summary: 'Creates Bearer token'
      description: Amazon Web Services request to obtain Cognito token access.
      operationId: getBearerToken
      tags:
        - Portfolio
      parameters:
        - name: authority
          in: header
          description: "Provider"
          required: true
          schema:
            type: string
            example: cognito-idp.us-east-1.amazonaws.com
        - name: cache-control
          in: header
          description: "Cache-control"
          required: true
          schema:
            type: string
            example: max-age=0
        - name: x-amz-user-agent
          in: header
          description: "x-amz-user-agent"
          required: true
          schema:
            type: string
            example: aws-amplify/0.1.x js
        - name: x-amz-target
          in: header
          description: "x-amz-target"
          required: true
          schema:
            type: string
            example: AWSCognitoIdentityProviderService.InitiateAuth
        - name: origin
          in: header
          description: "Server"
          required: true
          schema:
            type: string
            example: https://euler.tools
        - name: sec-fetch-site
          in: header
          description: "sec-fetch-site"
          required: true
          schema:
            type: string
            example: cross-site
        - name: sec-fetch-mode
          in: header
          description: "sec-fetch-mode"
          required: true
          schema:
            type: string
            example: cors
        - name: sec-fetch-dest
          in: header
          description: "sec-fetch-dest"
          required: true
          schema:
            type: string
            example: empty
        - name: referer
          in: header
          description: "referer"
          required: true
          schema:
            type: string
            example: https://euler.tools/
        - name: content-type
          in: header
          description: "content-type"
          required: true
          schema:
            type: string
            example: application/x-amz-json-1.1
        - name: accept-language
          in: header
          description: "accept-language"
          required: true
          schema:
            type: string
            example: es-ES,es;q=0.9
      responses:
        '201':
          description: 'Object containing authentication results'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cognito'
components:
  schemas:
    holder_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "ok"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "records": [
            {
                "tokenAddress": "0x06012c8cf97bead5deae237070f9587f8e7a266d", # The token contract address
                "holderAddress": "0xb1690c08e213a35ed9bab7b318de14420fb57d8c", # The address of the token holder
                "timestamp": 1575920861000,
                "holderFirstTimestamp": "2017-11-23T18:44:21.000Z", # The timestamp when the holder first received the token
                "numTokens": "209736", # The number of tokens held
                "decimals": "0"
            },
            {
                "tokenAddress": "0x06012c8cf97bead5deae237070f9587f8e7a266d",
                "holderAddress": "0x68b42e44079d1d0a4a037e8c6ecd62c48967e69f",
                "timestamp": 1575893956000,
                "holderFirstTimestamp": "2018-03-06T19:03:17.000Z",
                "numTokens": "202121",
                "decimals": "0"
            }
        ]
        }
    holder_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "ok"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example:  {
             "data": [
      {
        "timestamp": 1574985600000, # The timestamp associated with this record.
        "0xb1690c08e213a35ed9bab7b318de14420fb57d8c": 209760,
        "0xc7af99fe5513eb6710e6d5f44f9989da40f27f26": 71430
      },
      {
        "timestamp": 1575072000000,
        "0xb1690c08e213a35ed9bab7b318de14420fb57d8c": 210006,
        "0xc7af99fe5513eb6710e6d5f44f9989da40f27f26": 71516
      },
      {
        "timestamp": 1575158400000,
        "0xb1690c08e213a35ed9bab7b318de14420fb57d8c": 209913,
        "0xc7af99fe5513eb6710e6d5f44f9989da40f27f26": 71044
      },
      ...
          ],
        "metadata": { # The metadata associated with the token holder data.
        "columns": [ # The name of the columns associated with the returned data
        "holder*", # The address of the token holder along with the number of tokens that the address holds.
        "timestamp"
      ],
      "decimals": "0"
         }
         }
    metrics_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "ok"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "priceUSD": "418.9650", # The value of 1 token in USD.
        "transfersTotal": "126", # The total amount of transfers for the given time frame (default 24h).
        "transferedValueTotal": "1107.33716042075807677", # The value total per "tick".
        "transferedValueAverage": "8.788390162069508546",
        "transferedValueTotalUSD": "463935.5134", # The value total in USD per "tick".
        "transferedValueAverageUSD": "3682.0279" # The value average in USD per "tick".
           }
    metrics_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "ok"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
           "records": [
           ...,
         {
        "timestamp": "2020-05-31T00:00:00.000Z", # The timestamp signifying this "tick" of data, this is the time of the close of a tick, in the case of 1d tick, it would be the timestamp of UTC midnight.
        "priceUSD": "1.5779", # The value of 1 token in USD.
        "transfersTotal": "1708", # The total amount of transfers for the given time frame (default 24h).
        "transferedValueTotal": "3776546.97171975838093617", # The value total per "tick".
        "transferedValueAverage": "2211.093074777376101251", # The value average per "tick".
        "transferedValueTotalUSD": "5959161.3814", # The value total in USD per "tick".
        "transferedValueAverageUSD": "3488.9704" # The value average in USD per "tick"
         },
        {
        "timestamp": "2020-06-01T00:00:00.000Z",
        "priceUSD": "1.5078",
        "transfersTotal": "4111",
        "transferedValueTotal": "12660492.298071148108400581",
        "transferedValueAverage": "3079.662441758975458137",
        "transferedValueTotalUSD": "19089361.5720",
        "transferedValueAverageUSD": "4643.4837"
          }
          ],
           "totalRecords": 365
         }
    metrics_velocity:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "ok"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "data": [
            [
                1549504680000,
                "0.000002905148358663806064"
            ],
            [
                1549504740000,
                "0.000002178861268997854548"
            ],
            [
                1549504800000,
                "0"
            ],
            [
                1549504860000,
                "0.000001452574179331903032"
            ],
            [
                1549504920000,
                "0"
            ]
        ],
        "metadata": { # The metadata associated with the token volume data.
            "columns": [ # The name of the columns associated with the returned data
                "timestamp", # The timestamp associated with this record.
                "velocity" # The token velocity.
            ],
            "endDate": 1549504920000, # The end of the time frame.
            "startDate": 1549504680000
        }
       }
    metrics_volume:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "ok"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "data": [
            [
                1548892800000,
                "2791"
            ],
            [
                1548979200000,
                "3094"
            ],
            [
                1549065600000,
                "3886"
            ],
            [
                1549152000000,
                "3495"
            ],
            [
                1549238400000,
                "2363"
            ]
        ],
        "metadata": {
            "columns": [
                "timestamp",
                "volume"
            ],
            "endDate": 1549238400000,
            "startDate": 1548892800000
        }
       }
    ranking_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "ok"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "data": [{
      "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
      "icon": "https://amberdata.io/digital-assets/tetherusd_usdt.png",
      "changeInPrice": "-0.00074688",
      "changeInPriceHourly": "0.00000000",
      "changeInPriceDaily": "-0.00074688",
      "changeInPriceWeekly": "0.00130082",
      "currentPrice": "1.00076667",
      "decimals": "6",
      "isERC20": true,
      "isERC721": false,
      "isERC777": false,
      "isERC884": false,
      "isERC998": false,
      "marketCap": "17716572000.04991444",
      "liquidMarketCap": "17716572000.04991444",
      "name": "Tether USD",
      "rank": "1",
      "symbol": "USDT",
      "circulatingSupply": "17702999700.27970000",
      "totalSupply": "10166574840.00000000",
      "maxSupply": "0.00000000",
      "tokenVelocity": "0.000023795919845901611442",
      "transactionVolume": "18386",
      "uniqueAddresses": "92070",
      "tradeVolume": "40404622.93326587"
       }, ...]
       }
    ranking_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "ok"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
         "metadata": {
         "startDate": 1567371953898,
         "endDate": 1569963953898
         },
        "data": [{
        "timestamp": 1567296000000,
        "snapshot": [{
            "timestamp": 1567296000000,
            "address": "0x6f259637dcd74c767781e37bc6133cd6a68aa161",
            "changeInPrice": 6.141841602673805,
            "changeInPriceHourly": 6.792411896430253,
            "changeInPriceDaily": 6.141841602673805,
            "changeInPriceWeekly": -14.556832887253165,
            "currentPrice": 4.1209589196,
            "decimals": 18,
            "id": "2502",
            "isERC20": true,
            "isERC721": false,
            "isERC777": false,
            "isERC884": false,
            "isERC998": false,
            "marketCap": 2060479459.8,
            "liquidMarketCap": 1970175964.1730235,
            "name": "HuobiToken",
            "platform": "ethereum",
            "rank": 1,
            "ranking": 1,
            "symbol": "HT",
            "tradeVolume": 2985965.4700927003,
            "circulatingSupply": 478086776.0662507,
            "totalSupply": 500000000,
            "maxSupply": null,
            "tokenVelocity": 0.00002384,
            "transactionVolume": 9798,
            "uniqueAddresses": 2757
          },
          ...
          ]
          },
         ...
         ]
         }
    transfers:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "ok"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "totalRecords": 69918,
         "records": [
           {
        "transactionHash": "0x281d6478dee6d20da7e9293991cc68085532a915760f23d77ffa9923edb523de",
        "blockHash": "0x5b24ad74b3b6b7adb83e0ba4996726db5b91392a925bb54462c1d9833e921a4f",
        "blockNumber": "7252428",
        "tokenAddress": "0x26fb86579e371c7aedc461b2ddef0a8628c93d3b",
        "amount": "20000000000000000000",
        "timestamp": 1550825454000,
        "timestampNanoseconds": 0,
        "logIndex": 163,
        "blockchainId": "1c9c969065fcd1cf",
        "to": [
          "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        ],
        "from": "0x41efb7f2fa8e27a5c089082e8a61f15f748f7e0b",
        "decimals": "18",
        "name": "BORA",
        "symbol": "BORA",
        "isERC20": true,
        "isERC721": false,
        "isERC777": false,
        "isERC884": false,
        "isERC998": false
        }
        ]
        }
    supplies:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "ok"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "decimals": "18",
        "circulatingSupply": "1000001.0000081356704131",
        "totalBurned": "1000000",
        "totalMinted": "2000000",
        "totalSupply": "1000000",
        "totalTransfers": "577586"
         }
    supplies_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "ok"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "metadata": {
            "columns": [
                "timestamp",
                "numHolders",
                "circulatingSupply",
                "totalSupply"
            ],
            "startDate": 1573257600000,
            "endDate": 1575849600000,
            "decimals": "18"
        },
        "data": [
            [
                1573257600000,
                15460,
                "1000000000000000000000000",
                "1000000000000000000000000"
            ],
            [
                1573344000000,
                15484,
                "1000000000000000000000000",
                "1000000000000000000000000"
            ],
           ...
        ]
      }
    All:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "baseFeePerGas": 15,
           "burntFees": 12055890,
           "difficulty": "2040681273327616",
           "duration": 23000,
           "extraData": "0x50505945206e616e6f706f6f6c2e6f7267",
           "gasLimit": "8000029",
           "gasUsed": "7907944",
           "hash": "0x6d436014fea6f2e4c47e1d57a1eae46ae89ffeb2eec7afbc5e456d79a4b71d9f",
           "logsBloom": "0x0a5024...",
           "miner": {
           "address": "0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5"
           },
           "mixHash": "0xe35ae7ca4932acba6f787aa9112d95b73398fa0be3533edf2f9d00a3aa288ebf",
           "nonce": "14950604792474033885",
           "numTransactions": 122,
           "numUncles": 0,
           "number": "7997770",
           "parent": {
           "hash": "0x4bc30451f1cd6db989505c184b4bc0a324892ebd19b9da6017e60c8b792be2a6",
           "number": 7997769
           },
           "receiptsRoot": "0x3e80a185e55b24507295b3c7b948c3abbda3782154a0ee7a02e39219fe7a8563",
           "reward": "2061984109629473573",
           "rewardFee": "61984109629473573",
           "rewardUncle": "0",
           "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
           "size": 25213,
           "stateRoot": "0x7b3376cd82bc7a559bb5e503aeb7c403dffaf62f876b1952fb36ef6b668bb599",
           "timestamp": "2019-06-20T22:33:20.000Z",
           "totalDifficulty": "10686260623453898383232",
           "transactionsRoot": "0x94b2b3e46d067d0df314d6dd83ae681feeb0fe444386c87858e47e2b7a35f276"
           },
           {...}
           ]
    Block:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "baseFeePerGas": 15,
        "burntFees": 12055890,
        "difficulty": "2957101900364072",
        "duration": 23000,
        "extraData": "0x76697231",
        "gasLimit": "8000029",
        "gasUsed": "7992790",
        "hash": "0xeddb0590e1095fbe51205a51a297daef7259e229af0432214ae6cb2c1f750750",
        "logsBloom": "0x007412...",
        "miner": {
            "address": "0xb2930b35844a230f00e51431acae96fe543a0347"
        },
        "mixHash": "0x1f7cf01e11ff0a3c0dffe05f221943f03c38e48247996230edf435ec77c7a301",
        "nonce": "3191105210499409716",
        "numTransactions": 118,
        "numUncles": "0",
        "number": "7280000",
        "parent": {
            "hash": "0x21506036220aee9bcfd42db8219d75d8d2bb2e4a03cad73748cae26b2c4d282d",
            "number": 7279999
        },
        "receiptsRoot": "0xbea5cd80cb9a2264ea6d48320cae033f863592771513ee1addcabb40327db129",
        "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
        "size": 21618,
        "stateRoot": "0x1e302241298f913b30f7a0df60272c9983d8d8726932f66582f182bd99ef42bc",
        "timestamp": "2019-02-28T19:52:04.000Z",
        "totalDifficulty": "9295093842767230183255",
        "transactionsRoot": "0x4eb851a13c63ad37eb8e7ca618cc23987469fc347539689a28484c5d1ccd31d7",
        "unclesReward": null
        }
    Functions:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "blockNumber": "7000000",
           "contractCodeAddress": "",
           "depth": 0,
           "error": "",
           "from": "0x1babc9d756951648217c8f0597e126eeeaff24ad",
           "initialGas": "36744",
           "input": "0xa9059cbb000000000000000000000000a93b5270d6bfb419f31b9d6ebc458fe8c494f3b00000000000000000000000000000000000000000000000056bc75e2d63100000",
           "leftOverGas": "22946",
           "messageIndex": 0,
           "opcode": "CALL",
           "returnValue": "0x0000000000000000000000000000000000000000000000000000000000000001",
           "timestamp": "2019-01-02T22:09:12.000Z",
           "to": [
           "0x07241118626a7bbb604be4b9ef8ef12e78fd0871"
            ],
           "transactionHash": "0x232e44551d0830f1462b039fb225894825d1582fce5ef9b38c13b7e413ba1f28",
           "value": "0"
           },
           ]
    Logs:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "records": [
            {
                "address": {
                    "address": "0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c",
                    "nameNormalized": "Enjin Coin"
                },
                "data": "0x0000000000000000000000000000000000000000000000878678326eac900000",
                "logIndex": 99,
                "number": "7280000",
                "removed": false,
                "timestamp": "2019-02-28T19:52:04.000Z",
                "topics": [
                    "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                    "0x00000000000000000000000067f30fc137a07629046b458b6ed87a4621c8e0a0",
                    "0x0000000000000000000000005b7934cdbb5cd076bd486e0f017aeb777bf0d04c"
                ],
                "transactionHash": "0x019a2991f9ebbce1566fde3b13e24c532be0df3ddf8f93f4a7565da0a92acb08"
            }
        ]
          }
    Latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "timestamp": "2021-08-10T00:00:00.000Z",
        "difficultyAverage": "7699414348610995.0000",
        "difficultyMaximum": "7699414348610995",
        "difficultyMinimum": "7699414348610995",
        "durationAverage": "41000.000000000000",
        "durationMaximum": "41000",
        "durationMinimum": "41000",
        "hashrateAverage": 187790593868561,
        "baseFeeAverage": "30258142234.00000000",
        "baseFeeMaximum": "30258142234",
        "baseFeeMinimum": "30258142234",
        "baseFeeTotal": "30258142234",
        "burntFeeAverage": "351805579933266838",
        "burntFeeMaximum": "351805579933266838",
        "burntFeeMinimum": "351805579933266838",
        "burntFeeTotal": "351805579933266838",
        "issuanceAverage": "2000000000000000000",
        "issuanceMaximum": "2000000000000000000",
        "issuanceMinimum": "2000000000000000000",
        "issuanceTotal": "2000000000000000000",
        "issuanceUnit": "wei",
        "sizeAverage": "42380.000000000000",
        "sizeMaximum": 42380,
        "sizeMinimum": 42380,
        "sizeTotal": "42380",
        "transactionFeeAverage": "8191431157883818.0000",
        "transactionFeeMaximum": "8191431157883818",
        "transactionFeeMinimum": "8191431157883818",
        "transactionFeeTotal": "8191431157883818",
        "transactionsAverage": "93.0000000000000000",
        "transactionsMaximum": 93,
        "transactionsMinimum": 93,
        "transactionsTotal": "93"
      }
    Historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "records": [{
      "timestamp": "2021-08-10T00:00:00.000Z",
      "difficultyAverage": "7699414348610995.0000",
      "difficultyMaximum": "7699414348610995",
      "difficultyMinimum": "7699414348610995",
      "durationAverage": "41000.000000000000",
      "durationMaximum": "41000",
      "durationMinimum": "41000",
      "hashrateAverage": 187790593868561,
      "baseFeeAverage": "30258142234.00000000",
      "baseFeeMaximum": "30258142234",
      "baseFeeMinimum": "30258142234",
      "baseFeeTotal": "30258142234",
      "burntFeeAverage": "351805579933266838",
      "burntFeeMaximum": "351805579933266838",
      "burntFeeMinimum": "351805579933266838",
      "burntFeeTotal": "351805579933266838",
      "issuanceAverage": "2000000000000000000",
      "issuanceMaximum": "2000000000000000000",
      "issuanceMinimum": "2000000000000000000",
      "issuanceTotal": "2000000000000000000",
      "issuanceUnit": "wei",
      "sizeAverage": "42380.000000000000",
      "sizeMaximum": 42380,
      "sizeMinimum": 42380,
      "sizeTotal": "42380",
      "transactionFeeAverage": "8191431157883818.0000",
      "transactionFeeMaximum": "8191431157883818",
      "transactionFeeMinimum": "8191431157883818",
      "transactionFeeTotal": "8191431157883818",
      "transactionsAverage": "93.0000000000000000",
      "transactionsMaximum": 93,
      "transactionsMinimum": 93,
      "transactionsTotal": "93"
      },
      ...
       ],
      "totalRecords": 365
     }
    Uncle:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "baseFeePerGas": 15,
           "blockNumber": "9366574",
           "difficulty": "2102313480414972",
           "extraData": "0x414c54706f6f6c2e70726f202f2053303031",
           "gasLimit": "9963038",
           "gasUsed": "9947492",
           "hash": "0x11b724abb27794818ac91851b625216f4349e009a467b2024e0f1e5af3ae1416",
           "logsBloom": "0x06400000000880000202844084b10000e01c000000442a000058802910288020402014080024001a841c0140101008401a0c50c010090f200208008100202000080000430180009100010008800042004e9631024c4888280000000a004000501860111403240080300020802000086400620200080453000d8000104108401030810082d2a10002000a48008055800401400a00c0018020880a0011001c0204024c080a13453908202024001020e001080002086002082008640000008501c11008002282020241008200031008b2000824028380084001001100200a0e2848981120001000010004020090802080044822000001088840a002000050001040",
           "miner": "0x433022c4066558e7a32d850f02d2da5ca782174d",
           "mixHash": "0x0decf36a7b6ccfc896824a15c28b61b5b471c4ba1110778b334ea5c493eee9d6",
           "nonce": "16447178432977649127",
           "number": "9366573",
           "parentHash": "0xdc63894aa8a53bcb27e7db0746da98be1eefa9654415e16d9696ca59cc9e0916",
           "positionIndex": 1,
           "receiptsRoot": "0x980870ec74277ec170e277875e647e96c0005c643cfc9901f9938887f6e4f4b9",
           "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
           "size": 539,
           "stateRoot": "0x8dfec400757bcb3c088d1cc6d91b34145f316c1ccbbd299cd97782f3bc1a8f4a",
           "timestamp": "2020-01-27T21:49:48.000Z",
           "totalDifficulty": "13871527901633468631165",
           "transactionsRoot": "0x5b70dfd9abe027a8f521c217abdfaf9636e9ea36ceb48bc6ee8fdaa4559f6483",
           "reward": "1.7500000000000000"
           }
           ]
    Uncles:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "baseFeePerGas": 15,
           "blockNumber": "9366574",
           "difficulty": "2102313480414972",
           "extraData": "0x414c54706f6f6c2e70726f202f2053303031",
           "gasLimit": "9963038",
           "gasUsed": "9947492",
           "hash": "0x11b724abb27794818ac91851b625216f4349e009a467b2024e0f1e5af3ae1416",
           "logsBloom": "0x06400000000880000202844084b10000e01c000000442a000058802910288020402014080024001a841c0140101008401a0c50c010090f200208008100202000080000430180009100010008800042004e9631024c4888280000000a004000501860111403240080300020802000086400620200080453000d8000104108401030810082d2a10002000a48008055800401400a00c0018020880a0011001c0204024c080a13453908202024001020e001080002086002082008640000008501c11008002282020241008200031008b2000824028380084001001100200a0e2848981120001000010004020090802080044822000001088840a002000050001040",
           "miner": "0x433022c4066558e7a32d850f02d2da5ca782174d",
           "mixHash": "0x0decf36a7b6ccfc896824a15c28b61b5b471c4ba1110778b334ea5c493eee9d6",
           "nonce": "16447178432977649127",
           "number": "9366573",
           "parentHash": "0xdc63894aa8a53bcb27e7db0746da98be1eefa9654415e16d9696ca59cc9e0916",
           "positionIndex": 1,
           "receiptsRoot": "0x980870ec74277ec170e277875e647e96c0005c643cfc9901f9938887f6e4f4b9",
           "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
           "size": 539,
           "stateRoot": "0x8dfec400757bcb3c088d1cc6d91b34145f316c1ccbbd299cd97782f3bc1a8f4a",
           "timestamp": "2020-01-27T21:49:48.000Z",
           "totalDifficulty": "13871527901633468631165",
           "transactionsRoot": "0x5b70dfd9abe027a8f521c217abdfaf9636e9ea36ceb48bc6ee8fdaa4559f6483",
           "reward": "1.7500000000000000"
           },
           {...}
           ]
    Transfers:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "data": [
            [
                1546466952000,
                "0x0e0989b1f9b8a38983c2ba8053269ca62ec9b195",
                "0xf20b9e713a33f61fa38792d2afaf1cd30339126a",
                "0x8c2036ce61648fcddffb06d6d11fe0b479ed63fe",
                "2119838342946",
                "7000000",
                "0xe1bf7bfba295c6685920741a913aa7323b6557fb10e1c211e2c465117c25885c"
            ],
            [
                1546466952000,
                "0x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c",
                "0xf20b9e713a33f61fa38792d2afaf1cd30339126a",
                "0x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c",
                "166642970609439260800",
                "7000000",
                "0xe1bf7bfba295c6685920741a913aa7323b6557fb10e1c211e2c465117c25885c"
            ],
            [
                1546466952000,
                "0xc0829421c1d260bd3cb3e0f06cfe2d52db2ce315",
                "0xf20b9e713a33f61fa38792d2afaf1cd30339126a",
                "0xc0829421c1d260bd3cb3e0f06cfe2d52db2ce315",
                "753758517816662159",
                "7000000",
                "0xe1bf7bfba295c6685920741a913aa7323b6557fb10e1c211e2c465117c25885c"
            ]
        ],
        "metadata": {
            "columns": [
                "timestamp",
                "tokenAddress",
                "from",
                "to",
                "amount",
                "blockNumber",
                "transactionHash"
            ],
            "endDate": 1546466952000,
            "startDate": 1546466952000
        }
        }
    Transactions:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
      {
      "blockNumber": "7280000",
      "confirmations": "717638",
      "contractAddress": "null",
      "cumulativeGasUsed": "21000",
      "fee": "840000000000000",
      "from": {
        "address": "0xf35074bbd0a9aee46f4ea137971feec024ab704e"
      },
      "gasLimit": "50000",
      "gasPrice": "40000000000",
      "gasUsed": "21000",
      "hash": "0x84683c7adbabe359e83c2e8debdcc183cfde347ea93d08aa2b0c4eafe56fa27e",
      "index": 0,
      "input": "0x",
      "logsBloom": "0x00000...",
      "maxFeePerGas": 1000000028,
      "maxPriorityFeePerGas": 1000000000,
      "nonce": "1687",
      "publicKey": "",
      "r": "0xde65988d4a3f8c009a7e621d50de0232b3c30cbaa39b2f56153fb6438573584a",
      "raw": "",
      "root": "",
      "s": "0x50624dcd0a0b498bb9065e766f7383232063105095275fdee78f97df2ca389f0",
      "status": "0x1",
      "timestamp": "2019-02-28T19:52:04.000Z",
      "to": [
        {
          "address": "0x762c51861d03dc7c367086bbe46d3da8f6f41309"
        }
      ],
      "type": 2,
      "v": "38",
      "value": "6083426500000000000",
      "statusResult": {
        "code": "0x1",
        "confirmed": true,
        "success": true,
        "name": "successful"
      }
      }
      ]
    All_transactions:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "records": [
            {
                "blockchainId": "1c9c969065fcd1cf",
                "blockNumber": "13665983",
                "blockHash": "0x73e38f34a5441270e0c3067e22ba7b45f03658b4185847768931655a632634bf",
                "confirmations": "0",
                "contractAddress": "null",
                "cumulativeGasUsed": "21000",
                "fee": "3168807372759000",
                "from": [
                    {
                        "address": "0x4d846da8257bb0ebd164eff513dff0f0c2c3c0ba"
                    }
                ],
                "gasLimit": "50000",
                "gasPrice": "150895589179",
                "gasUsed": "21000",
                "hash": "0x5f43bc936ed34bdb8a3fa135d2655798bc76d3afa919dcffa7a48bc081f099b6",
                "index": 0,
                "input": "0x",
                "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "maxFeePerGas": null,
                "maxPriorityFeePerGas": null,
                "nonce": "211839",
                "publicKey": "",
                "r": "0x24550a1065fe5138b57468c25e572da54da1242ef6f0177c674e2a9b5a33055e",
                "raw": "",
                "root": "",
                "s": "0xb35a7a2302373be3d77b68513634dac6ec9e5e925553a90a9f2787a1d416956",
                "status": "0x1",
                "timestamp": "2021-11-22T18:08:28.000Z",
                "to": [
                    {
                        "address": "0xb260282a9357e6b831598c7b97a95bb008c59254"
                    }
                ],
                "type": 0,
                "v": "38",
                "value": "2706657959154295",
                "statusResult": {
                    "code": "0x1",
                    "confirmed": true,
                    "success": true,
                    "name": "successful"
                },
                "price": {
                    "value": {
                        "currency": "usd",
                        "quote": "4211.21593913",
                        "total": "11.39832114"
                    }
                }
            }
        ]
          }
    Transaction:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "blockNumber": "7984429",
        "confirmations": "1",
        "contractAddress": "null",
        "cumulativeGasUsed": "21000",
        "fee": "861000000000000",
        "from": {
          "address": "0xdb725da5de68db403de513936050da2a4a743185"
         },
        "gasLimit": "21000",
        "gasPrice": "41000000000",
        "gasUsed": "21000",
        "hash": "0xd0a5a0912fdf87993b3cebd696f1ee667a8fbbe8fc890a22dcbdf114f36de4cf",
        "index": 0,
        "input": "0x",
        "logsBloom": "0x0000...",
        "maxFeePerGas": 1000000028,
        "maxPriorityFeePerGas": 1000000000,
        "nonce": "2337",
        "publicKey": "",
        "r": "0xbe443c97cdb4f923d9557bd84b538da10ad171b2748c5670f165e9beba8b0bdd",
        "raw": "",
        "root": "",
        "s": "0x656cae3d42798a3460917cfbab6a3cf28b1776373ad2107560dc9eb77bb4ac5e",
        "status": "0x1",
        "timestamp": "2019-06-18T20:23:14.000Z",
        "to": [{
        "address": "0x4929d4a08be7d47081b56a7cd020ba34a629895b"
        }],
        "type": 2,
        "v": "27",
        "value": "4000000000000000",
        "statusResult": {
        "code": "0x1",
        "confirmed": true,
        "success": true,
        "name": "successful"
        }
         }
    Percentiles:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "percentile_000": 0,
        "percentile_001": 0,
        "percentile_002": 0,
        "percentile_003": 120000000,
        "percentile_004": 194000000,
        "percentile_005": 215833258.75,
        "percentile_010": 500000000,
        "percentile_015": 760750000,
        "percentile_020": 1000000000,
        "percentile_025": 1000000000,
        "percentile_030": 1000000000,
        "percentile_035": 1000000000,
        "percentile_040": 1000000000,
        "percentile_045": 1000000000,
        "percentile_050": 1000000000,
        "percentile_055": 1000000001,
        "percentile_060": 2000000000,
        "percentile_065": 2000000000,
        "percentile_070": 2000000000,
        "percentile_075": 2000000000,
        "percentile_080": 2000000000,
        "percentile_085": 3000000000,
        "percentile_090": 3000000000,
        "percentile_095": 5125000001.75,
        "percentile_096": 10000000000,
        "percentile_097": 10000000000,
        "percentile_098": 20000000000,
        "percentile_099": 20000000000,
        "percentile_100": 20000000000
       }
    Predictions:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "average": {
            "gasPrice": 2000000000,
            "numBlocks": 4,
            "wait": 0.8
        },
        "fast": {
            "gasPrice": 3000000000,
            "numBlocks": 3,
            "wait": 0.5
        },
        "fastest": {
            "gasPrice": 20000000000,
            "numBlocks": 2,
            "wait": 0.4
        },
        "safeLow": {
            "gasPrice": 1000000000,
            "numBlocks": 26,
            "wait": 5.7
        }
     }
    Latest_transaction:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "timestamp": "2020-03-30T22:42:38.000Z",
        "feesAverage": "628993184124405.1129",
        "feesAverageUSD": "0.08450460529392970212339",
        "feesTotal": "452106462898571658260",
        "feesTotalUSD": "60740.0511839602037209467",
        "feesUnit": "wei",
        "transactionsTotal": "718778",
        "valueAverage": "2272008809311800328",
        "valueAverageUSD": "305.2421115222310585047",
        "valueTotal": "1633069947939517216169913",
        "valueTotalUSD": "219401314.435726198452384",
        "valueUnit": "wei",
        "functionsTotal": "2040068", # //Account Based Blockchains
        "gasPriceAverage": "14525559370.27676717",
        "inputsAverage": "2.4412388182636623",# // UTXO Based Blockchains
        "inputsTotal": "764679",
        "outputsAverage": "2.6515703914645281",
        "outputsTotal": "830562"
         }
    Historical_transaction:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
       "records": [
         {
        "timestamp": "2020-04-23T08:00:00.000Z",# Account Based Blockchains
        "feesAverage": "844121004071498.4056",
        "feesAverageUSD": "0.151889023170115245149375",
        "feesTotal": "31960953577159144131",
        "feesTotalUSD": "5750.97408429007349149375",
        "functionsTotal": "84574",
        "gasPriceAverage": "15696739460.78276946",
        "transactionsTotal": "37863",
        "valueAverage": "1601035531190042501",
        "valueAverageUSD": "288.08633089350827234375",
        "valueTotal": "60620008317448579233609",
        "valueTotalUSD": "10907812.7466209036838125"
      },
      {
        "timestamp": "2020-04-23T08:00:00.000Z",# UTXO Based Blockchains
        "feesAverage": "9210.8852016628984027",
        "feesAverageUSD": "0.650848977601922",
        "feesTotal": "126290447",
        "feesTotalUSD": "8923.79033189995",
        "inputsAverage": "3.4914302384946393",
        "inputsTotal": "47871",
        "outputsAverage": "2.5359200641820436",
        "outputsTotal": "34770",
        "transactionsTotal": "13711",
        "valueAverage": "293836458.02822551",
        "valueAverageUSD": "20762.7338852637",
        "valueTotal": "4028791676025",
        "valueTotalUSD": "284677844.300851"
      },
      ...
      ],
      "totalRecords": 744
      }
    Volumes:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "data": [
            [
                1550757600000,
                24759
            ],
            [
                1550761200000,
                21169
            ],
            [
                1550764800000,
                21561
            ],
            [
                1550768400000,
                21196
            ],
            [
                1550772000000,
                21914
            ]
        ],
        "metadata": {
            "columns": [
                "timestamp",
                "numTransactions"
            ],
            "endDate": 1550772000000,
            "startDate": 1550757600000
        }
      }
    Transfer_transactions:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
      {
      "amount": "2162000000000000000000",
      "from": "0x8424a963a31b51c33627e52e7e19bbc86c7dcb79",
      "logIndex": 39,
      "to": "0xc12edafbf7bdce4e8897b1c8877398a946db96b2",
      "tokenAddress": "0x514910771af9ca656af840dff83e8264ecf986ca",
      "decimals": "18",
      "name": "ChainLink Token",
      "symbol": "LINK",
      "isERC20": true,
      "isERC721": false,
      "isERC777": false,
      "isERC884": false,
      "isERC998": false
      }
      ]
    All_addresses:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "totalRecords": 50721693,
        "records": [
      {
        "firstBlockNumber": "5703544",
        "creator": null,
        "type": "EOA",
        "firstTransactionHash": "0x457089d994dc565666226758557dc35c9fb05bf89038bb894de86da2a7d35d77",
        "hash": "0xce9af648a831ddf0cd6d05e3fe5787b3c7987246",
        "timestamp": 1527697819000000,
        "blockchainId": "1c9c969065fcd1cf"
      },
      {
        "firstBlockNumber": "5703544",
        "creator": null,
        "type": "EOA",
        "firstTransactionHash": "0xf4311c1fed2e01a6e1c75ba251353a1e61590513a32fe4da524bc43a9024a326",
        "hash": "0x8382a98b7566d6e4139fa9ffd3a9f1fa826c5093",
        "timestamp": 1527697819000000,
        "blockchainId": "1c9c969065fcd1cf"
      }
      ]
      }
    Balance_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "address": {
      "address": "0x06012c8cf97bead5deae237070f9587f8e7a266d"
       },
       "blockchainId": "1c9c969065fcd1cf",
       "blockNumber": "7817499",
       "timestamp": 1558635166000,
       "timestampNanoseconds": 0,
       "value": "59717752721124107170"
       }
    Balance_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
       "data": [
      [
        "0x06012c8cf97bead5deae237070f9587f8e7a266d",
        "7446815",
        1553638828000,
        0,
        "65183168478133965282"
      ],
      [
        "0x06012c8cf97bead5deae237070f9587f8e7a266d",
        "7446812",
        1553638801000,
        0,
        "65191168478133965282"
      ]
      ],
      "metadata": {
      "columns": [
        "address",
        "blockNumber",
        "timestamp",
        "timestampNanoseconds",
        "value"
      ],
      "totalRecords": 1118325
      }
      }
    Balance_tokens:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "0x3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be": {
      "balance": "5.4777658867801856271744e+22", # The current balance of the account.
      "balanceIn": "5.5265160095722306803399618e+25", # Total ETH received by the address
      "balanceOut": "5.5210382436854504947127874e+25", # Total ETH sent by the address.
      "tokens": [
        {
          "address": "0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2", # The token contract address.
          "decimals": 18, # The number of significant digits, per smart contract definition.
          "milliseconds": 1559665587000,
          "name": "Maker",
          "symbol": "MKR",
          "amount": "187720361680000000000", # The total amount of of tokens held by the address.
          "timestamp": 1559665587000, # The time when the account balance was last changed.
          "price": {
            "amount": {
              "currency": "usd",
              "quote": "680.815866247",
              "total": "127803.0006493693442149600000000"
            }
          }
        },
        {...},
        ...
      ]
      }
      }
    Balance_batch:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "1MUz4VMYui5qY1mxUiG8BQ1Luv6tqkvaiL": {
            "balance": "22855627272",
            "price": {
                "balance": {
                    "currency": "usd",
                    "quote": "57218.13564119",
                    "total": "13077563.81413740"
                }
            }
        },
        "1Kr6QSydW9bFQG1mXiPNNu6WpJGmUa9i1g": {
            "balance": "150140633787",
            "price": {
                "balance": {
                    "currency": "usd",
                    "quote": "57218.13564119",
                    "total": "85907671.49278540"
                }
            }
        }
       }
    Addresses_functions:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
       "totalRecords": 14674321,
       "records": [
      {
        "blockNumber": "7280444",
        "depth": 0,
        "error": "",
        "from": "0x09191d18729da57a83a9afc8ace0c8d7d104e118",
        "initialGas": "578408",
        "input": "0x88c2a0bf0000000000000000000000000000000000000000000000000000000000156aba",
        "messageIndex": 2,
        "opcode": "CALL",
        "returnValue": "0x000000000000000000000000000000000000000000000000000000000015b35e",
        "timestamp": 1551391491000,
        "timestampNanoseconds": null,
        "to": [
          "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        ],
        "transactionHash": "0x63e10d5ce03fce3116a19a4d8c1869fd53630f8ff9d8fb16790200af965ba0c2",
        "value": "0",
        "optionalProperties": null,
        "blockchainId": "1c9c969065fcd1cf"
      }
     ]
     }
    Address_logs:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "totalRecords": 6448870,
        "records": [
      {
        "removed": false,
        "logIndex": "230",
        "transactionIndex": "62",
        "transactionHash": "0x3c0abea77f9324b565696e51a6e7109a10fe320e985963b869105ce6e8db20f7",
        "blockHash": "0xa3f99da4a3871dbc8778a1fcb3a715ddbee89bfe3762eb6d1b624d4312e37757",
        "blockNumber": "7280571",
        "address": "0x06012c8cf97bead5deae237070f9587f8e7a266d",
        "data": [
          "00000000000000000000000012b353d1a2842d2272ab5a18c6814d69f4296873",
          "0000000000000000000000000000000000000000000000000000000000159353",
          "000000000000000000000000000000000000000000000000000000000015ab30",
          "00000000000000000000000000000000000000000000000000000000006f18ab"
        ],
        "dataSize": 258,
        "timestamp": 1551393570000,
        "timestampNanoseconds": 0,
        "topics": [
          "0x241ea03ca20251805084d27d4440371c34a0b85ff108f6bb5611248f73818b80"
        ],
        "blockchainId": "1c9c969065fcd1cf"
      }
      ]
      }
    Addresses_converter:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
       "isCashAddress"   : false,
       "isLegacyAddress" : true,
       "cashAddress"     : "bitcoincash:pp8xkgfvyjhkdkta0awjx7ud7qmnwd0rvy5vdtxqnv",
       "legacyAddress"   : "38qexzy1jDZ49RgPAeaDqVdys6xhyZk1N2"
       }
    Addresses_information:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "balance": "69498477186533922505",
        "balanceIn": "2.7938614849190848921864e+22",
        "balanceOut": "2.7869116372004314999359e+22",
        "addressType": "contract",
        "contractTypes": [
            "ERC721"
        ],
        "decimals": "0",
        "name": "CryptoKitties",
        "numHolders": "73880",
        "numTokens": "1512179",
        "numTransfers": "1557375",
        "symbol": "CK",
        "totalSupply": "1512179.0000000000000000",
        "totalValueUSD": null,
        "unitValueUSD": null
        }
    Address_statistics:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "firstSeen": "2017-11-23T05:41:19.000Z",
            "type": "contract",
            "contractTypes": [
                "ERC721"
            ],
            "probability": 1,
            "network": {
                "blockchainId": "1c9c969065fcd1cf",
                "link": "https://amberdata.io/addresses/0x06012c8cf97bead5deae237070f9587f8e7a266d"
            }
            },
            {
            "firstSeen": "2017-12-05T06:56:08.000Z",
            "type": "address",
            "contractTypes": [
                "Unknown"
            ],
            "probability": 0,
            "network": {
                "blockchainId": "1b3f7a72b3e99c13",
                "link": "https://amberdata.io/addresses/0x06012c8cf97bead5deae237070f9587f8e7a266d"
            }
            }
            ]
    Addresses_extended:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "metadata": {
            "type": "ypub",
            "rootPath": "m/0/0/0",
            "start": 0,
            "end": 100
            },
           "data": [
            {
                "path": "m/0/0/0",
                "address": "39At1aD71SRwr9FbdUMYDdTXyaxAh2vemG"
            },
            {
                "path": "m/0/0/1",
                "address": "35HcnGKMqs1MQBdaJbs6h8XypzNFS8f6i9"
            },
            {
                "path": "m/0/0/2",
                "address": "3BN8amutYVRo3F6EvrPjERDB8zZGsuEzBL"
            },
            ...
        ]
        }
    Addresses_mempool:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "records": [{
        "from": {
          "address": "1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY"
        },
        "gas": null,
        "hash": "6cb3aae7132f535f7d8aaec9a224aa3a97b241bcf4d8160fb33830619b68a909",
        "timestamp": "2020-01-09T10:29:43.151Z",
        "to": [{
          "address": "1KGG9kvV5zXiqyQAMfY32sGt9eFLMmgpgX,1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY"
        }],
        "value": "1249996359",
        "inputs": [{
          "addresses": [
            "1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY"
          ],
          "index": 0,
          "meta": "{}",
          "requiredSignatures": 1,
          "scriptAsm": "3045022100f1aeb3c344f6d3b1fb9f4b48ad6efab20a2330931c5457efc217e814d005ee0202205063945dbe620b2e6e2bf82606af0fe35f8e34281cdf46295b8338f9119cd420[ALL] 04e7e8eeb1d060e2ae611e2e6253b7948d7c02b7ea7c2dce09d939225a5c39d86553b07acf5073b1dc1e432cdf574d587b2800e0c3d4e43fcb3a1f84bfdf602a1e",
          "scriptHex": "483045022100f1aeb3c344f6d3b1fb9f4b48ad6efab20a2330931c5457efc217e814d005ee0202205063945dbe620b2e6e2bf82606af0fe35f8e34281cdf46295b8338f9119cd420014104e7e8eeb1d060e2ae611e2e6253b7948d7c02b7ea7c2dce09d939225a5c39d86553b07acf5073b1dc1e432cdf574d587b2800e0c3d4e43fcb3a1f84bfdf602a1e",
          "sequence": 4294967294,
          "spentOutputIndex": 0,
          "spentTransactionHash": "41b11259c1f78d0b8528ccae9878fe1f596b70ecdacdeb3e4ba143510fd7dae9",
          "timestamp": "2020-01-09T10:29:43.16",
          "timestampNanoseconds": 0,
          "transactionHash": "6cb3aae7132f535f7d8aaec9a224aa3a97b241bcf4d8160fb33830619b68a909",
          "type": "pubkeyhash",
          "value": 1250000000
        }],
        "outputs": [{
            "addresses": [
              "1KGG9kvV5zXiqyQAMfY32sGt9eFLMmgpgX"
            ],
            "index": 0,
            "meta": null,
            "requiredSignatures": 1,
            "scriptAsm": "OP_DUP OP_HASH160 c85526a428126c00ad071b56341a5a553a5e96a3 OP_EQUALVERIFY OP_CHECKSIG",
            "scriptHex": "76a914c85526a428126c00ad071b56341a5a553a5e96a388ac",
            "timestamp": "2020-01-09T10:29:43.162",
            "timestampNanoseconds": 0,
            "transactionHash": "6cb3aae7132f535f7d8aaec9a224aa3a97b241bcf4d8160fb33830619b68a909",
            "type": "pubkeyhash",
            "value": 1000000000
          },
          {
            "addresses": [
              "1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY"
            ],
            "index": 1,
            "meta": null,
            "requiredSignatures": 1,
            "scriptAsm": "OP_DUP OP_HASH160 c825a1ecf2a6830c4401620c3a16f1995057c2ab OP_EQUALVERIFY OP_CHECKSIG",
            "scriptHex": "76a914c825a1ecf2a6830c4401620c3a16f1995057c2ab88ac",
            "timestamp": "2020-01-09T10:29:43.162",
            "timestampNanoseconds": 0,
            "transactionHash": "6cb3aae7132f535f7d8aaec9a224aa3a97b241bcf4d8160fb33830619b68a909",
            "type": "pubkeyhash",
            "value": 249996359
          }
        ],
        "price": {
          "value": {
            "currency": "usd",
            "quote": "7917.3490000000000000",
            "total": "98966.5742293229"
          }
        }
      },
      ...
      ]
      }
    Addresses_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "activeTotal": "281181", # The total number of addresses for the specified time window
        "activeAverage": "11715.875000000000" # The average number of addresses for the specified time window
        }
    Addresses_adoptions:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": { # The metadata associated with the address adoption data.
      "columns": [
        "timestamp", # The timestamp associated with this record.
        "adoption"
      ],
      "startDate": 1551139200000,
      "endDate": 1552003200000
      },
      "data": [ # The historical address adoption data.
      [
        1551139200000,
        "30"
      ],
      ...
      ]
      }
    Addresses_usage:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "columns": [
        "timestamp",
        "usage"
      ],
      "startDate": 1552083600000,
      "endDate": 1552087200000
      },
      "data": [
      [
        1552083600000,
        "28"
      ],
      ...
      ]
      }
    Addresses_balances:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
     "records": [{
        "address": "0xfa6f7881e52fdf912c4a285d78a3141b089ce859",
        "holder": "0x06012c8cf97bead5deae237070f9587f8e7a266d",
        "amount": "100000100000000000000000000",
        "decimals": "18",
        "name": "Avocado",
        "symbol": "AVO",
        "isERC20": true,
        "isERC721": false,
        "isERC777": false,
        "isERC884": false,
        "isERC998": false
      },
      {
        "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
        "holder": "0x06012c8cf97bead5deae237070f9587f8e7a266d",
        "amount": "0",
        "decimals": "18",
        "name": "Wrapped Ether",
        "symbol": "WETH",
        "isERC20": true,
        "isERC721": false,
        "isERC777": false,
        "isERC884": false,
        "isERC998": false,
        "price": {
          "amount": {
            "currency": "usd",
            "quote": "233.901383764",
            "total": "0.000000000000000000000000000000000000000000000"
          }
        }
      },
      ],
      "totalRecords": "82"
      }
    Addresses_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "totalRecords": 804219,
        "records": [
      {
        "blockchainId": "1c9c969065fcd1cf",
        "amount": "1341",
        "address": "0x06012c8cf97bead5deae237070f9587f8e7a266d",
        "holder": "0xbae25a69a6eb7341ee834be7635e247e22a1e57a",
        "decimals": "0",
        "name": "CryptoKitties",
        "symbol": "CK",
        "isERC20": false,
        "isERC721": true,
        "isERC777": false,
        "isERC884": false,
        "isERC998": false
      }
      ]
      }
    Addresses_transfers:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "totalRecords": 69918,
        "records": [
      {
        "transactionHash": "0x281d6478dee6d20da7e9293991cc68085532a915760f23d77ffa9923edb523de",
        "blockHash": "0x5b24ad74b3b6b7adb83e0ba4996726db5b91392a925bb54462c1d9833e921a4f",
        "blockNumber": "7252428",
        "tokenAddress": "0x26fb86579e371c7aedc461b2ddef0a8628c93d3b",
        "amount": "20000000000000000000",
        "timestamp": 1550825454000,
        "timestampNanoseconds": 0,
        "logIndex": 163,
        "blockchainId": "1c9c969065fcd1cf",
        "to": [
          "0x06012c8cf97bead5deae237070f9587f8e7a266d"
        ],
        "from": "0x41efb7f2fa8e27a5c089082e8a61f15f748f7e0b",
        "decimals": "18",
        "name": "BORA",
        "symbol": "BORA",
        "isERC20": true,
        "isERC721": false,
        "isERC777": false,
        "isERC884": false,
        "isERC998": false
      }
      ]
      }
    Addresses_transactions:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "records": [
      {
        "blockchainId": "1c9c969065fcd1cf",
        "blockNumber": "5703560",
        "confirmations": "2280417",
        "contractAddress": "null",
        "cumulativeGasUsed": "6348961",
        "fee": "563675000000000",
        "from": {
          "address": "0xce9af648a831ddf0cd6d05e3fe5787b3c7987246"
        },
        "gasLimit": "53000",
        "gasPrice": "25000000000",
        "gasUsed": "22547",
        "hash": "0xd0c6d02f93f77996823d76a5e012d0108192b1d9f9bce7f4297c3247dc5e753b",
        "index": 121,
        "input": "0xa9059cbb0...",
        "logsBloom": "0x000000...",
        "maxFeePerGas": 1000000028,
        "maxPriorityFeePerGas": 1000000000,
        "nonce": "504404",
        "publicKey": "null",
        "r": "0x7dd79c36a2c7b488d055222d07eff80d9e0fd6983e21a19d9e0770142e5d8350",
        "raw": "null",
        "root": "null",
        "s": "0x426e3fcd93bf5bd20878a9f6ffca9f0f8875e988f3ad0fa6caf95493f592a617",
        "status": "0x1",
        "timestamp": "2018-05-30T16:35:27.000Z",
        "to": [
          {
            "icon": "https://cdn.amberdata.io/images/tokens/0xf85feea2fdd81d51177f6b8f35f0e6734ce45f5f.png",
            "address": "0xf85feea2fdd81d51177f6b8f35f0e6734ce45f5f"
          }
        ],
        "type": 2,
        "v": "27",
        "value": "0",
        "statusResult": {
          "code": "0x1",
          "confirmed": true,
          "success": true,
          "name": "successful"
        }
      }
      ]
      }
    Contracts_details:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "abi": [
            {
                "constant": true,
                "inputs": [
                    { "name": "_interfaceID", "type": "bytes4" }
                ],
                "name": "supportsInterface",
                "outputs": [
                    { "name": "", "type": "bool" }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
          {...},
          {...},
        ],
        "bytecode": "...",
        "contractName": "CryptoKitties",
        "source": "pragma solidity ^0.4.11;\n\n\n..."
        }
    Contracts_functions:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
        {
            "inputs": [
                {
                    "name": "function_selector",
                    "type": "uint256"
                }
            ],
            "name": "__function_selector__",
            "textSignature": "__function_selector__(uint256)",
            "type": "function"
        },
        {
            "hexadecimalSignature": "0x19e44e32",
            "inputs": [],
            "name": "0x19e44e32",
            "textSignature": "0x19e44e32()",
            "type": "function"
        },
        {
            "hexadecimalSignature": "0x1d972d41",
            "inputs": [
                {
                    "name": "varg0",
                    "type": "uint256"
                }
            ],
            "name": "0x1d972d41",
            "textSignature": "0x1d972d41(uint256)",
            "type": "function"
        },
        {
            "fullHexadecimalSignature": "0xb00606a57d6de576f6553f2e6ff6889ed47c7ae6a1fd8ca906ce58619ee74c37",
            "hexadecimalSignature": "0xb00606a5",
            "inputs": [
                {
                    "name": "varg0",
                    "type": "bytes32"
                },
                {
                    "name": "varg1",
                    "type": "uint8"
                },
                {
                    "name": "varg2",
                    "type": "bytes32"
                },
                {
                    "name": "varg3",
                    "type": "bytes32"
                }
            ],
            "name": "confirm",
            "textSignature": "confirm(bytes32,uint8,bytes32,bytes32)",
            "type": "function"
        },
        {
            "hexadecimalSignature": "0xba3ae0ce",
            "inputs": [
                {
                    "name": "varg0",
                    "type": "uint256"
                }
            ],
            "name": "0xba3ae0ce",
            "textSignature": "0xba3ae0ce(uint256)",
            "type": "function"
        },
        {
            "fullHexadecimalSignature": "0xda95ebf77fb86bf02e9d4d3bf7c2c0b3b9d55d6cbf46fc5e8b50bc49d4e46c78",
            "hexadecimalSignature": "0xda95ebf7",
            "inputs": [
                {
                    "name": "varg0",
                    "type": "address"
                },
                {
                    "name": "varg1",
                    "type": "uint256"
                }
            ],
            "name": "requestWithdrawal",
            "textSignature": "requestWithdrawal(address,uint256)",
            "type": "function"
        }
        ]
    Contracts_signatures:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
        {
            "textSignature": "createSaleAuction(uint256,uint256,uint256,uint256)",
            "hexadecimalSignature": "0x3d7d3f5a",
            "numParameters": 4,
            "fullHexadecimalSignature": "0x3d7d3f5ab1b3b4946cf6ce26758c354d9eb67adf6a0432ce7ec60ddc563202e4"
        }
        ]
    Lending_information:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "protocolId": "aave_v2",
           "address": "0xe41d2489571d322189246dafa5ebde1f4699f498",
           "decimals": "18",
           "protocolChainId": "ethereum",
           "protocolName": "aave",
           "protocolVersion": "v2",
           "symbol": "zrx",
           "startDate": "2021-02-26T06:00:00.000Z",
           "endDate": "2021-03-22T23:00:00.000Z"
           },
        ]
    Lending_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
        {
            "protocolId": "cream_v1",
            "protocolName": "c.r.e.a.m. finance",
            "symbol": "bond",
            "address": "0x0391d2021f89dc339f60fff84546ea23e337750f",
            "lend": "3.923599664131272",
            "borrow": "11.99269313381408",
            "borrowStable": null,
            "debtTotal": null,
            "supply": "958.114471688707718403",
            "tvl": "99664131272.9723482309"
        }
        ]
    Lending_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "metadata": {
            "columns": [
                "protocolId",
                "address",
                "timestamp",
                "lend",
                "borrow",
                "borrowStable",
                "debtTotal",
                "supply",
                "tvl"
            ],
            "startDate": 1626307200000,
            "endDate": 1628812800000
        },
        "data": {
            [
                "cream_v1",
                "0x0391d2021f89dc339f60fff84546ea23e337750f",
                1628805600000,
                "4.326982866856066",
                "12.617551105974112",
                null,
                null,
                "1004.405882401497546928",
                "99664131272.9723482309"
            ],
            ...
        }
        }
    Liquidity_information:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "curvev1": {
      "RC_bBADGER_5_DAI_2021_6_30_3Crv": {},
      "RC_WETH_1400_DAI_2021_7_31_3Crv": {},
      "RC_BDI_150_DAI_2021_6_30_3Crv": {},
      "ycDAI_ycUSDC_ycUSDT_PAX": {},
      "MBTC_crvRenWSBTC": {},
      "BBTC_crvRenWSBTC": {},
      "RC_DEFI5_60_DAI_2021_5_31_3Crv": {},
      "xCOVER_3Crv": {},
      "EURS_sEUR": {},
      "USDN_3Crv": {},
      ...
      },
      ...
      }
    Liquidity_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "exchange": "Miniswap",
            "exchangeId": "0x2294577031f113df4782b881cf0b140e94209a6f",
            "pairAddress": "0x2da3c570eb567db1945ac119103978f28f6ea803",
            "pair": "MINI_USDT",
            "startDate": NULL,
            "endDate": NULL,
            "baseAddress": "0x4d953cf077c0c95ba090226e59a18fcf97db44ec",
            "baseName": "MINISWAP",
            "baseSymbol": "MINI",
            "baseDecimals": "18",
            "quoteAddress": "0xdac17f958d2ee523a2206206994597c13d831ec7",
            "quoteName": "Tether USD",
            "quoteSymbol": "USDT",
            "quoteDecimals": "6",
            "blockchainNetworkId": "1",
            "blockchainId": "1c9c969065fcd1cf",
            "poolAddresses": [],
            "pairName": NULL,
            "poolNames": [
            "MINISWAP",
            "Tether USD"
           ],
            "poolSymbols": [
            "MINI",
            "USDT"
           ],
            "poolDecimals": [
            18,
            6
            ],
            "poolUnderlyingAddresses": NULL,
            "poolUnderlyingNames": NULL,
            "poolUnderlyingSymbols": NULL,
            "poolUnderlyingDecimals": NULL
           },
        ]
    Liquidity_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "dexPairs": {
        "exchangeId": "0x9deb29c9a4c7a88a3c0257393b7f3335338d9a9d",
        "exchangeName": "",
        "pairAddress": "0x60a26d69263ef43e9a68964ba141263f19d71d51",
        "pair": "DAI_WETH",
        "pairNormalized": "dai_weth",
        "baseAddress": "0x6b175474e89094c44da98b954eedeac495271d0f",
        "quoteAddress": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
      },
      "startDate": "2019-12-10T23:42:25.997Z",
      "endDate": "2020-12-10T23:42:25.997Z"
      },
      "data": [
      {
        "exchangeId": "0x9deb29c9a4c7a88a3c0257393b7f3335338d9a9d",
        "pairAddress": "0x60a26d69263ef43e9a68964ba141263f19d71d51",
        "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
        "timestamp": 1629912617000,
        "transactionHash": "0x6484f3e97fc01910ab717e1c7f6fcaaf59b8032feff95c099338ff6f59ce1be7",
        "transactionIndex": 87,
        "logIndex": 120,
        "amount": "1411611.324297957739394798",
        "liquidityPrice": "0.00031220437746571611",
      },
      ...
      ]
      }
    Ohlcv_information:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
       "uniswapv2": {
      ...
       },
       "0x7a31c8fd5ced2bd6157b9c2dc345ffd680004e9b": {
      ...
      },
      "curvev1": {
        "BBTC_crvRenWSBTC": {
            "pairSymbol": "BBTC+crvRenWSBTC",
            "address": "0x071c661b4deefb59e2a3ddb20db036821eee8f4b",
            "baseAddress": "0x9be89d2a4cd102d8fecc6bf9da793be995c22541",
            "baseName": "Binance Wrapped BTC",
            "baseSymbol": "BBTC",
            "baseDecimals": "8",
            "quoteAddress": "0x075b1bb99792c9e1041ba13afef80c91a1e70fb3",
            "quoteName": "Curve.fi renBTC/wBTC/sBTC",
            "quoteSymbol": "crvRenWSBTC",
            "quoteDecimals": "18",
            "blockchainNetworkId": "1",
            "blockchainId": "1c9c969065fcd1cf",
            "poolAddresses": [
                "0x9be89d2a4cd102d8fecc6bf9da793be995c22541",
                "0x075b1bb99792c9e1041ba13afef80c91a1e70fb3"
            ],
            "pairName": "bbtc",
            "poolNames": [
                "Binance Wrapped BTC",
                "Curve.fi renBTC/wBTC/sBTC"
            ],
            "poolSymbols": [
                "BBTC",
                "crvRenWSBTC"
            ],
            "poolDecimals": [
                8,
                18
            ],
            "poolUnderlyingAddresses": [
                "0x9be89d2a4cd102d8fecc6bf9da793be995c22541",
                "0xeb4c2781e4eba804ce9a9803c67d0893436bb27d",
                "0x2260fac5e5542a773aa44fbcfedf7c193bc2c599",
                "0xfe18be6b3bd88a2d2a7f928d00292e7a9963cfc6"
            ],
            "poolUnderlyingNames": [
                "Binance Wrapped BTC",
                "renBTC",
                "Wrapped BTC",
                "Synth sBTC"
            ],
            "poolUnderlyingSymbols": [
                "BBTC",
                "renBTC",
                "WBTC",
                "sBTC"
            ],
            "poolUnderlyingDecimals": [
                8,
                8,
                8,
                18
            ]
            },
         },
          ...
        }
    Ohlcv_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7": {
      "exchangeName": "curvev1",
      "exchangeId": "0x90e00ace148ca3b23ac1bc8c240c2a7dd9c2d7f5",
      "pair": "DAI+USDC+USDT",
      "pairAddress": "0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7",
      "baseAddress": "0x6b175474e89094c44da98b954eedeac495271d0f",
      "baseCurrencyAddress": null,
      "baseName": "Dai Stablecoin",
      "baseSymbol": "DAI",
      "baseDecimals": "18",
      "quoteAddress": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
      "quoteCurrencyAddress": null,
      "quoteName": "USD Coin",
      "quoteSymbol": "USDC",
      "quoteDecimals": "6",
      "blockchainNetworkId": "1",
      "blockchainId": "1c9c969065fcd1cf",
      "timestamp": 1629309840000,
      "index": null,
      "poolAddresses": [
          "0x6b175474e89094c44da98b954eedeac495271d0f",
          "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
          "0xdac17f958d2ee523a2206206994597c13d831ec7"
      ],
      "pairName": "3pool",
      "poolNames": [
          "Dai Stablecoin",
          "USD Coin",
          "Tether USD"
      ],
      "poolSymbols": [
          "DAI",
          "USDC",
          "USDT"
      ],
      "poolDecimals": [
          18,
          6,
          6
      ],
      "poolUnderlyingAddresses": [
          "0x6b175474e89094c44da98b954eedeac495271d0f",
          "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
          "0xdac17f958d2ee523a2206206994597c13d831ec7"
      ],
      "poolUnderlyingNames": [
          "Dai Stablecoin",
          "USD Coin",
          "Tether USD"
      ],
      "poolUnderlyingSymbols": [
          "DAI",
          "USDC",
          "USDT"
      ],
      "poolUnderlyingDecimals": [
          18,
          6,
          6
      ],
      "pairNormalized": "dai_usdc_usdt",
      "milliseconds": 1629309840000,
      "open": "9.99160704695092935265e+23",
      "high": "9.99160704695092935265e+23",
      "low": "9.99160704695092935265e+23",
      "close": "9.99160704695092935265e+23",
      "volume": "24979017617377323.381625",
      "trades": 1
      },
      }
    Ohlcv_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "columns": [
        "timestamp",
        "open",
        "high",
        "low",
        "close",
        "volume",
        "trades",
        "exchangeId",
        "pairAddress",
        "baseAddress",
        "quoteAddress"
      ],
      "startDate": "2019-12-10T23:42:25.997Z",
      "endDate": "2020-12-10T23:42:25.997Z"
      },
      "data": {
      "0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7": [
        [
            1628899200000,
            "0.999997282875",
            "9.9938614483120546973564257535254528938990082e+23",
            "0.999997282875",
            "0.999997282875",
            "14737935834390532424.797914",
            "187",
            "0x90e00ace148ca3b23ac1bc8c240c2a7dd9c2d7f5",
            "0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7",
            "0x6b175474e89094c44da98b954eedeac495271d0f",
            "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
        ],
        ...
       ]
     }
     }
    Exchanges_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchangeId": "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f", # The id of the exchange.
           "timestamp": "2020-12-29T07:00:00.000Z", # The timestamp associated with this record.
           "liquidityTotalWETH": "696597.309479738872001810", # Total liquidity of the exchange (aka total value locked), in WETH.
           "liquidityTotalUSD": "493048636.201664275395561830", # Total liquidity of the exchange (aka total value locked), in USD.
           "pairsTradedTotal": 52, # Total number of pairs which were traded during that period of time.
           "pairsCumulativeTotal": 27293, # Total number of unique pairs which were traded since the exchange was created.
           "tradesTotal": 85, # Total number of trades during that period of time.
           }
           ]
    Exchanges_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
          {
          "exchangeId": "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f", # The id of the exchange.
          "timestamp": "2020-12-29T06:00:00.000Z", # The timestamp associated with this record.
          "liquidityTotalWETH": "696597.309479738872001810", # Total liquidity of the exchange (aka total value locked), in WETH.
          "liquidityTotalUSD": "493048636.201664275395561830", # Total liquidity of the exchange (aka total value locked), in USD.
          "pairsTradedTotal": 52, # Total number of pairs which were traded during that period of time.
          "pairsCumulativeTotal": 27293, # Total number of unique pairs which were traded since the exchange was created.
          "tradesTotal": 85, # Total number of trades during that period of time.
          },
          {
          "exchangeId": "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f",
          "timestamp": "2020-12-29T07:00:00.000Z",
          "liquidityTotalWETH": "696597.309479738872001810",
          "liquidityTotalUSD": "493048636.201664275395561830",
          "pairsTradedTotal": 52,
          "pairsCumulativeTotal": 27293,
          "tradesTotal": 85,
          },
        ]
    Assets_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchangeId": "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f", # The id of the exchange.
           "timestamp": "2020-12-29T07:00:00.000Z", # The timestamp associated with this record.
           "liquidityTotalNative": "493048636.201664275395561830", # Total liquidity for the asset (aka total value locked), in native currency.
           "liquidityTotalUSD": "121952471.481071009865993322", # Total liquidity for the asset (aka total value locked), in USD.
           }
           ]
    Assets_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
          {
          "exchangeId": "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f", # The id of the exchange.
          "timestamp": "2020-12-29T06:00:00.000Z", # The timestamp associated with this record.
          "liquidityTotalNative": "493048636.201664275395561830", # Total liquidity for the asset (aka total value locked), in native currency.
          "liquidityTotalUSD": "335.274877053807418927",  # Total liquidity for the asset (aka total value locked), in USD.
          },
          {
          "exchangeId": "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f",
          "timestamp": "2020-12-29T07:00:00.000Z",
          "liquidityTotalNative": "493048636.201664275395561830",
          "liquidityTotalUSD": "335.274877053807418927",
          },
        ]
    Pairs_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchangeId": "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f", # The id of the exchange.
           "timestamp": "2020-12-29T07:00:00.000Z", # The timestamp associated with this record.
           "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
           "feesNative": "1.535162374359281676",
           "feesUSD": "1.537493485860114379",
           "liquidityTotalNative": "79732489.660759360681767727", # Total liquidity for the asset (aka total value locked), in native currency.
           "liquidityTotalUSD": "79853561.754983786842105053", # Total liquidity for the asset (aka total value locked), in USD.
           "pairsTradedTotal": 1, # Total number of pairs which were traded during that period of time.
           "tradesTotal": 11, # Total number of trades during that period of time.
           "priceNative": "0.00061015503280647554", # Price associated with the pair.
           "volumeTotalNative": "511.720791453093891836", # Total volume traded during that period of time, in native currency.
           "volumeTotalUSD": "512.497828620038126212", # Total volume traded during that period of time, in USD.
           }
           ]
    Pairs_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example:  [
           {
           "exchangeId": "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f",
           "timestamp": "2020-12-29T06:00:00.000Z",
           "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
           "feesNative": "143.946130507571397825",
           "feesUSD": "144.013821392561330123",
           "liquidityTotalNative": "103973505.181589129290317518",
           "liquidityTotalUSD": "104022398.879227475227263226",
           "pairsTradedTotal": 1,
           "tradesTotal": 3445,
           "priceNative": "0.00075603290509702245",
           "volumeTotalNative": "47982.043502523799274881",
           "volumeTotalUSD": "48004.607130853776707797",
           },
           {
           "exchangeId": "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f",
           "timestamp": "2020-12-29T06:00:00.000Z",
           "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
           "feesNative": "143.946130507571397825",
           "feesUSD": "144.013821392561330123",
           "liquidityTotalNative": "103973505.181589129290317518",
           "liquidityTotalUSD": "104022398.879227475227263226",
           "pairsTradedTotal": 1,
           "tradesTotal": 3445,
           "priceNative": "0.00075603290509702245",
           "volumeTotalNative": "47982.043502523799274881",
           "volumeTotalUSD": "48004.607130853776707797",
           },
        ]
    Assets_information:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
           "startDate": "2020-05-05T00:00:00.000Z",
           "endDate": "2021-10-05T18:55:00.000Z",
           },
        ]
    Prices_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "timestamp": 1633462380000, # The timestamp at which the price was executed.
      "asset": "0x6b175474e89094c44da98b954eedeac495271d0f", # The asset contract address.
      "price": "0.00029274", # Price associated with the asset.
      "volume": "0.70990788", # The asset trading volume.
      }
    Prices_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "startDate": 1633374914078,
      "endDate": 1633461314078
      },
      "data": [
      {
        "timestamp": 1633462380000, # The timestamp at which the price was executed.
        "asset": "0x6b175474e89094c44da98b954eedeac495271d0f", # The asset contract address.
        "price": "0.00029319", # Price associated with the asset.
        "volume": "0.46585033", # Asset volume traded.
      },
      ]
      }
    Pairs_information:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "baseAddress": "0x0000000000004946c0e9f43f4dee607b0ef1fa1c",
           "quoteAddress": "0x0000000000b3f879cb30fe243b4dfee438691c04",
           "startDate": 1595462400000,
           "endDate": 1614556800000,
           },
        ]
    Bases_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "timestamp": 1615227480000,
      "pair": "DAI_WETH",
      "price": "0.00057554433329796909"
      }
    Base_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "metadata": {
            "columns": [
                "timestamp",
                "pair",
                "price",
                "vwap",
                "volume",
                "baseAddress",
                "baseSymbol",
                "quoteAddress",
                "quoteSymbol"
            ],
            "startDate": 1617653294495,
            "endDate": 1617739694495
        },
        "data": [
            [
                1617653400000, # The timestamp at which the price was executed.
                "DAI_WETH", # The pair ticker name, based on symbols of the assets.
                "0.00047459493472467497", # Price associated with the pair.
                "0.00047435311444498877000000000000000000", # VWAP associated with the pair.
                "178.096701359537022447", # Total volume for candle for a pair.
                "0x6b175474e89094c44da98b954eedeac495271d0f", # Same as passed in parameter
                "DAI", # Symbol of the base asset
                "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", # Same as passed in parameter
                "WETH" # Symbol of the quote asset
            ],
            ...
        ]
        }
    DefiTrades_information:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "curvev1": {
            "BBTC_crvRenWSBTC": {
                "pairSymbol": "BBTC+crvRenWSBTC",
                "address": "0x071c661b4deefb59e2a3ddb20db036821eee8f4b",
                "baseAddress": "0x9be89d2a4cd102d8fecc6bf9da793be995c22541",
                "baseName": "Binance Wrapped BTC",
                "baseSymbol": "BBTC",
                "baseDecimals": "8",
                "quoteAddress": "0x075b1bb99792c9e1041ba13afef80c91a1e70fb3",
                "quoteName": "Curve.fi renBTC/wBTC/sBTC",
                "quoteSymbol": "crvRenWSBTC",
                "quoteDecimals": "18",
                "blockchainNetworkId": "1",
                "blockchainId": "1c9c969065fcd1cf",
                "poolAddresses": [
                    "0x9be89d2a4cd102d8fecc6bf9da793be995c22541",
                    "0x075b1bb99792c9e1041ba13afef80c91a1e70fb3"
                ],
                "pairName": "bbtc",
                "poolNames": [
                    "Binance Wrapped BTC",
                    "Curve.fi renBTC/wBTC/sBTC"
                ],
                "poolSymbols": [
                    "BBTC",
                    "crvRenWSBTC"
                ],
                "poolDecimals": [
                    8,
                    18
                ],
                "poolUnderlyingAddresses": [
                    "0x9be89d2a4cd102d8fecc6bf9da793be995c22541",
                    "0xeb4c2781e4eba804ce9a9803c67d0893436bb27d",
                    "0x2260fac5e5542a773aa44fbcfedf7c193bc2c599",
                    "0xfe18be6b3bd88a2d2a7f928d00292e7a9963cfc6"
                ],
                "poolUnderlyingNames": [
                    "Binance Wrapped BTC",
                    "renBTC",
                    "Wrapped BTC",
                    "Synth sBTC"
                ],
                "poolUnderlyingSymbols": [
                    "BBTC",
                    "renBTC",
                    "WBTC",
                    "sBTC"
                ],
                "poolUnderlyingDecimals": [
                    8,
                    8,
                    8,
                    18
                ]
            },
            },
            ...
            }
    DefiTrades_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "data": [
      [
        "0x90e00ace148ca3b23ac1bc8c240c2a7dd9c2d7f5",
        "2021-08-01T05:07:10.000Z",
        0,
        false,
        9.992128254385849e+23,
        20790717587013860,
        "0x28a7a996a01a6928cd806dbc0b6df7947a9d5e59f8b6f3a823e32e99fb530c9b",
        68,
        "0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7",
        "0.000000020807096404",
        "0",
        "0",
        "20790717587013859.65421",
        "0xea3b329ffd533073e83df0d931ba159719d8bf7c",
        "0x0000000000f4def5f3572c846b1483daf4588d8f"
      ],
      ...
      ],
      "metadata": {
      "columns": [
        "exchange",
        "timestamp",
        "timestampNanoseconds",
        "isBid",
        "price",
        "volume",
        "tradeId",
        "logIndex",
        "pairAddress",
        "amountInBase",
        "amountInQuote",
        "amountOutBase",
        "amountOutQuote",
        "fromAddress",
        "toAddress"
      ],
      "startDate": "2020-12-10T22:38:27.789Z",
      "endDate": "2020-12-10T23:38:27.789Z",
      "dexPairs": {
        "0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7": {
          "exchangeId": "0x90e00ace148ca3b23ac1bc8c240c2a7dd9c2d7f5",
          "pairAddress": "0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7",
          "timestamp": "2021-04-07T23:54:41.000Z",
          "timestampNanoseconds": 0,
          "transactionIndex": 16,
          "updatedAt": "2021-08-01T05:13:08.507Z",
          "pair": "DAI+USDC+USDT",
          "baseAddress": "0x6b175474e89094c44da98b954eedeac495271d0f",
          "baseCurrencyAddress": null,
          "baseName": "Dai Stablecoin",
          "baseSymbol": "DAI",
          "baseDecimals": "18",
          "quoteAddress": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
          "quoteCurrencyAddress": null,
          "quoteName": "USD Coin",
          "quoteSymbol": "USDC",
          "quoteDecimals": "6",
          "blockchainNetworkId": "1",
          "blockchainId": "1c9c969065fcd1cf",
          "index": null,
          "poolAddresses": [
              "0x6b175474e89094c44da98b954eedeac495271d0f",
              "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "0xdac17f958d2ee523a2206206994597c13d831ec7"
          ],
          "pairName": "3pool",
          "poolNames": [
              "Dai Stablecoin",
              "USD Coin",
              "Tether USD"
          ],
          "poolSymbols": [
              "DAI",
              "USDC",
              "USDT"
          ],
          "poolDecimals": [
              18,
              6,
              6
          ],
          "poolUnderlyingAddresses": [
              "0x6b175474e89094c44da98b954eedeac495271d0f",
              "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "0xdac17f958d2ee523a2206206994597c13d831ec7"
          ],
          "poolUnderlyingNames": [
              "Dai Stablecoin",
              "USD Coin",
              "Tether USD"
          ],
          "poolUnderlyingSymbols": [
              "DAI",
              "USDC",
              "USDT"
          ],
          "poolUnderlyingDecimals": [
              18,
              6,
              6
          ],
          "pairNormalized": "dai_usdc_usdt"
        }
      }
      }
      }
    Exchanges_information:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
     "binance": {
      "BCHUSDT": {
        "funding_rate": {
          "startDate": "2020-08-02T00:00:00.000Z",
          "endDate": "2020-12-29T08:00:00.003Z"
        },
        "liquidation_order": {
          "startDate": "2020-07-18T08:58:12.286Z",
          "endDate": "2020-12-29T09:10:48.543Z"
        },
        "long_short_ratio": {
          "startDate": "2020-10-06T00:00:00.000Z",
          "endDate": "2020-12-29T09:25:00.000Z"
        },
        "ohlcv": {
          "startDate": "2019-12-19T08:57:00.000Z",
          "endDate": "2020-12-29T09:28:00.000Z"
        },
        "order_book_event": {
          "startDate": "2020-07-23T06:02:00.000Z",
          "endDate": "2020-12-29T09:29:00.000Z"
        },
        "order_book_snapshot": {
          "startDate": "2020-10-23T06:46:00.000Z",
          "endDate": "2020-12-29T09:29:00.000Z"
        },
        "ticker": {
          "startDate": "2020-11-03T11:21:00.000Z",
          "endDate": "2020-12-29T09:29:00.000Z"
        },
        "trade": {
          "startDate": "2020-10-19T08:30:16.000Z",
          "endDate": "2020-12-29T09:29:23.000Z"
        }
      },
      ...
      },
      ...
      }
    Exchanges_reference:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
     "binance": {
      "1INCHUSDT": {
        "limits": {
          "price": {
            "max": "100000",
            "min": "0.0001"
          },
          "amount": {
            "max": "100000",
            "min": "0.0001"
          },
          "market": {
            "max": "100000",
            "min": "0.0001"
          }
        },
        "precision": {
          "base": "8",
          "quote": "8"
        },
        "expiration": NULL,
        "underlying": "1INCH"
      },
      ...
     },
     ...
     }
    Funding_information:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchange": "binance",
           "instrument": "AAVEUSDT",
           "startDate": "2020-11-03T00:00:00.000Z",
           "endDate": "2020-11-10T00:00:00.000Z"
           },
           {...}
           ]
    Funding_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
     "bitmex": {
      "timestamp": 1598500800000,
      "insertionTimestamp": "2020-08-27T05:00:00.000Z",
      "fundingInterval": "2000-01-01T01:00:00.000Z",
      "fundingRate": 0.0001,
      "fundingRateDaily": 0.0003000000000003
      }
      }
    Funding_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "columns"   : ["timestamp", "insertionTimestamp", "fundingInterval", "fundingRate", "fundingRateDaily"],
      "startDate" : 1598499778860,
      "endDate"   : 1598521378860
      },
      "data": {
      "binance": [
        [1598500800000, "2020-08-27T05:00:00.000Z", "2000-01-01T01:00:00.000Z", 0,0001, 0.00030000000000003],
        [...]
      ]
      }
      }
    Insurance_information:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
          {
           "exchange": "binance",
           "instrument": "AAVEUSDT",
           "underlying": "AAVE",
           "startDate": "2020-11-03T00:00:00.000Z",
           "endDate": "2020-11-10T00:00:00.000Z"
          },
          {...}
         ]
    Insurance_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example:  [
           {
            "exchange": "huobi",
            "instrument": "BTC211008",
            "underlying", "BTC",
            "timestamp": 1609660800000,
            "fund": 4721.219613658744
           }
        ]
    Insurance_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "metadata": {
            "startDate": 1609660800000,
            "endDate": 1609660800000
        },
         "data": [
        {
            "exchange": "huobi",
            "instrument": "BTC211008",
            "underlying": "BTC",
            "timestamp": 1609660800000,
            "fund": 4721.219613658744
        }
        ]
        }
    Liquidations:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "exchange": "binance",
            "instrument": "AAVEUSDT",
            "startDate": "2020-11-03T00:00:00.000Z",
            "endDate": "2020-11-10T00:00:00.000Z"
           },
           {...}
         ]
    Liquidations_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "exchange": "binance",
            "timestamp": "2020-09-04T21:14:48.171Z",
            "originalQuantity": 200,
            "price": 2.831,
            "side": "BUY",
            "status": "FILLED",
            "type": "LIMIT",
            "timeInForce": "IOC"
           }
          ]
    Liquidations_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "startDate": "2020-07-20T00:00:00.000Z",
      "endDate": "2020-07-21T00:00:00.000Z"
      },
      "data": [
      {
        "exchange": "binance",
        "timestamp": "2020-07-20T01:42:26.177Z",
        "originalQuantity": 283.2,
        "price": 2.939,
        "side": "SELL",
        "status": "FILLED",
        "type": "LIMIT",
        "timeInForce": "IOC"
      },
      {...}
      ]
      }
    Ratio:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "exchange": "binance",
            "instrument": "AAVEUSDT",
            "startDate": "2020-11-03T00:00:00.000Z",
            "endDate": "2020-11-10T00:00:00.000Z"
           },
           {...}
         ]
    Ratio_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "exchange": "binance",
            "timestamp": 1602921600000,
            "ratio": 1.3872,
            "longAccount": 0.5811,
            "shortAccount": 0.4189,
            "period": 1
            }
           ]
    Ratio_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "startDate": "2020-07-25T00:00:00.000Z",
      "endDate": "2020-07-26T00:00:00.000Z"
      },
      "data": [
      {
         "exchange": "binance",
         "timestamp": 1602921600000,
         "ratio": 1.3872,
         "longAccount": 0.5811,
         "shortAccount": 0.4189,
         "period": 1
      },
      {...}
      ]
      }
    Futures_information:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "exchange": "binance",
            "instrument": "ADAUSDT",
            "startDate": "2018-04-17T00:00:00.000Z",
            "endDate": "2020-09-04T00:00:00.000Z"
           },
           {...}
           ]
    Futures_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "exchange": "binance",
            "timestamp": "2020-09-04T22:43:00.000Z",
            "open": 2.8395,
            "high": 2.8456,
            "low": 2.8265,
            "close": 2.8387,
            "volume": 22136.31
          }
          ]
    Futures_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "startDate": "2020-07-25T00:00:00.000Z",
      "endDate": "2020-07-26T00:00:00.000Z"
      },
      "data": [
      {
        "exchange": "binance",
        "timestamp": "2020-07-25T00:00:00.000Z",
        "open": 3.0294,
        "high": 3.0331,
        "low": 3.0271,
        "close": 3.0331,
        "volume": 600.27
      },
      {...}
      ]
      }
    OpenInterest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchange": "binance",
           "instrument": "AAVEUSDT",
           "startDate": "2020-11-03T00:00:00.000Z",
           "endDate": "2020-11-10T00:00:00.000Z"
           },
           {...}
           ]
    OpenInterest_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchange": "binance",
           "timestamp": "2020-09-04T20:00:00.000Z",
           "value": 4010015.1
           }
           ]
    OpenInterest_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "startDate" : "2020-08-12T16:54:09.638Z",
      "endDate"   : "2020-08-12T22:54:09.638Z"
      },
      "data": [
      {
        "exchange": "binance",
        "timestamp": "2020-09-04T17:00:00.000Z",
        "value": 3795149.9
      },
      {...}
      ]
      }
    Fut_Order_books:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchange": "binance",
           "instrument": "ADAUSDT",
           "startDate": "2020-07-22T00:00:00.000Z",
           "endDate": "2020-09-04T00:00:00.000Z"
           },
           {
           "exchange": "binance",
           "instrument": "ALGOUSDT",
           "startDate": "2020-07-24T00:00:00.000Z",
           "endDate": "2020-09-04T00:00:00.000Z"
           },
           {...}
           ]
    Fut_Order_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "columns": ["exchange", "timestamp", "timestampNanoseconds", "isBid", "data", "sequence"],
      "startDate": "2020-08-17 06:00:00",
      "endDate": "2020-08-17 07:00:00"
      },
      "data": [
      [
        "binance",
        "2020-08-17 06:03:00",
        NULL,
        false,
        [
          [11800.76, 1.011, 0],
          [11800.96, 1.013, 0],
          [11801,    0.3,   0],
          [11854.61, 0,     0]
        ],
        769590361721
      ],
      [
        "binance",
        "2020-08-17 06:05:00",
        NULL,
        true,
        [
          [11821.2,  0,     0],
          [11821.21, 1.006, 0]
        ],
        769590361721
      ],
      ...
      ]
      }
    Fut_snapshots_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "exchange": "bitmex",
            "instrument": "ADAU20",
            "startDate": "2020-08-10T00:00:00.000Z",
            "endDate": "2020-09-04T00:00:00.000Z"
           },
           {...}
           ]
    Fut_snapshots_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
         "metadata": {
          "columns": ["exchange", "timestamp", "timestampNanoseconds", "isBid", "data", "sequence"],
           "startDate": "2020-08-17 06:00:00",
           "endDate": "2020-08-17 07:00:00"
         },
         "data": [
         [
          "binance",
          "2020-08-17 06:03:00",
          NULL,
          false,
         [
          [11800.76, 1.011, 0],
          [11800.96, 1.013, 0],
          [11801,    0.3,   0],
          [11854.61, 0,     0]
         ],
         769590361721
         ],
         [
         "binance",
         "2020-08-17 06:05:00",
         NULL,
         true,
         [
          [11821.2,  0,     0],
          [11821.21, 1.006, 0]
         ],
         769590361721
         ],
         ...
         ]
         }
    Fut_Tickers_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
          {
           "exchange": "binance",
           "instrument": "AAVEUSDT",
           "startDate": "2020-11-03T00:00:00.000Z",
           "endDate": "2020-11-10T00:00:00.000Z"
          },
          {...}
          ]
    Fut_Tickers_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
          {
            "exchange": "binance",
            "timestamp": 1604994181218,
            "bid": 0.2565,
            "ask": 0.2566,
            "mid": 0.25655,
            "last": 0
          }
          ]
    Fut_Tickers_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
           "metadata": {
              "startDate": 1604401200000,
              "endDate": 1604404740000
            },
           "data": [
               {
                "exchange": "binance",
                "timestamp": 1604402460964,
                "bid": 28.525,
                "ask": 28.558,
                "mid": 28.5415,
                "last": 0
               },
               {
                "exchange": "binance",
                "timestamp": 1604402520833,
                "bid": 28.548,
                "ask": 28.582,
                "mid": 28.565,
                "last": 0
               },
               {
                "exchange": "binance",
                "timestamp": 1604402580830,
                "bid": 28.544,
                "ask": 28.584,
                "mid": 28.564,
                "last": 0
               },
               ]
              }
    Fut_Trades_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example:  [
           {
           "exchange": "binance",
           "instrument": "AAVEUSDT",
           "startDate": "2020-11-03T00:00:00.000Z",
           "endDate": "2020-11-10T00:00:00.000Z"
          },
          {...}
          ]
    Fut_Trades_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
           "data": [
            [
             "bitmex",
             "2020-09-23T14:42:15.004Z",
              0,
             false,
             10476.5,
             13,
             0
             ],
            [...],
             ],
            "metadata": {
              "columns": [
                "exchange",
                "timestamp",
                "timestampNanoseconds",
                "isBuy",
                "price",
                "volume",
                 "tradeId",
             ],
             "startDate": "2020-09-23T14:42:15.702Z",
             "endDate": "2020-09-23T15:42:15.702Z"
             }
             }
    Exchanges:
      type: object
      properties:
        "payload":
          type: object
          example: {
          "bitfinex": {
           "btc_eur": {
            "ticker": {
              "startDate": 1551052800000,
              "endDate": 1554854400000
           },
           "ohlc": {
             "startDate": 1495152000000,
             "endDate": 1554854400000
           },
           "trade": {
             "startDate": 1548979200000,
             "endDate": 1554854400000
            },
            ..
            },
            ..
           }
          }
    Pairs:
      type: object
      properties:
        "payload":
          type: object
          example: {
         "btc_eur": {
           "bitfinex": {
             "ticker": {
               "startDate": 1551052800000,
               "endDate": 1554854400000
             },
             "ohlc": {
               "startDate": 1495152000000,
               "endDate": 1554854400000
             },
             "trade": {
               "startDate": 1548979200000,
               "endDate": 1554854400000
             },
             ..
            },
            ..
           }
          }
    Reference:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
          "binance": {
            "1INCHUSDT": {
              "limits": {
                "price": {
                  "max": "100000",
                  "min": "0.0001"
               },
               "amount": {
                 "max": "100000",
                 "min": "0.0001"
               },
               "market": {
                 "max": "100000",
                 "min": "0.0001"
               }
             },
             "precision": {
               "base": "8",
               "quote": "8"
             },
             "expiration": NULL,
             "underlying": "1INCH"
           },
           ...
          },
          ...
         }
    Assets:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "asset": "18c",
            "startDate": "2019-04-24T12:01:00.000Z",
            "endDate": "2020-09-23T21:49:00.000Z"
           },
           {...}
           ]
    Spot_Assets_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
           "timestamp": "2020-09-11T22:49:00.000Z",
           "asset": "btc",
           "price": "10377.8883",
           "volume": "3.7839",
           "wvap": "10379.5833"
          }
    Spot_Assets_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "timestamp": "2020-09-11T20:17:00.000Z",
           "asset": "btc",
           "price": "10334.1579",
           "volume": "3.7839",
           "vwap": "10332.5029"
           },
           {...}
           ]
    Spot_pairs:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "pair": "18c_btc",
           "startDate": "2019-04-24T12:00:00.000Z",
           "endDate": "2020-09-23T21:00:00.000Z"
           },
           {...}
           ]
    Spot_Pairs_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "timestamp": "2020-09-11T20:41:00.000Z",
      "pair": "btc_usd",
      "price": "10311.5",
      "volume": "0.1212",
      "vwap": "10314.8"
      }
    Spot_Pairs_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "timestamp": "2020-09-11T20:41:00.000Z",
            "pair": "btc_usd",
            "price": "10311.5",
            "volume": "0.1212",
            "vwap": "10315.9"
           },
           {...}
          ]
    Spot_ohlcv_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "binance": {
      "btc_usdt": {
        "address": "0x11111111111123456789abcdefghjkl",
        "startDate": 1502928000000,
        "endDate": 1552003200000
      },
      "eth_usdt": {
        "address": "0x11111111111123456789abcdefghjkl",
        "startDate": 1502928000000,
        "endDate": 1552003200000
      },
      "ltc_usdt": {
        "startDate": 1513123200000,
        "endDate": 1552003200000
      },
      "xrp_usdt": {
        "startDate": 1525392000000,
        "endDate": 1552003200000
      }
      },
      "kraken": {
      ...
      },
      ...
      }
    Spot_ohlcv_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "kraken": {
      "timestamp": "2020-12-10T23:42:00.000Z",
      "open": 1.00366,
      "high": 1.00366,
      "low": 1.00366,
      "close": 1.00366,
      "volume": 67.44801735
      },
      ...
      }
    Spot_ohlcv_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "columns": [
        "timestamp",
        "open",
        "high",
        "low",
        "close",
        "volume",
        "trades",
        "exchangeId",
        "pairAddress",
        "baseAddress",
        "quoteAddress"
      ],
      "startDate": "2019-12-10T23:42:25.997Z",
      "endDate": "2020-12-10T23:42:25.997Z"
      },
      "data": {
      "kraken": [
        [
          "2019-12-10T00:00:00.000Z",
          0.99968,
          0.99968,
          0.99968,
          0.99968,
          0
        ],
        ...
      ],
      ...
      }
      }
    Spot_OrderBooks_events:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "data": [
      [
        "gdax", # exchange
        1583773830061, # timestamp
        505127, # timestampNanoseconds
        false, # isBid,
        [
          [
            7782.67,  # price
            0.01, # volume
            null // numOrders
          ],
          ...
        ],
        1123662827 //sequence
      ],
      ...
      ],
      "metadata": {
      "columns": ["exchange", "timestamp", "timestampNanoseconds", "isBid", "price", "volume", "numOrders", "sequence"],
      "startDate": 1583773200000,
      "endDate": 1583776800000
      }
      }
    Spot_OrderBooks_snapshots:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "columns": [
        "price",
        "volume",
        "numOrders",
        "timestamp"
      ],
      "requestedTimestamp": "2019-03-01T00:00:00.000Z",
      "returnedTimestamp": "2019-03-01T00:00:00.000Z",
      "sequence": 1124096170,
      },
      "data": {
      "ask": [
        [
          3793.81,
          54.99472861,
          9,
          "2019-03-01T00:00:00.000Z"
        ],
        ...
      ],
      "bid": [...]
      }
      }
    Prices_Assets_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "asset": "18c",
           "startDate": "2019-04-24T12:01:00.000Z",
           "endDate": "2020-09-23T21:49:00.000Z"
           },
           {...}
          ]
    Prices_Assets_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
       "timestamp": "2020-09-11T22:49:00.000Z",
       "asset": "btc",
       "price": "10377.8883",
       "volume": "389.1346"
       }
    Prices_Assets_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "timestamp": "2020-09-11T20:17:00.000Z",
           "asset": "btc",
           "price": "10334.1579",
           "volume": "3.7839"
           },
           {...}
          ]
    Prices_Pairs_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "pair": "18c_btc",
           "startDate": "2019-04-24T12:00:00.000Z",
           "endDate": "2020-09-23T21:00:00.000Z"
           },
           {...}
          ]
    Prices_Pairs_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "timestamp": "2020-09-11T20:41:00.000Z",
      "pair": "btc_usd",
      "price": "10311.5",
      "volume": "0.1212"
      }
    Prices_Pairs_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "timestamp": "2020-09-11T20:41:00.000Z",
           "pair": "btc_usd",
           "price": "10311.5",
           "volume": "0.1212"
           },
           {...}
           ]
    Spot_Tickers_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "bitfinex": {
      "btc_eur": {
        "startDate": 1551052800000,
        "endDate": 1551312000000
      },
      "btc_usd": {...},
      "eth_btc": {...},
      "eth_eur": {...},
      "eth_usd": {...},
      "ltc_btc": {...},
      "ltc_usd": {...},
      "xrp_btc": {...},
      "xrp_usd": {...},
     },
     "bitstamp": {...},
     "gdax": {...},
     "gemini": {...},
     "kraken": {...}
     }
    Spot_Tickers_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "bitfinex": {
      "timestamp": 1551398220000,
      "bid": 0.035516,
      "ask": 0.035517,
      "mid": 0.0355165,
      "last": 0.035516
      }
     }
    Spot_Tickers_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "data": {
            "bitfinex": [
                [
                    1551398400000,
                    3893,
                    3893.6,
                    3893.3,
                    3893
                ],
                [
                    1551398460000,
                    3893.1,
                    3893.2,
                    3893.15,
                    3893.1
                ],
                ...
            ],
            ...
        },
        "metadata": {
            "columns": [
                "timestamp",
                "bid",
                "ask",
                "mid",
                "last"
            ],
            "endDate": "1551398700000",
            "startDate": "1551398400000"
        }
        }
    Spot_Trades_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "binance": {
            "adx_bnb": {
                "address": "0x4470bb87d77b963a013db939be332f927f2b992e",
                "endDate": 1560988800000,
                "startDate": 1607558400000
            },
            ...
        },
        ...
        }
    Spot_Trades_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "data": [
      [
        "kraken",
        "2020-12-10T22:47:16.000Z",
        470500,
        false,
        1.0034,
        67.48077314,
        1607640436470500
      ],
      ...
      ],
      "metadata": {
      "columns": [
        "exchange",
        "timestamp",
        "timestampNanoseconds",
        "isBuy",
        "price",
        "volume",
        "tradeId"
      ],
      "startDate": "2020-12-10T22:38:27.789Z",
      "endDate": "2020-12-10T23:38:27.789Z"
      }
      }
    Swaps_Pairs_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "binance": {
      "BCHUSDT": {
        "funding_rate": {
          "startDate": "2020-08-02T00:00:00.000Z",
          "endDate": "2020-12-29T08:00:00.003Z"
        },
        "liquidation_order": {
          "startDate": "2020-07-18T08:58:12.286Z",
          "endDate": "2020-12-29T09:10:48.543Z"
        },
        "long_short_ratio": {
          "startDate": "2020-10-06T00:00:00.000Z",
          "endDate": "2020-12-29T09:25:00.000Z"
        },
        "ohlcv": {
          "startDate": "2019-12-19T08:57:00.000Z",
          "endDate": "2020-12-29T09:28:00.000Z"
        },
        "order_book_event": {
          "startDate": "2020-07-23T06:02:00.000Z",
          "endDate": "2020-12-29T09:29:00.000Z"
        },
        "order_book_snapshot": {
          "startDate": "2020-10-23T06:46:00.000Z",
          "endDate": "2020-12-29T09:29:00.000Z"
        },
        "ticker": {
          "startDate": "2020-11-03T11:21:00.000Z",
          "endDate": "2020-12-29T09:29:00.000Z"
        },
        "trade": {
          "startDate": "2020-10-19T08:30:16.000Z",
          "endDate": "2020-12-29T09:29:23.000Z"
        }
      },
      ...
      },
      ...
      }
    Swaps_reference:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "binance": {
      "1INCHUSDT": {
        "limits": {
          "price": {
            "max": "100000",
            "min": "0.0001"
          },
          "amount": {
            "max": "100000",
            "min": "0.0001"
          },
          "market": {
            "max": "100000",
            "min": "0.0001"
          }
        },
        "precision": {
          "base": "8",
          "quote": "8"
        },
        "expiration": NULL,
        "underlying": "1INCH"
      },
      ...
      },
      ...
      }
    Swaps_Funding_rates:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example:  [
           {
           "exchange": "binance",
           "instrument": "ADAUSDT",
           "startDate": "2018-04-17T00:00:00.000Z",
           "endDate": "2020-09-04T00:00:00.000Z"
           },
           {...}
           ]
    Swaps_FundingRates_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "bitmex": {
      "timestamp": 1598500800000,
      "insertionTimestamp": "2020-08-27T05:00:00.000Z",
      "fundingInterval": "2000-01-01T01:00:00.000Z",
      "fundingRate": 0.0001,
      "fundingRateDaily": 0.0003000000000003
      }
      }
    Swaps_FundingRates_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "columns"   : ["timestamp", "insertionTimestamp", "fundingInterval", "fundingRate", "fundingRateDaily"],
      "startDate" : 1598499778860,
      "endDate"   : 1598521378860
      },
      "data": {
      "binance": [
        [1598500800000, "2020-08-27T05:00:00.000Z", "2000-01-01T01:00:00.000Z", 0,0001, 0.00030000000000003],
        [...]
      ]
      }
      }
    Insurance_Funds_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchange": "binance",
           "instrument": "ADAUSDT",
           "startDate": "2018-04-17T00:00:00.000Z",
           "endDate": "2020-09-04T00:00:00.000Z"
           },
           {...}
           ]
    Insurance_Funds_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "exchange": "huobi",
            "timestamp": 1609660800000,
            "fund": 4721.219613658744
           }
           ]
    Insurance_Funds_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "metadata": {
            "startDate": 1609660800000,
            "endDate": 1609660800000
        },
         "data": [
        {
            "exchange": "huobi",
            "timestamp": 1609660800000,
            "fund": 4721.219613658744
        }
       ]
      }
    Swaps_Liquidations_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchange": "binance",
           "instrument": "ADAUSDT",
           "startDate": "2018-04-17T00:00:00.000Z",
           "endDate": "2020-09-04T00:00:00.000Z"
           },
           {...}
           ]
    Swaps_Liquidations_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
         "metadata": {
            "startDate": "2020-07-20T00:00:00.000Z",
            "endDate": "2020-07-21T00:00:00.000Z"
         },
         "data": [
         {
            "exchange": "binance",
            "timestamp": "2020-07-20T01:42:26.177Z",
            "originalQuantity": 283.2,
            "price": 2.939,
            "side": "SELL",
            "status": "FILLED",
            "type": "LIMIT",
            "timeInForce": "IOC"
         },
          ]
         }
    Swaps_ohlcv_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "exchange": "binance",
            "instrument": "ADAUSDT",
            "startDate": "2018-04-17T00:00:00.000Z",
            "endDate": "2020-09-04T00:00:00.000Z"
           },
           {...}
           ]
    Swaps_ohlcv_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchange": "binance",
           "timestamp": "2020-09-04T22:43:00.000Z",
           "open": 2.8395,
           "high": 2.8456,
           "low": 2.8265,
           "close": 2.8387,
           "volume": 22136.31
           }
           ]
    Swaps_ohlcv_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "startDate": "2020-07-25T00:00:00.000Z",
      "endDate": "2020-07-26T00:00:00.000Z"
      },
      "data": [
      {
        "exchange": "binance",
        "timestamp": "2020-07-25T00:00:00.000Z",
        "open": 3.0294,
        "high": 3.0331,
        "low": 3.0271,
        "close": 3.0331,
        "volume": 600.27
      },
      {...}
     ]
     }
    Swaps_Open_interest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "exchange": "binance",
            "instrument": "ADAUSDT",
            "startDate": "2018-04-17T00:00:00.000Z",
            "endDate": "2020-09-04T00:00:00.000Z"
           },
           {...}
           ]
    Swaps_OpenInterest_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchange": "binance",
           "timestamp": "2020-09-04T20:00:00.000Z",
           "value": 4010015.1
           }
           ]
    Swaps_OpenInterest_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "metadata": {
      "startDate" : "2020-08-12T16:54:09.638Z",
      "endDate"   : "2020-08-12T22:54:09.638Z"
      },
      "data": [
      {
        "exchange": "binance",
        "timestamp": "2020-09-04T17:00:00.000Z",
        "value": 3795149.9
      },
      {...}
     ]
     }
    Swaps_OrderBooks_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchange": "bitmex",
           "instrument": "ADAU20",
           "startDate": "2020-08-10T00:00:00.000Z",
           "endDate": "2020-09-04T00:00:00.000Z"
           },
           {...}
           ]
    Swaps_OrderBooks_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
     "metadata": {
      "columns": ["exchange", "timestamp", "timestampNanoseconds", "isBid", "data"],
      "startDate": "2020-08-17 06:00:00",
      "endDate": "2020-08-17 07:00:00"
     },
     "data": [
      [
        "binance",
        "2020-08-17 06:03:00",
        NULL,
        false,
        [
          [11800.76, 1.011, 0],
          [11800.96, 1.013, 0],
          [11801,    0.3,   0],
          [11854.61, 0,     0]
        ]
      ],
      [
        "binance",
        "2020-08-17 06:05:00",
        NULL,
        true,
        [
          [11821.2,  0,     0],
          [11821.21, 1.006, 0]
        ]
      ],
      ...
     ]
     }
    Swaps_Snapshots_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchange": "bitmex",
           "instrument": "ADAU20",
           "startDate": "2020-08-10T00:00:00.000Z",
           "endDate": "2020-09-04T00:00:00.000Z"
           },
           {...}
           ]
    Swaps_Snapshots_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
     "metadata": {
      "columns": ["exchange", "timestamp", "timestampNanoseconds", "isBid", "data"],
      "startDate": "2020-08-17 06:00:00",
      "endDate": "2020-08-17 07:00:00"
     },
     "data": [
      [
        "binance",
        "2020-08-17 06:03:00",
        NULL,
        false,
        [
          [11800.76, 1.011, 0],
          [11800.96, 1.013, 0],
          [11801,    0.3,   0],
          [11854.61, 0,     0]
        ]
      ],
      [
        "binance",
        "2020-08-17 06:05:00",
        NULL,
        true,
        [
          [11821.2,  0,     0],
          [11821.21, 1.006, 0]
        ]
      ],
      ...
     ]
     }
    Swaps_Tickers_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchange": "binance",
           "instrument": "AAVEUSDT",
           "startDate": "2020-11-03T00:00:00.000Z",
           "endDate": "2020-11-10T00:00:00.000Z"
           },
           {...}
           ]
    Swaps_Tickers_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "exchange": "binance",
            "timestamp": 1604994181218,
            "bid": 0.2565,
            "ask": 0.2566,
            "mid": 0.25655,
            "last": 0
           }
           ]
    Swaps_Tickers_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "metadata": {
            "startDate": 1604401200000,
            "endDate": 1604404740000
        },
        "data": [
            {
                "exchange": "binance",
                "timestamp": 1604402460964,
                "bid": 28.525,
                "ask": 28.558,
                "mid": 28.5415,
                "last": 0
            },
            {
                "exchange": "binance",
                "timestamp": 1604402520833,
                "bid": 28.548,
                "ask": 28.582,
                "mid": 28.565,
                "last": 0
            },
            {
                "exchange": "binance",
                "timestamp": 1604402580830,
                "bid": 28.544,
                "ask": 28.584,
                "mid": 28.564,
                "last": 0
            },
        ]
     }
    Swaps_Trades_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchange": "binance",
           "instrument": "ADAUSDT",
           "startDate": "2018-04-17T00:00:00.000Z",
           "endDate": "2020-09-04T00:00:00.000Z"
           },
           {...}
        ]
    Swaps_Trades_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
     "data": [
      [
        "bitmex",
        "2020-09-23T14:42:15.004Z",
        0,
        false,
        10476.5,
        13,
        0
      ],
      [...],
     ],
     "metadata": {
      "columns": [
        "exchange",
        "timestamp",
        "timestampNanoseconds",
        "isBuy",
        "price",
        "volume",
        "tradeId"
      ],
      "startDate": "2020-09-23T14:42:15.702Z",
      "endDate": "2020-09-23T15:42:15.702Z"
     }
     }
    Market_Metrics_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "nvt": {
            "signal": 18.9654508964007
        },
        "sharpe": {
            "historicalVolatility": 3.4682699493683877,
            "ratio": 0.15009752606172203
        },
        "stockToFlow": {
            "blockNumber": 634274,
            "circulation": 18401718.75,
            "lastYearCirculation": 17769637.5,
            "ratio": 29.1129008335558,
            "price": 10261.748846554
        }
        }
    Market_NTV_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "data": [
            [
                "2020-06-01T00:00:00.000Z",
                9425.018,
                20.24505675359475,
                18.214890497339766
            ],
            [
                "2020-06-02T00:00:00.000Z",
                10195.738,
                19.568868084767857,
                18.106646065087002
            ]
        ],
        "metadata": {
            "columns": [
                "timestamp",
                "price_usd",
                "nvt_ratio",
                "nvt_signal"
            ]
        }
        }
    Market_sharpe:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "data": [
            [
                "2019-07-29T00:00:00.000Z",
                0.533128100455041,
                0.17367362185965035
            ],
            [
                "2019-07-30T00:00:00.000Z",
                0.533128100455041,
                0.17367362185965035
            ]
        ],
        "metadata": {
            "columns": [
                "timestamp",
                "historical_volatility",
                "sharpe_ratio"
            ]
        }
        }
    Market_StockToFlow:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "data": [
            [
                "2010-06-14T00:00:00.000Z",
                60917,
                304590000000000,
                85885000000000,
                1.39269792643058,
                0.268401295646387
            ],
            [
                "2010-06-15T00:00:00.000Z",
                60949,
                304750000000000,
                85945000000000,
                1.39279266927173,
                0.268464676479661
            ]
        ],
        "metadata": {
            "columns": [
                "timestamp",
                "blockNumber",
                "circulation",
                "lastYearCirculation",
                "ratio",
                "price"
            ]
        }
        }
    Market_Implied_Yield:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "instrument": "BTC210430",
            "settlement": "2021-04-30T00:00:00.000Z",
            "price": "49737.31",
            "spot": "49737.6",
            "basis": "-0.29",
            "apr": -0.0003040240898521156,
            "daysToExpiration": 7
           },
           {
            "instrument": "BTC210625",
            "settlement": "2021-06-25T00:00:00.000Z",
            "price": "51438.06",
            "spot": "49737.6",
            "basis": "1700.46",
            "apr": 0.1980769363333059,
            "daysToExpiration": 63
           },
           {
            "instrument": "BTC210924",
            "settlement": "2021-09-24T00:00:00.000Z",
            "price": "54444.99",
            "spot": "49737.6",
            "basis": "4707.39",
            "apr": 0.2243197429982679,
            "daysToExpiration": 154
            }
        ]
    Market_Implied_Yield_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "timestamp": "2021-04-17T00:00:00.000Z",
            "settlement": "2021-04-30T00:00:00.000Z",
            "price": "62265.29",
            "spot": "61455",
            "basis": "810.29",
            "apr": 0.37019689203482226
           },
           {
            "timestamp": "2021-04-18T00:00:00.000Z",
            "settlement": "2021-04-30T00:00:00.000Z",
            "price": "60784.13",
            "spot": "60085.2",
            "basis": "698.93",
            "apr": 0.3538162614642763
           },
           {
            "timestamp": "2021-04-19T00:00:00.000Z",
            "settlement": "2021-04-30T00:00:00.000Z",
            "price": "56367.04",
            "spot": "56239.8",
            "basis": "127.24",
            "apr": 0.07507236059613558
           },
           {
            "timestamp": "2021-04-20T00:00:00.000Z",
            "settlement": "2021-04-30T00:00:00.000Z",
            "price": "55964.85",
            "spot": "55722.4",
            "basis": "242.45",
            "apr": 0.15881270368828335
           },
           {
            "timestamp": "2021-04-21T00:00:00.000Z",
            "settlement": "2021-04-30T00:00:00.000Z",
            "price": "56743",
            "spot": "56500",
            "basis": "243",
            "apr": 0.17442477876106194
           },
           {
            "timestamp": "2021-04-22T00:00:00.000Z",
            "settlement": "2021-04-30T00:00:00.000Z",
            "price": "53986.14",
            "spot": "53815.2",
            "basis": "170.94",
            "apr": 0.14492443584712125
           },
           {
            "timestamp": "2021-04-23T00:00:00.000Z",
            "settlement": "2021-04-30T00:00:00.000Z",
            "price": "51813.87",
            "spot": "51730",
            "basis": "83.87",
            "apr": 0.08453936649084533
           }
        ]
    Market_Rankings_assets:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "data": [
            {
                "blockchain": {
                    "blockchainId": "408fa195a34b533de9ad9889f076045e",
                    "icon": "https://raw.githubusercontent.com/amberdata/blockchains/master/images/408fa195a34b533de9ad9889f076045e.png",
                    "name": "Bitcoin",
                    "slug": "bitcoin",
                    "symbol": "BTC"
                },
                "changeInPriceDaily": "3.66796",
                "changeInPriceHourly": "0.361801",
                "changeInPriceWeekly": "10.2701",
                "currentPrice": "6398.45745521",
                "decimals": null,
                "marketCap": "113209904073.75656",
                "name": "Bitcoin",
                "rank": "3",
                "specifications": [],
                "symbol": "BTC",
                "tokenVelocity": null,
                "tradeVolume": "19404167524.101",
                "transactionVolume": null,
                "uniqueAddresses": null
            },
            ...,
        ],
        "metadata": {
            "totalRecords": "2143"
        }
        }
    Market_Supply_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "timestamp": "2021-01-26T16:25:49.000Z",
        "issuance": "6.25",
        "totalSupply": "18611089.79497096",
        "circulatingSupply": "18611056",
        "maxSupply": "21000000"
        }
    Market_Supply_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
        "metadata": {
            "startDate": "2021-01-22T00:00:00.000Z",
            "endDate": "2021-01-26T16:42:50.026Z"
        },
        "data": [
            {
                "timestamp": "2021-01-22T00:00:00.000Z",
                "issuance": "6.25",
                "totalSupply": "18607677.29497096",
                "circulatingSupply": "18607618",
                "maxSupply": "21000000"
            },
            {
                "timestamp": "2021-01-23T00:00:00.000Z",
                "issuance": "6.25",
                "totalSupply": "18608652.29497096",
                "circulatingSupply": "18608487",
                "maxSupply": "21000000"
            },
            {
                "timestamp": "2021-01-24T00:00:00.000Z",
                "issuance": "6.25",
                "totalSupply": "18609521.04497096",
                "circulatingSupply": "18609437",
                "maxSupply": "21000000"
            },
            {
                "timestamp": "2021-01-25T00:00:00.000Z",
                "issuance": "6.25",
                "totalSupply": "18610396.04497096",
                "circulatingSupply": "18610293",
                "maxSupply": "21000000"
            }
            ]
        }
    Market_TokenPrices_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "address": "0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2",
            "circulatingSupply": 1000000,
            "dailyPercentChangeUSD": -1.0245,
            "dailyVolumeUSD": 3954194.30424895,
            "hourlyPercentChangeUSD": 1.53884,
            "marketCapUSD": 504322007.06200004,
            "name": "Maker",
            "priceUSD": 504.322007062,
            "symbol": "MKR",
            "totalSupply": 1000000,
            "weeklyPercentChangeUSD": -7.69287
           }
        ]
    Market_TokenPrices_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
    "metadata": {
      "columns": [
        "timestamp",
        "priceUSD",
        "priceETH",
        "hourlyPercentChangeETH",
        "hourlyPercentChangeUSD",
        "dailyPercentChangeETH",
        "dailyPercentChangeUSD",
        "dailyVolumeETH",
        "dailyVolumeUSD",
        "weeklyPercentChangeETH",
        "weeklyPercentChangeUSD",
        "circulatingSupply",
        "totalSupply",
        "marketCapETH",
        "marketCapUSD",
        "isCrossRates"
      ],
      "startDate": 1573257600000,
      "endDate": 1575849600000,
      "decimals": "18"
     },
     "data": [
      [
        1573257600000,
        664.99,
        3.62,
        0.4160887656033287,
        -0.49156410160487823,
        1.971830985915493,
        -0.06386991576685226,
        211.5851187808,
        2838.994792207,
        25.694444444444443,
        26.020258298037653,
        "999999.9999999000000000",
        "1000000.0000000000000000",
        "3619999.99999963800000000000000000000000",
        "664990000.00000000000000000000000000000000",
        false
      ],
      [
        1573344000000,
        664.99,
        3.52,
        0,
        1.3271774242701286,
        -2.7624309392265194,
        -0.42973078190039826,
        74.3948162144,
        2123.3865779946,
        22.0103986135182,
        25.263009182952672,
        "999999.9999999000000000",
        "1000000.0000000000000000",
        "3519999.99999964800000000000000000000000",
        "664990000.00000000000000000000000000000000",
        false
      ],
      ...
      ]
     }
    DefiTWAP_Assets_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
           "startDate": "2020-05-05T00:00:00.000Z",
           "endDate": "2021-10-05T18:55:00.000Z"
           },
        ]
    DefiTWAP_Assets_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
     "timestamp": 1633462380000,
     "asset": "0x6b175474e89094c44da98b954eedeac495271d0f",
     "price": "0.00029435",
     "volume": "3.52360483",
     "twap": "0.00029435"
     }
    DefiTWAP_Assets_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
     "metadata": {
      "startDate": 1633374914078,
      "endDate": 1633461314078
     },
     "data": [
      {
        "timestamp": 1633462380000,
        "asset": "0x6b175474e89094c44da98b954eedeac495271d0f",
        "price": "0.00028842",
        "volume": "15991.83836580",
        "twap": "834458306374501235.99692312"
      },
      ]
     }
    DefiTWAP_Pairs_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "baseAddress": "0x00000000000045166c45af0fc6e4cf31d9e14b9a",
           "quoteAddress": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
           "startDate": "2021-04-18T00:00:00.000Z",
           "endDate": "2021-09-27T00:00:00.000Z"
           },
           {...}
           ]
    DefiTWAP_Pairs_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
     "timestamp": 1633138800000,
     "pair": "DAI_WETH",
     "price": "0.00030085",
     "volume": "53.92542645",
     "twap": "0.00030085"
     }
    DefiTWAP_Pairs_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
     "metadata": {
      "startDate": 1617739560000,
      "endDate": 1617739560000
     },
     "data": [
      {
        "timestamp": 1617739560000,
        "pair": "DAI_WETH",
        "price": "0.00047200434465900475",
        "twap": "0.00047200434465900475",
        "volume": "5.510246761054205304",
        "baseAddress": "0x6b175474e89094c44da98b954eedeac495271d0f",
        "baseSymbol": "DAI",
        "quoteAddress": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
        "quoteSymbol": "WETH"
      }
     ]
     }
    DefiVWAP_Assets_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
           "startDate": "2020-05-05T00:00:00.000Z",
           "endDate": "2021-10-05T18:55:00.000Z"
           },
        ]
    DefiVWAP_Assets_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "timestamp": 1633462380000,
      "asset": "0x6b175474e89094c44da98b954eedeac495271d0f",
      "price": "0.00029435",
      "volume": "3.52360483",
      "vwap": "0.00029435"
     }
    DefiVWAP_Assets_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
     "metadata": {
      "startDate": 1633374914078,
      "endDate": 1633461314078
     },
     "data": [
      {
        "timestamp": 1633462380000,
        "asset": "0x6b175474e89094c44da98b954eedeac495271d0f",
        "price": "0.00028842",
        "volume": "15991.83836580",
        "vwap": "834458306374501235.99692312"
      },
     ]
     }
    DefiVWAP_Pairs_information:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "baseAddress": "0x00000000000045166c45af0fc6e4cf31d9e14b9a",
           "quoteAddress": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
           "startDate": "2021-04-18T00:00:00.000Z",
           "endDate": "2021-09-27T00:00:00.000Z"
           },
           {...}
           ]
    DefiVWAP_Pairs_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "timestamp": 1633138800000,
      "pair": "DAI_WETH",
      "price": "0.00030085",
      "volume": "53.92542645",
      "vwap": "0.00030085"
     }
    DefiVWAP_Pairs_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
     "metadata": {
      "startDate": 1617739560000,
      "endDate": 1617739560000
     },
     "data": [
      {
        "timestamp": 1617739560000,
        "pair": "DAI_WETH",
        "price": "0.00047200434465900475",
        "vwap": "0.00047200434465900475",
        "volume": "5.510246761054205304",
        "baseAddress": "0x6b175474e89094c44da98b954eedeac495271d0f",
        "baseSymbol": "DAI",
        "quoteAddress": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
        "quoteSymbol": "WETH"
      }
     ]
     }
    SpotTWAP_Assets_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "asset": "18c",
            "startDate": "2019-04-24T12:01:00.000Z",
            "endDate": "2020-09-23T21:49:00.000Z"
           },
           {...}
           ]
    SpotTWAP_Assets_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
      "timestamp": "2020-09-11T22:49:00.000Z",
      "asset": "btc",
      "price": "10377.8883",
      "volume": "3.7839",
      "twap": "10379.5833"
     }
    SpotTWAP_Assets_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "timestamp": "2020-09-11T20:17:00.000Z",
            "asset": "btc",
            "price": "10334.1579",
            "volume": "3.7839",
            "twap": "10332.5029"
           },
           {...}
          ]
    SpotTWAP_Pairs_info:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "pair": "18c_btc",
            "startDate": "2019-04-24T12:00:00.000Z",
            "endDate": "2020-09-23T21:00:00.000Z"
           },
           {...}
           ]
    SpotTWAP_Pairs_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: object
          example: {
     "timestamp": "2020-09-11T20:41:00.000Z",
     "pair": "btc_usd",
     "price": "10311.5",
     "volume": "0.1212",
     "twap": "10314.8"
     }
    SpotTWAP_Pairs_historical:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "timestamp": "2020-09-11T20:41:00.000Z",
           "pair": "btc_usd",
           "price": "10311.5",
           "volume": "0.1212",
           "twap": "10315.9"
           },
           {...}
          ]
    Swaps_Liquidations_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
           "exchange": "binance",
           "timestamp": "2020-09-04T21:14:48.171Z",
           "originalQuantity": 200,
           "price": 2.831,
           "side": "BUY",
           "status": "FILLED",
           "type": "LIMIT",
           "timeInForce": "IOC"
           }
         ]
    Options_Exchanges_info:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
           type: object
           example: {
         "deribit": {
         "BTC-10DEC21-58000-P": {
        "open_interest": {
          "startDate": "2021-11-18 16:53:00 000",
          "endDate": "2021-12-03 17:32:00 000"
        },
        "liquidation_order": {
          "startDate": "2021-12-03 16:56:35 102",
          "endDate": "2021-12-03 16:56:35 102"
        },
        "ohlcv": {
          "startDate": "2021-11-18 14:30:00 000",
          "endDate": "2021-12-03 17:55:00 000"
        },
        "order_book_event": {
          "startDate": null,
          "endDate": null
        },
        "order_book_snapshot": {
          "startDate": "2021-11-18 08:04:00 000",
          "endDate": "2021-12-03 17:56:00 000"
        },
        "ticker": {
          "startDate": "2021-11-18 08:04:17 583",
          "endDate": "2021-12-03 17:56:40 916"
        },
        "trade": {
          "startDate": "2021-11-18 13:36:59 263",
          "endDate": "2021-12-03 13:45:14 337"
        }
        },
        "ETH-31DEC21-6500-P": {
        "open_interest": {
          "startDate": "2021-11-16 07:04:00 000",
          "endDate": "2021-12-03 17:32:00 000"
        },
        "liquidation_order": {
          "startDate": null,
          "endDate": null
        },
        "ohlcv": {
          "startDate": "2021-11-26 23:28:00 000",
          "endDate": "2021-12-03 17:55:00 000"
        },
        "order_book_event": {
          "startDate": null,
          "endDate": null
        },
        "order_book_snapshot": {
          "startDate": "2021-11-17 15:24:00 000",
          "endDate": "2021-12-03 17:56:00 000"
        },
        "ticker": {
          "startDate": "2021-11-17 10:38:46 409",
          "endDate": "2021-12-03 17:56:40 881"
        },
        "trade": {
          "startDate": "2021-11-26 23:28:27 263",
          "endDate": "2021-11-26 23:28:27 263"
        }
        },
        ...
        },
        ...
        }
    Options_Exchanges_reference:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
           type: object
           example: {
         "deribit": {
         "BTC-10DEC21-100000-C": {
         "contractType": "weekly",
         "precision_price": 0.0005,
         "precision_amount": 0.1,
         "limits_price_min": 0.0005,
         "limits_amount_min": 0.1,
         "underlying": "BTC-10DEC21",
         "expiration": "2021-12-10 08:00:00",
         "nativeInstrument": "BTC-10DEC21-100000-C",
         "quoteAsset": "BTC"
         },
         ...
         },
         ...
         }
    Options_Liquidations_info:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
           type: array
           items: 
             type: object
           example: [
         {
         "exchange": "deribit",
         "instrument": "BTC-30SEP22-80000-C",
         "underlying": "BTC-30SEP22",
         "startDate": "2021-11-18T00:00:00.000Z",
         "endDate": "2021-11-26T00:00:00.000Z"
         },
         {...}
         ]
    Options_Liquidations_latest:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
           type: array
           items: 
             type: object
           example: [
         {
          "exchange": "deribit",
          "timestamp": "2021-11-18T16:24:31.842Z",
          "originalQuantity": 5,
          "price": 0.1165,
          "side": "SELL",
          "status": null,
          "type": null,
          "timeInForce": null,
          "action": null,
          "orderId": "ETH-102871296",
          }
         ]
    Options_Liquidations_historical:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: object
          example: {
         "metadata": {
         "startDate": "2020-11-25 03:22:40 544",
         "endDate": "2021-11-26 03:22:40 544"
        },
         "data": [
        {
         "exchange": "deribit",
         "timestamp": "2021-11-18 16:24:31 842",
         "originalQuantity": 5,
         "price": 0.1165,
         "side": "SELL",
         "status": null,
         "type": null,
         "timeInForce": null,
         "action": null,
         "orderId": "ETH-102871296",
        },
         {...}
         ]
         }
    Options_OHLCV_information:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: array
          items:
            type: object
          example: [
            { "exchange": "deribit",
              "instrument": "BTC-10DEC21-100000-C",
              "underlying": "BTC-10DEC21",
              "startDate": 1637193600000,
              "endDate": 1638230400000
            },
         ]
    Options_OHLCV_latest:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: array
          items:
            type: object
            example: [
                {
                 "exchange": "deribit",
                 "timestamp": "2021-11-30 08:36:00 000",
                 "open": 0.0005,
                 "high": 0.0005,
                 "low": 0.0005,
                 "close": 0.0005,
                 "volume": 0
                 }
             ]
    Options_OHLCV_historical:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: object
          example: {
          "metadata": {
              "startDate": "2021-11-29T00:00:00.000Z",
              "endDate": "2021-11-30T00:00:00.000Z"
              },
          "data": [
             { "exchange": "deribit",
               "timestamp": "2021-11-29 08:36:00 000",
               "open": 0.0005,
               "high": 0.0005,
               "low": 0.0005,
               "close": 0.0005,
               "volume": 0
             },
             {...}
           ]
          }
    Options_Open_Interest_info:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: array
          items:
            type: object
          example: [
         {
          "exchange": "deribit",
          "instrument": "BTC-10DEC21-100000-C",
          "startDate": 1637193600000,
          "endDate": 1637539200000
         },
         {...}
         ]
    Options_Open_Interest_latest:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: array
          items:
            type: object
          example: [
           {
            "exchange": "deribit",
            "timestamp": 1637600400000,
            "value": 82
           }
         ]
    Options_Open_Interest_historical:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: object 
          example: {
         "metadata": {
            "startDate": 1605978878454,
            "endDate": 1637601278454
         },
         "data": [
            {
                "exchange": "deribit",
                "timestamp": 1637193600000,
                "value": 31.5
            },
            {
                "exchange": "deribit",
                "timestamp": 1637280000000,
                "value": 50.4
            },
            {
                "exchange": "deribit",
                "timestamp": 1637366400000,
                "value": 50.4
            },
            {
                "exchange": "deribit",
                "timestamp": 1637452800000,
                "value": 79.5
            },
            {
                "exchange": "deribit",
                "timestamp": 1637539200000,
                "value": 82
            }
         ]
         }
    Options_Order_Books_information:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: array
          items:
            type: object
          example: [
         {
          "exchange": "deribit",
          "instrument": "BTC-30SEP22-80000-C",
          "underlying": "BTC-30SEP22",
          "startDate": "2021-11-18T00:00:00.000Z",
          "endDate": "2021-11-26T00:00:00.000Z"
          },
          {...}
         ]
    Options_Order_Books_historical:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: object
          example: {
         "metadata": {
         "columns": ["exchange", "timestamp", "timestampNanoseconds", "isBid", "data", "sequence"],
         "startDate": "2021-11-18 06:00:00",
         "endDate": "2021-11-18 07:00:00"
        },
        "data": [
        [
        "deribit",
        "2021-11-18 06:03:00",
        0,
        false,
        [
          [11800.76, 1.011, 0],
          [11800.96, 1.013, 0],
          [11801,    0.3,   0],
          [11854.61, 0,     0]
        ],
        null
      ],
      [
        "deribit",
        "2021-11-18 06:03:00",
        0,
        true,
        [
          [11821.2,  0,     0],
          [11821.21, 1.006, 0]
        ],
        null
       ]
      
      ]
      }
    Options_Snapshots_information:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: array
          items:
            type: object
          example: [
         {
         "exchange": "deribit",
         "instrument": "BTC-10DEC21-100000-C",
         "startDate": 1637193600000,
         "endDate": 1637539200000
         },
         {...}
         ]
    Options_Snapshots_historical:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: object
          example: {
         "metadata": {
         "columns": [
        "exchange",
        "timestamp",
        "timestampNanoseconds",
        "underlyingPrice",
        "underlyingIndex",
        "stats",
        "state",
        "openInterest",
        "minPrice",
        "maxPrice",
        "markPrice",
        "markIv",
        "lastPrice",
        "interestRate",
        "indexPrice",
        "greeks",
        "estimatedDeliveryPrice",
        "bids",
        "bidIv",
        "bestBidPrice",
        "bestBidAmount",
        "bestAskPrice",
        "bestAskAmount",
        "asks",
        "askIv",
        "sequence",
        "metadata"
        ],
        "startDate": "2020-08-17 06:00:00",
        "endDate": "2020-08-17 07:00:00"
        },
        "data": [
        [
        "deribit",
        "2021-12-01 09:19:01 254",
        0,
        4797.14,
        "ETH-28JAN22",
        {
          "low": 0.024,
          "high": 0.03,
          "volume": 1131,
          "price_change": 25
        },
        "open",
        4365,
        0.0065,
        0.089,
        0.030323,
        106.88,
        0.03,
        0,
        4725.08,
        {
          "rho": 0.99955,
          "vega": 4.68046,
          "delta": 0.16158,
          "gamma": 0.00012,
          "theta": -4.31661
        },
        4725.08,
        [
          [0.0295, 455],
          [0.029, 252],
          [0.0285, 140],
          [0.027, 420],
          [0.02, 5],
          [0.015, 1],
          [0.0105, 3],
          [0.01, 1 ],
          [0.007, 10],
          [0.0045, 8],
          [0.002, 1]
        ],
        106.03,
        0.0295,
        455,
        0.031,
        15,
        [
          [0.031, 15],
          [0.0315, 138],
          [0.032, 413],
          [0.0325, 248],
          [0.033, 420],
          [0.0355, 5],
          [0.037, 1],
          [0.04, 2],
          [0.06, 6],
          [0.7, 4]
         ],
         107.57,
         17235771415,
         null
         ],
         ...
         ]
         }
    Options_Tickers_information:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: array
          items:
            type: object
          example: [
         {
          "exchange": "deribit",
          "instrument": "BTC-30SEP22-80000-C",
          "underlying": "BTC-30SEP22",
          "startDate": "2021-11-18T00:00:00.000Z",
          "endDate": "2021-11-26T00:00:00.000Z"
         },
         {...}
         ]
    Options_Tickers_latest:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: array
          items:
            type: object
          example: [
            { 
            "exchange": "deribit",
            "timestamp": "2021-11-26 03:33:18 547",
            "bid": 0.01,
            "ask": 1.09,
            "mid": 0.55,
            "last": 1.1,
            "baseVolume": 0,
            "quoteVolume": 0,
            "bidVolume": 1,
            "askVolume": 1,
            "sequence": null,
            "metadata": null,
            "underlyingPrice": "4889.28",
            "underlyingIndex": "ETH-30SEP22",
            "stats": {
                "low": 1.1,
                "high": 1.1,
                "volume": 1,
                "price_change": 0
            },
            "state": "open",
            "settlementPrice": 1.12,
            "openInterest": 10,
            "minPrice": 0.928,
            "maxPrice": 1.248,
            "markPrice": 1.063279,
            "markIv": 112.14,
            "interestRate": 0,
            "indexPrice": 4460.8,
            "greeks": {
                "rho": -65.80318,
                "vega": 17.87013,
                "delta": -0.53068,
                "gamma": 0.00008,
                "theta": -3.2511
            },
            "estimatedDeliveryPrice": 4460.8,
            "bidIv": 0,
            "askIv": 119.43
              }
          ]
    Options_Tickers_historical:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: object 
          example: {
            "metadata": {
              "startDate": "2021-11-26 07:12:53 793",
              "endDate": "2021-11-26 08:12:53 793"
            },
            "data": [
            {   "exchange": "deribit",
                "timestamp": "2021-11-26 07:12:53 982",
                "bid": 0.01,
                "ask": 1.09,
                "mid": 0.55,
                "last": 1.1,
                "baseVolume": 0,
                "quoteVolume": 0,
                "bidVolume": 1,
                "askVolume": 1,
                "sequence": null,
                "metadata": null,
                "underlyingPrice": "4832.55",
                "underlyingIndex": "ETH-30SEP22",
                "stats": {
                    "low": 1.1,
                    "high": 1.1,
                    "volume": 1,
                    "price_change": 0
                },
                "state": "open",
                "settlementPrice": 1.12,
                "openInterest": 10,
                "minPrice": 0.9475,
                "maxPrice": 1.27,
                "markPrice": 1.083826,
                "markIv": 112.65,
                "interestRate": 0,
                "indexPrice": 4411.2,
                "greeks": {
                    "rho": -65.94924,
                    "vega": 17.64924,
                    "delta": -0.53325,
                    "gamma": 0.00008,
                    "theta": -3.22729
                },
                "estimatedDeliveryPrice": 4411.2,
                "bidIv": 0,
                "askIv": 114.34
            },
            ...
            ]
          }
    Options_Trades_information:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: array
          items:
            type: object 
          example: [
              {"exchange": "deribit",
               "instrument": "BTC-10DEC21-100000-C",
               "underlying": "BTC-10DEC21",
               "startDate": "2021-11-18T00:00:00.000Z",
               "endDate": "2021-11-26T00:00:00.000Z"
              },
              {"exchange": "deribit",
               "instrument": "BTC-10DEC21-100000-P",
               "underlying": "BTC-10DEC21",
               "startDate": null,
               "endDate": null
              },
              ...
          ]
    Options_Trades_historical:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        title:
          type: string
          example: "OK"
        description:
          type: string
          example: "Successful request"
        payload: 
          type: object 
          example: {
              "metadata": {
                  "columns": [
                      "exchange",
                      "timestamp",
                      "timestampNanoseconds",
                      "isBid",
                      "price",
                      "volume",
                      "tradeId"
                    ],
                "startDate": "2021-11-26 09:00:00 000",
                "endDate": "2021-11-26 09:01:00 000"
              }, 
              "data": [
                  ["deribit",
                   "2021-11-26 09:11:02 453",
                   0,
                   false,
                   0.0285,
                   1.7000000000000002,
                   "191829317"
                   ],
                   ["deribit",
                    "2021-11-26 09:12:22 286",
                    0,
                    true,
                    0.029,
                    2.1,
                    "191829762"
                    ],
              ]
          }
    tokens:
      type: object
      properties:
        "total":
           type: object
           example: {
           "value": 544,
           "relation": "eq"
        }
        "max_score": 
           type: string
           format: nullable
           example: null
        "hits":
          type: array
          items: 
            type: object
            example: [
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
            "_score": null,
            "_source": {
                "price_usd": 375.369914827909,
                "price_changes": {
                    "day_priceusd": 0,
                    "week_priceusd": 0,
                    "hour_priceusd": 0,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
                "symbol": "WBNB",
                "address": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
                "market_cap": 3738152342.147282,
                "name": "Wrapped BNB"
            },
            "sort": [
                1646656850000,
                3738152342
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0x843D4a358471547f51534e3e51fae91cb4Dc3F28",
            "_score": null,
            "_source": {
                "price_usd": 0.000045074851923121,
                "price_changes": {
                    "day_priceusd": 6422676429.804539,
                    "week_priceusd": 6428180367.255179,
                    "hour_priceusd": 6422676429.804539,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0x843D4a358471547f51534e3e51fae91cb4Dc3F28",
                "symbol": "lowb",
                "address": "0x843D4a358471547f51534e3e51fae91cb4Dc3F28",
                "market_cap": 3125393.6875748727,
                "name": "loser coin"
            },
            "sort": [
                1646656847000,
                3125393
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7",
            "_score": null,
            "_source": {
                "price_usd": 0.9062615406126265,
                "price_changes": {
                    "day_priceusd": 341777.3555536457,
                    "week_priceusd": 362636.9842195405,
                    "hour_priceusd": 719336725026.8403,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7",
                "symbol": "VAI",
                "address": "0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7",
                "market_cap": 186862725.67453542,
                "name": "VAI Stablecoin"
            },
            "sort": [
                1646656841000,
                186862725
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0xd32d01A43c869EdcD1117C640fBDcfCFD97d9d65",
            "_score": null,
            "_source": {
                "price_usd": 1.4056718519664113,
                "price_changes": {
                    "day_priceusd": 286635.9618700099,
                    "week_priceusd": 0,
                    "hour_priceusd": 286635.9618700099,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0xd32d01A43c869EdcD1117C640fBDcfCFD97d9d65",
                "symbol": "NMX",
                "address": "0xd32d01A43c869EdcD1117C640fBDcfCFD97d9d65",
                "market_cap": 32869335.380848803,
                "name": "Nominex"
            },
            "sort": [
                1646656835000,
                32869335
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82",
            "_score": null,
            "_source": {
                "price_usd": 6.097153460217973,
                "price_changes": {
                    "day_priceusd": 28550.003003947266,
                    "week_priceusd": 28426.907919303652,
                    "hour_priceusd": 57248.766309145445,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82",
                "symbol": "Cake",
                "address": "0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82",
                "market_cap": 5539410351.396955,
                "name": "PancakeSwap Token"
            },
            "sort": [
                1646656832000,
                5539410351
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0x762539b45A1dCcE3D36d080F74d1AED37844b878",
            "_score": null,
            "_source": {
                "price_usd": 0.017700269575519057,
                "price_changes": {
                    "day_priceusd": 5944295027.15391,
                    "week_priceusd": 7316430.311742028,
                    "hour_priceusd": 8195576.7026345,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0x762539b45A1dCcE3D36d080F74d1AED37844b878",
                "symbol": "LINA",
                "address": "0x762539b45A1dCcE3D36d080F74d1AED37844b878",
                "market_cap": 361516707.3955287,
                "name": "Linear Token"
            },
            "sort": [
                1646656814000,
                361516707
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c",
            "_score": null,
            "_source": {
                "price_usd": 38545.222743909726,
                "price_changes": {
                    "day_priceusd": 6.5671297651871745,
                    "week_priceusd": 6.888346250409315,
                    "hour_priceusd": 6.5671297651871745,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c",
                "symbol": "BTCB",
                "address": "0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c",
                "market_cap": 4411657721.332781,
                "name": "BTCB Token"
            },
            "sort": [
                1646656811000,
                4411657721
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63",
            "_score": null,
            "_source": {
                "price_usd": 8.668263915121397,
                "price_changes": {
                    "day_priceusd": 18819.891527791086,
                    "week_priceusd": 20580.198796291013,
                    "hour_priceusd": 2226901.39971336,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63",
                "symbol": "XVS",
                "address": "0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63",
                "market_cap": 499909156.1012144,
                "name": "Venus"
            },
            "sort": [
                1646656757000,
                499909156
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0x8b303d5BbfBbf46F1a4d9741E491e06986894e18",
            "_score": null,
            "_source": {
                "price_usd": 0.11196208422487211,
                "price_changes": {
                    "day_priceusd": 1493927.590991633,
                    "week_priceusd": 1582612.7044410168,
                    "hour_priceusd": 1493927.590991633,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0x8b303d5BbfBbf46F1a4d9741E491e06986894e18",
                "symbol": "WOOP",
                "address": "0x8b303d5BbfBbf46F1a4d9741E491e06986894e18",
                "market_cap": 238472883.3841733,
                "name": "Woonkly Power"
            },
            "sort": [
                1646656745000,
                238472883
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0x07663837218A003e66310a01596af4bf4e44623D",
            "_score": null,
            "_source": {
                "price_usd": 0.9679946171467149,
                "price_changes": {
                    "day_priceusd": 300202.4462712145,
                    "week_priceusd": 336042.3348807344,
                    "hour_priceusd": 300202.4462712145,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0x07663837218A003e66310a01596af4bf4e44623D",
                "symbol": "rUSD",
                "address": "0x07663837218A003e66310a01596af4bf4e44623D",
                "market_cap": 5155732.57904765,
                "name": "rUSD"
            },
            "sort": [
                1646656739000,
                5155732
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0x8263CD1601FE73C066bf49cc09841f35348e3be0",
            "_score": null,
            "_source": {
                "price_usd": 0.0625923000836591,
                "price_changes": {
                    "day_priceusd": 1975488.928008739,
                    "week_priceusd": 2261028.0192403095,
                    "hour_priceusd": 1975488.928008739,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0x8263CD1601FE73C066bf49cc09841f35348e3be0",
                "symbol": "ALU",
                "address": "0x8263CD1601FE73C066bf49cc09841f35348e3be0",
                "market_cap": 190588143.16472295,
                "name": "Altura"
            },
            "sort": [
                1646656730000,
                190588143
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE",
            "_score": null,
            "_source": {
                "price_usd": 0.7457753414454305,
                "price_changes": {
                    "day_priceusd": 388265.56194602733,
                    "week_priceusd": 413732.77842778567,
                    "hour_priceusd": 388265.56194602733,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE",
                "symbol": "XRP",
                "address": "0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE",
                "market_cap": 165349174.51206073,
                "name": "XRP Token"
            },
            "sort": [
                1646656724000,
                165349174
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0x6a6Ccf15B38DA4b5B0eF4C8fe9FefCB472A893F9",
            "_score": null,
            "_source": {
                "price_usd": 0.028302578413210842,
                "price_changes": {
                    "day_priceusd": 1791360130.5009696,
                    "week_priceusd": 434252.5754215748,
                    "hour_priceusd": 2337754.0318121426,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0x6a6Ccf15B38DA4b5B0eF4C8fe9FefCB472A893F9",
                "symbol": "MNST",
                "address": "0x6a6Ccf15B38DA4b5B0eF4C8fe9FefCB472A893F9",
                "market_cap": 24735802.195460457,
                "name": "MoonStarter.net"
            },
            "sort": [
                1646656712000,
                24735802
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0x603c7f932ED1fc6575303D8Fb018fDCBb0f39a95",
            "_score": null,
            "_source": {
                "price_usd": 0.3184991068507596,
                "price_changes": {
                    "day_priceusd": 280377.7913010387,
                    "week_priceusd": 268215.04874161625,
                    "hour_priceusd": 1.836896776847402e+23,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0x603c7f932ED1fc6575303D8Fb018fDCBb0f39a95",
                "symbol": "BANANA",
                "address": "0x603c7f932ED1fc6575303D8Fb018fDCBb0f39a95",
                "market_cap": 71191492.86335154,
                "name": "ApeSwapFinance Banana"
            },
            "sort": [
                1646656703000,
                71191492
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47",
            "_score": null,
            "_source": {
                "price_usd": 0.8255735666298606,
                "price_changes": {
                    "day_priceusd": 257529.4178484101,
                    "week_priceusd": 244375.96201464027,
                    "hour_priceusd": 70999602.91419426,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47",
                "symbol": "ADA",
                "address": "0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47",
                "market_cap": 373502034.83095956,
                "name": "Cardano Token"
            },
            "sort": [
                1646656700000,
                373502034
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~token~0x3920123482070C1a2dff73AaD695c60e7c6F6862",
            "_score": null,
            "_source": {
                "price_usd": 0.0520164681268798,
                "price_changes": {
                    "day_priceusd": 3913432.8687983695,
                    "week_priceusd": 3494010.936860167,
                    "hour_priceusd": 3913432.8687983695,
                    "month_priceusd": 0
                },
                "identifier": "bsc~token~0x3920123482070C1a2dff73AaD695c60e7c6F6862",
                "symbol": "EULER",
                "address": "0x3920123482070C1a2dff73AaD695c60e7c6F6862",
                "market_cap": 8658388.24917174,
                "name": "Euler.Tools"
            },
            "sort": [
                1646656700000,
                8658388
            ]
        }
     ]
    token:
      type: object
      properties:
        "_index": 
          type: string
          example: "catalog_20210721"
        "_type":
          type: string
          example: "_doc"
        "_id":
          type: string
          example: "bsc~token~0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c"
        "_version": 
          type: integer
          format: int32
          example: 1539456,
        "_seq_no": 
          type: integer
          format: int32
          example: 52994750,
        "_primary_term": 
          type: integer
          format: int32
          example: 13,
        "found": 
          type: boolean
          example: true
        "_source": 
          type: object
          example: {
        "price_usd": 44261.71361070749,
        "identifier": "bsc~token~0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c",
        "symbol": "BTCB",
        "chain": "bsc",
        "address": "0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c",
        "total_supply": 85501,
        "kind": "token",
        "totalSupply": 80501,
        "update_date": 1646226647000,
        "price_bnb": "107.57168201466517",
        "price_changes": {
            "day_priceusd": 6.5671297651871745,
            "week_priceusd": 6.888346250409315,
            "hour_priceusd": 6.5671297651871745,
            "month_priceusd": 0
        },
        "market_cap": 4411657721.332781,
        "price": 51597.73243977007,
        "decimals": 18,
        "name": "BTCB Token",
        "category": "token",
        "readable_update_date": "2022-03-02T13:10:47.000Z",
        "coin": {
            "image": {
                "small": "https://assets.coingecko.com/coins/images/14108/small/Binance-bitcoin.png?1617332330",
                "large": "https://assets.coingecko.com/coins/images/14108/large/Binance-bitcoin.png?1617332330",
                "thumb": "https://assets.coingecko.com/coins/images/14108/thumb/Binance-bitcoin.png?1617332330"
            },
            "community_data": {
                "twitter_followers": 0,
                "telegram_channel_user_count": null,
                "facebook_likes": null,
                "reddit_subscribers": 0,
                "reddit_average_posts_48h": 0,
                "reddit_average_comments_48h": 0,
                "reddit_accounts_active_48h": 0
            },
            "coin_id": "binance-bitcoin",
            "asset_platform_id": "binance-smart-chain",
            "public_notice": null,
            "description": "Pegged tokens such as BTCB, are 100% backed by the native coin in reserve, which is Bitcoin (BTC) in BTCB’s case.",
            "tickers": [
                {
                    "last_fetch_at": "2021-06-21T12:22:37+00:00",
                    "is_anomaly": false,
                    "last": 0.060155215657155,
                    "last_traded_at": "2021-06-21T12:22:37+00:00",
                    "coin_id": "ethereum",
                    "converted_volume": {
                        "btc": 152.742,
                        "usd": 4954003,
                        "eth": 2524
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 2551.01721943594,
                    "bid_ask_spread_percentage": 0.602713,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x2170ed0880ac9a755fd29b2688956bd959f933f8",
                    "converted_last": {
                        "btc": 0.99533949,
                        "usd": 32283,
                        "eth": 16.445106
                    },
                    "token_info_url": null,
                    "trust_score": "green",
                    "base": "0X2170ED0880AC9A755FD29B2688956BD959F933F8",
                    "timestamp": "2021-06-21T12:22:37+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:03:40+00:00",
                    "is_anomaly": false,
                    "last": 32471.8862449659,
                    "last_traded_at": "2021-06-21T11:03:40+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 733.733,
                        "usd": 23913790,
                        "eth": 12227
                    },
                    "target_coin_id": "binance-usd",
                    "is_stale": false,
                    "target": "BUSD",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 739.416390801336,
                    "bid_ask_spread_percentage": 0.602713,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c",
                    "converted_last": {
                        "btc": 0.99231304,
                        "usd": 32341,
                        "eth": 16.536326
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c",
                    "trust_score": "green",
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-21T11:03:40+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:04:45+00:00",
                    "is_anomaly": false,
                    "last": 0.84661944647065,
                    "last_traded_at": "2021-06-21T12:04:45+00:00",
                    "coin_id": "t-bitcoin",
                    "converted_volume": {
                        "btc": 8.475062,
                        "usd": 274040,
                        "eth": 139.024
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 10.1535848579999,
                    "bid_ask_spread_percentage": 0.602724,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x2cd1075682b0fccaadd0ca629e138e64015ba11c",
                    "converted_last": {
                        "btc": 0.98590538,
                        "usd": 31879,
                        "eth": 16.17268
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x2cd1075682b0fccaadd0ca629e138e64015ba11c",
                    "trust_score": "green",
                    "base": "0X2CD1075682B0FCCAADD0CA629E138E64015BA11C",
                    "timestamp": "2021-06-21T12:04:45+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:14:43+00:00",
                    "is_anomaly": false,
                    "last": 107.530871383849,
                    "last_traded_at": "2021-06-21T12:14:43+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 66.287,
                        "usd": 2151935,
                        "eth": 1090
                    },
                    "target_coin_id": "binancecoin",
                    "is_stale": false,
                    "target": "BNB",
                    "market": {
                        "identifier": "bakeryswap",
                        "name": "Bakeryswap",
                        "has_trading_incentive": false
                    },
                    "volume": 66.0998642296781,
                    "bid_ask_spread_percentage": 0.602727,
                    "trade_url": "https://www.bakeryswap.org/#/swap/0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c",
                    "converted_last": {
                        "btc": 1.002833,
                        "usd": 32556,
                        "eth": 16.495942
                    },
                    "token_info_url": null,
                    "trust_score": "green",
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-21T12:14:43+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:10:42+00:00",
                    "is_anomaly": false,
                    "last": 0.0002975226307629923,
                    "last_traded_at": "2021-06-21T11:10:42+00:00",
                    "coin_id": "swampy",
                    "converted_volume": {
                        "btc": 0.31416459,
                        "usd": 10160.03,
                        "eth": 5.248332
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 950.823636803543,
                    "bid_ask_spread_percentage": 0.604262,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0xc5a49b4cbe004b6fd55b30ba1de6ac360ff9765d",
                    "converted_last": {
                        "btc": 1.110548,
                        "usd": 35915,
                        "eth": 18.552454
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0xc5a49b4cbe004b6fd55b30ba1de6ac360ff9765d",
                    "trust_score": "green",
                    "base": "0XC5A49B4CBE004B6FD55B30BA1DE6AC360FF9765D",
                    "timestamp": "2021-06-21T11:10:42+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:07:17+00:00",
                    "is_anomaly": false,
                    "last": 0.0000184949811866764,
                    "last_traded_at": "2021-06-21T12:07:17+00:00",
                    "coin_id": "zcore-finance",
                    "converted_volume": {
                        "btc": 0.10269263,
                        "usd": 3317.47,
                        "eth": 1.685437
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 5605.44133482507,
                    "bid_ask_spread_percentage": 0.604694,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x0288d3e353fe2299f11ea2c2e1696b4a648ecc07",
                    "converted_last": {
                        "btc": 0.99054808,
                        "usd": 32000,
                        "eth": 16.257312
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x0288d3e353fe2299f11ea2c2e1696b4a648ecc07",
                    "trust_score": "green",
                    "base": "0X0288D3E353FE2299F11EA2C2E1696B4A648ECC07",
                    "timestamp": "2021-06-21T12:07:17+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T10:54:43+00:00",
                    "is_anomaly": false,
                    "last": 32557.872934028732,
                    "last_traded_at": "2021-06-21T10:54:43+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 0.35982754,
                        "usd": 11734.46,
                        "eth": 5.994843
                    },
                    "target_coin_id": "tether",
                    "is_stale": false,
                    "target": "USDT",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 0.361693069816511,
                    "bid_ask_spread_percentage": 0.608327,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c",
                    "converted_last": {
                        "btc": 0.99484222,
                        "usd": 32443,
                        "eth": 16.574394
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c",
                    "trust_score": "green",
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-21T10:54:43+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:30:52+00:00",
                    "is_anomaly": false,
                    "last": 107.677835045296,
                    "last_traded_at": "2021-06-21T12:30:52+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 0.08808613,
                        "usd": 2860.71,
                        "eth": 1.45395
                    },
                    "target_coin_id": "binancecoin",
                    "is_stale": false,
                    "target": "BNB",
                    "market": {
                        "identifier": "julswap",
                        "name": "Julswap",
                        "has_trading_incentive": false
                    },
                    "volume": 0.0879342784821802,
                    "bid_ask_spread_percentage": 0.608499,
                    "trade_url": "https://julswap.com/#/swap/0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c",
                    "converted_last": {
                        "btc": 1.001727,
                        "usd": 32532,
                        "eth": 16.534505
                    },
                    "token_info_url": null,
                    "trust_score": "green",
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-21T12:30:52+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:17:24+00:00",
                    "is_anomaly": false,
                    "last": 0.00000585774746151465,
                    "last_traded_at": "2021-06-21T12:17:24+00:00",
                    "coin_id": "icarus-finance",
                    "converted_volume": {
                        "btc": 0.03450922,
                        "usd": 1119.97,
                        "eth": 0.5692998
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 5888.93903846065,
                    "bid_ask_spread_percentage": 0.609941,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x0ca2f09eca544b61b91d149dea2580c455c564b2",
                    "converted_last": {
                        "btc": 1.000386,
                        "usd": 32467,
                        "eth": 16.503396
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x0ca2f09eca544b61b91d149dea2580c455c564b2",
                    "trust_score": "green",
                    "base": "0X0CA2F09ECA544B61B91D149DEA2580C455C564B2",
                    "timestamp": "2021-06-21T12:17:24+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:04:34+00:00",
                    "is_anomaly": false,
                    "last": 0.0000010343515793681254,
                    "last_traded_at": "2021-06-21T11:04:34+00:00",
                    "coin_id": "buckswap",
                    "converted_volume": {
                        "btc": 0.08627597,
                        "usd": 2811.9,
                        "eth": 1.437739
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 81803.9996463126,
                    "bid_ask_spread_percentage": 0.610221,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0xda28b68483c44f563168b6e4b7df9209a02ed64e",
                    "converted_last": {
                        "btc": 1.019641,
                        "usd": 33232,
                        "eth": 16.991725
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0xda28b68483c44f563168b6e4b7df9209a02ed64e",
                    "trust_score": "green",
                    "base": "0XDA28B68483C44F563168B6E4B7DF9209A02ED64E",
                    "timestamp": "2021-06-21T11:04:34+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T10:50:35+00:00",
                    "is_anomaly": false,
                    "last": 0.0000012321755546602618,
                    "last_traded_at": "2021-06-21T10:50:35+00:00",
                    "coin_id": "pokeball",
                    "converted_volume": {
                        "btc": 0.00890367,
                        "usd": 290.99,
                        "eth": 0.14819125
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 6972.44742296264,
                    "bid_ask_spread_percentage": 0.617353,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0xcdad3683335a4a96d2c437dd4513b061e4aec4ff",
                    "converted_last": {
                        "btc": 1.036362,
                        "usd": 33871,
                        "eth": 17.249031
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0xcdad3683335a4a96d2c437dd4513b061e4aec4ff",
                    "trust_score": "green",
                    "base": "0XCDAD3683335A4A96D2C437DD4513B061E4AEC4FF",
                    "timestamp": "2021-06-21T10:50:35+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:40:07+00:00",
                    "is_anomaly": false,
                    "last": 0.00000959134305243056,
                    "last_traded_at": "2021-06-21T11:40:07+00:00",
                    "coin_id": "eggplant-finance",
                    "converted_volume": {
                        "btc": 0.02235988,
                        "usd": 717.08,
                        "eth": 0.37300729
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 2161.39988033481,
                    "bid_ask_spread_percentage": 0.618056,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x21adb1c644663069e83059ac3f9d9ca1133d29e4",
                    "converted_last": {
                        "btc": 1.078586,
                        "usd": 34590,
                        "eth": 17.992967
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x21adb1c644663069e83059ac3f9d9ca1133d29e4",
                    "trust_score": "green",
                    "base": "0X21ADB1C644663069E83059AC3F9D9CA1133D29E4",
                    "timestamp": "2021-06-21T11:40:07+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:20:51+00:00",
                    "is_anomaly": false,
                    "last": 0.000420600989015227,
                    "last_traded_at": "2021-06-21T12:20:51+00:00",
                    "coin_id": "pancakeswap-token",
                    "converted_volume": {
                        "btc": 0.05191203,
                        "usd": 1684.06,
                        "eth": 0.85760265
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 121.030770446225,
                    "bid_ask_spread_percentage": 0.632542,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82",
                    "converted_last": {
                        "btc": 1.019769,
                        "usd": 33082,
                        "eth": 16.846901
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82",
                    "trust_score": "green",
                    "base": "0X0E09FABB73BD3ADE0A17ECC321FD13A19E81CE82",
                    "timestamp": "2021-06-21T12:20:51+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:23:37+00:00",
                    "is_anomaly": false,
                    "last": 0.00000469624999429594,
                    "last_traded_at": "2021-06-21T12:23:37+00:00",
                    "coin_id": "etna-network",
                    "converted_volume": {
                        "btc": 0.00384931,
                        "usd": 124.87,
                        "eth": 0.06359886
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 821.444855902286,
                    "bid_ask_spread_percentage": 0.64225,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x51f35073ff7cf54c9e86b7042e59a8cc9709fc46",
                    "converted_last": {
                        "btc": 0.99782333,
                        "usd": 32369,
                        "eth": 16.486166
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x51f35073ff7cf54c9e86b7042e59a8cc9709fc46",
                    "trust_score": "green",
                    "base": "0X51F35073FF7CF54C9E86B7042E59A8CC9709FC46",
                    "timestamp": "2021-06-21T12:23:37+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:57:25+00:00",
                    "is_anomaly": false,
                    "last": 0.0000010887425091912173,
                    "last_traded_at": "2021-06-21T11:57:25+00:00",
                    "coin_id": "syndex",
                    "converted_volume": {
                        "btc": 0.00369773,
                        "usd": 119.5,
                        "eth": 0.06068565
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 3414.70139645552,
                    "bid_ask_spread_percentage": 0.669364,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0xe2fd51755e84d01d865e869f284ae03c995f8f2c",
                    "converted_last": {
                        "btc": 0.99461944,
                        "usd": 32143,
                        "eth": 16.323305
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0xe2fd51755e84d01d865e869f284ae03c995f8f2c",
                    "trust_score": "green",
                    "base": "0XE2FD51755E84D01D865E869F284AE03C995F8F2C",
                    "timestamp": "2021-06-21T11:57:25+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:57:31+00:00",
                    "is_anomaly": false,
                    "last": 0.0000308758628129265,
                    "last_traded_at": "2021-06-21T11:57:31+00:00",
                    "coin_id": "dai",
                    "converted_volume": {
                        "btc": 0.00426327,
                        "usd": 137.78,
                        "eth": 0.06996717
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 137.350241391659,
                    "bid_ask_spread_percentage": 0.746886,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3",
                    "converted_last": {
                        "btc": 1.005297,
                        "usd": 32489,
                        "eth": 16.498549
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x6b175474e89094c44da98b954eedeac495271d0f",
                    "trust_score": "green",
                    "base": "0X1AF3F329E8BE154074D8769D1FFA4EE058B1DBC3",
                    "timestamp": "2021-06-21T11:57:31+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T10:57:38+00:00",
                    "is_anomaly": false,
                    "last": 0.000030640341466881055,
                    "last_traded_at": "2021-06-21T10:57:38+00:00",
                    "coin_id": "usd-coin",
                    "converted_volume": {
                        "btc": 0.00358347,
                        "usd": 116.87,
                        "eth": 0.05969955
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 117.254571112804,
                    "bid_ask_spread_percentage": 0.751658,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d",
                    "converted_last": {
                        "btc": 0.99742431,
                        "usd": 32531,
                        "eth": 16.61681
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                    "trust_score": "green",
                    "base": "0X8AC76A51CC950D9822D68B83FE1AD97B32CD580D",
                    "timestamp": "2021-06-21T10:57:38+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:28:49+00:00",
                    "is_anomaly": false,
                    "last": 0.00000492174729392541,
                    "last_traded_at": "2021-06-21T11:28:49+00:00",
                    "coin_id": "pantherswap",
                    "converted_volume": {
                        "btc": 0.00025404,
                        "usd": 8.16,
                        "eth": 0.00424967
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 50.1372932535287,
                    "bid_ask_spread_percentage": 0.89102,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x1f546ad641b56b86fd9dceac473d1c7a357276b7",
                    "converted_last": {
                        "btc": 1.029485,
                        "usd": 33056,
                        "eth": 17.221671
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x1f546ad641b56b86fd9dceac473d1c7a357276b7",
                    "trust_score": "green",
                    "base": "0X1F546AD641B56B86FD9DCEAC473D1C7A357276B7",
                    "timestamp": "2021-06-21T11:28:49+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:17:40+00:00",
                    "is_anomaly": false,
                    "last": 0.000040071605768614,
                    "last_traded_at": "2021-06-21T10:42:00+00:00",
                    "coin_id": "binance-peg-cardano",
                    "converted_volume": {
                        "btc": 0.00001487,
                        "usd": 0.486715,
                        "eth": 0.00024744
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 0.371486076880544,
                    "bid_ask_spread_percentage": 4.669882,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x3ee2200efb3400fabb9aacf31297cbdd1d435d47",
                    "converted_last": {
                        "btc": 0.99914724,
                        "usd": 32696,
                        "eth": 16.621976
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x3ee2200efb3400fabb9aacf31297cbdd1d435d47",
                    "trust_score": "green",
                    "base": "0X3EE2200EFB3400FABB9AACF31297CBDD1D435D47",
                    "timestamp": "2021-06-21T10:42:00+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T10:36:46+00:00",
                    "is_anomaly": false,
                    "last": 0.0000307190388273627,
                    "last_traded_at": "2021-06-21T10:36:46+00:00",
                    "coin_id": "tether",
                    "converted_volume": {
                        "btc": 1310,
                        "usd": 42857365,
                        "eth": 21704
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "market": {
                        "identifier": "mdex_bsc",
                        "name": "Mdex BSC",
                        "has_trading_incentive": true
                    },
                    "volume": 0,
                    "bid_ask_spread_percentage": 0.602713,
                    "trade_url": "https://bsc.mdex.com/#/swap?inputCurrency=0x55d398326f99059ff775485246999027b3197955&outputCurrency=0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c",
                    "converted_last": {
                        "btc": 0.9822647,
                        "usd": 32143,
                        "eth": 16.278151
                    },
                    "token_info_url": null,
                    "trust_score": "yellow",
                    "base": "0X55D398326F99059FF775485246999027B3197955",
                    "timestamp": "2021-06-21T10:36:46+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:48:11+00:00",
                    "is_anomaly": false,
                    "last": 0.0603589823955277,
                    "last_traded_at": "2021-06-21T11:48:11+00:00",
                    "coin_id": "ethereum",
                    "converted_volume": {
                        "btc": 186.29,
                        "usd": 6009095,
                        "eth": 3074
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "market": {
                        "identifier": "mdex_bsc",
                        "name": "Mdex BSC",
                        "has_trading_incentive": true
                    },
                    "volume": 0,
                    "bid_ask_spread_percentage": 0.602714,
                    "trade_url": "https://bsc.mdex.com/#/swap?inputCurrency=0x2170ed0880ac9a755fd29b2688956bd959f933f8&outputCurrency=0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c",
                    "converted_last": {
                        "btc": 0.96256281,
                        "usd": 31049,
                        "eth": 15.883785
                    },
                    "token_info_url": null,
                    "trust_score": "yellow",
                    "base": "0X2170ED0880AC9A755FD29B2688956BD959F933F8",
                    "timestamp": "2021-06-21T11:48:11+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:12:26+00:00",
                    "is_anomaly": false,
                    "last": 107.253995262677,
                    "last_traded_at": "2021-06-21T12:12:26+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 6.809414,
                        "usd": 221052,
                        "eth": 111.881
                    },
                    "target_coin_id": "binancecoin",
                    "is_stale": false,
                    "target": "BNB",
                    "market": {
                        "identifier": "apeswap",
                        "name": "ApeSwap",
                        "has_trading_incentive": false
                    },
                    "volume": 6.80770677338501,
                    "bid_ask_spread_percentage": 0.602893,
                    "trade_url": "https://dex.apeswap.finance/#/swap/0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c",
                    "converted_last": {
                        "btc": 1.000251,
                        "usd": 32471,
                        "eth": 16.434535
                    },
                    "token_info_url": null,
                    "trust_score": "yellow",
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-21T12:12:26+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:11:09+00:00",
                    "is_anomaly": false,
                    "last": 107.842175042902,
                    "last_traded_at": "2021-06-21T12:11:09+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 0.05453313,
                        "usd": 1769.85,
                        "eth": 0.8960019
                    },
                    "target_coin_id": "wbnb",
                    "is_stale": false,
                    "target": "0XBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C",
                    "market": {
                        "identifier": "pinkswap",
                        "name": "PinkSwap",
                        "has_trading_incentive": false
                    },
                    "volume": 0,
                    "bid_ask_spread_percentage": 0.609557,
                    "trade_url": "https://exchange.pinkswap.finance/#/swap?inputCurrency=0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c&outputCurrency=0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
                    "converted_last": {
                        "btc": 1.005736,
                        "usd": 32641,
                        "eth": 16.524662
                    },
                    "token_info_url": null,
                    "trust_score": "yellow",
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-21T12:11:09+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:11:51+00:00",
                    "is_anomaly": false,
                    "last": 32064.1775126045,
                    "last_traded_at": "2021-06-21T11:48:54+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 0.02940748,
                        "usd": 948.59,
                        "eth": 0.48526911
                    },
                    "target_coin_id": "binance-usd",
                    "is_stale": false,
                    "target": "BUSD",
                    "market": {
                        "identifier": "value_liquid_bsc",
                        "name": "vSwap BSC",
                        "has_trading_incentive": false
                    },
                    "volume": 0.0291976622588663,
                    "bid_ask_spread_percentage": 0.654875,
                    "trade_url": "https://bsc.valuedefi.io/#/vswap",
                    "converted_last": {
                        "btc": 1.007186,
                        "usd": 32488,
                        "eth": 16.620136
                    },
                    "token_info_url": null,
                    "trust_score": "yellow",
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-21T11:48:54+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:28:48+00:00",
                    "is_anomaly": false,
                    "last": 0.0000012058494676462615,
                    "last_traded_at": "2021-06-21T09:55:21+00:00",
                    "coin_id": "dekbox",
                    "converted_volume": {
                        "btc": 0.00289484,
                        "usd": 96.24,
                        "eth": 0.04759499
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 2398.64254892003,
                    "bid_ask_spread_percentage": 0.895674,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0xe52c5a3590952f3ed6fccf89a0bd7f38e11c5b98",
                    "converted_last": {
                        "btc": 1.000842,
                        "usd": 33275,
                        "eth": 16.45518
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0xe52c5a3590952f3ed6fccf89a0bd7f38e11c5b98",
                    "trust_score": "yellow",
                    "base": "0XE52C5A3590952F3ED6FCCF89A0BD7F38E11C5B98",
                    "timestamp": "2021-06-21T09:55:21+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:41:47+00:00",
                    "is_anomaly": false,
                    "last": 1.6744559782905917e-13,
                    "last_traded_at": "2021-06-21T11:41:47+00:00",
                    "coin_id": "feg-token-bsc",
                    "converted_volume": {
                        "btc": 0.00961504,
                        "usd": 308.52,
                        "eth": 0.1603904
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 53542561793.2168,
                    "bid_ask_spread_percentage": 0.918545,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0xacfc95585d80ab62f67a14c566c1b7a49fe91167",
                    "converted_last": {
                        "btc": 1.072452,
                        "usd": 34412,
                        "eth": 17.8898
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0xacfc95585d80ab62f67a14c566c1b7a49fe91167",
                    "trust_score": "yellow",
                    "base": "0XACFC95585D80AB62F67A14C566C1B7A49FE91167",
                    "timestamp": "2021-06-21T11:41:47+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:47:23+00:00",
                    "is_anomaly": false,
                    "last": 3.4058189146928886e-15,
                    "last_traded_at": "2021-06-21T11:47:23+00:00",
                    "coin_id": "tardigrades-finance",
                    "converted_volume": {
                        "btc": 0.00400329,
                        "usd": 128.38,
                        "eth": 0.06625832
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 1018952356626.54,
                    "bid_ask_spread_percentage": 1.215058,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x92a42db88ed0f02c71d439e55962ca7cab0168b5",
                    "converted_last": {
                        "btc": 1.153563,
                        "usd": 36993,
                        "eth": 19.092596
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x92a42db88ed0f02c71d439e55962ca7cab0168b5",
                    "trust_score": "yellow",
                    "base": "0X92A42DB88ED0F02C71D439E55962CA7CAB0168B5",
                    "timestamp": "2021-06-21T11:47:23+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:48:11+00:00",
                    "is_anomaly": false,
                    "last": 853168.360914886,
                    "last_traded_at": "2021-06-21T11:48:11+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 0.00162396,
                        "usd": 52.38,
                        "eth": 0.02679789
                    },
                    "target_coin_id": "dekbox",
                    "is_stale": false,
                    "target": "0XE52C5A3590952F3ED6FCCF89A0BD7F38E11C5B98",
                    "market": {
                        "identifier": "mdex_bsc",
                        "name": "Mdex BSC",
                        "has_trading_incentive": true
                    },
                    "volume": 0,
                    "bid_ask_spread_percentage": 1.451688,
                    "trade_url": "https://bsc.mdex.com/#/swap?inputCurrency=0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c&outputCurrency=0xe52c5a3590952f3ed6fccf89a0bd7f38e11c5b98",
                    "converted_last": {
                        "btc": 1.034487,
                        "usd": 33369,
                        "eth": 17.070641
                    },
                    "token_info_url": null,
                    "trust_score": "yellow",
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-21T11:48:11+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:24:33+00:00",
                    "is_anomaly": false,
                    "last": 0.000001752480291868576,
                    "last_traded_at": "2021-06-21T08:43:40+00:00",
                    "coin_id": "marshmellowdefi",
                    "converted_volume": {
                        "btc": 0.00002858,
                        "usd": 0.948704,
                        "eth": 0.00046843
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 16.2471220833249,
                    "bid_ask_spread_percentage": 1.446858,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x787732f27d18495494cea3792ed7946bbcff8db2",
                    "converted_last": {
                        "btc": 1.003793,
                        "usd": 33320,
                        "eth": 16.451703
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x787732f27d18495494cea3792ed7946bbcff8db2",
                    "trust_score": "yellow",
                    "base": "0X787732F27D18495494CEA3792ED7946BBCFF8DB2",
                    "timestamp": "2021-06-21T08:43:40+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T10:59:35+00:00",
                    "is_anomaly": false,
                    "last": 1.37498037320176e-12,
                    "last_traded_at": "2021-06-21T10:59:35+00:00",
                    "coin_id": "gmr-finance",
                    "converted_volume": {
                        "btc": 0.00000221,
                        "usd": 0.072167,
                        "eth": 0.00003685
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 1510536.02095032,
                    "bid_ask_spread_percentage": 5.044731,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x0523215dcafbf4e4aa92117d13c6985a3bef27d7",
                    "converted_last": {
                        "btc": 1.065312,
                        "usd": 34746,
                        "eth": 17.741962
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x0523215dcafbf4e4aa92117d13c6985a3bef27d7",
                    "trust_score": "yellow",
                    "base": "0X0523215DCAFBF4E4AA92117D13C6985A3BEF27D7",
                    "timestamp": "2021-06-21T10:59:35+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:25:54+00:00",
                    "is_anomaly": false,
                    "last": 0.0000265139651960857,
                    "last_traded_at": "2021-06-21T12:25:54+00:00",
                    "coin_id": "vai",
                    "converted_volume": {
                        "btc": 0.0000156,
                        "usd": 0.506085,
                        "eth": 0.00025773
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 0.567992798693012,
                    "bid_ask_spread_percentage": 11.411059,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x4bd17003473389a42daf6a0a729f6fdb328bbbd7",
                    "converted_last": {
                        "btc": 1.035833,
                        "usd": 33605,
                        "eth": 17.114076
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x4bd17003473389a42daf6a0a729f6fdb328bbbd7",
                    "trust_score": "yellow",
                    "base": "0X4BD17003473389A42DAF6A0A729F6FDB328BBBD7",
                    "timestamp": "2021-06-21T12:25:54+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T10:49:47+00:00",
                    "is_anomaly": false,
                    "last": 0.0000303732947198029,
                    "last_traded_at": "2021-06-21T10:49:47+00:00",
                    "coin_id": "wrapped-ust-bsc",
                    "converted_volume": {
                        "btc": 0.0000236,
                        "usd": 0.77115,
                        "eth": 0.00039275
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 0.774033727314873,
                    "bid_ask_spread_percentage": 16.403963,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x23396cf899ca06c4472205fc903bdb4de249d6fc",
                    "converted_last": {
                        "btc": 1.003636,
                        "usd": 32801,
                        "eth": 16.705535
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x23396cf899ca06c4472205fc903bdb4de249d6fc",
                    "trust_score": "yellow",
                    "base": "0X23396CF899CA06C4472205FC903BDB4DE249D6FC",
                    "timestamp": "2021-06-21T10:49:47+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:00:44+00:00",
                    "is_anomaly": false,
                    "last": 0.0000211566138308692,
                    "last_traded_at": "2021-06-21T05:37:22+00:00",
                    "coin_id": "binance-peg-xrp",
                    "converted_volume": {
                        "btc": 2.08837e-7,
                        "usd": 0.00714128,
                        "eth": 0.00000339
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 0.0100000000002183,
                    "bid_ask_spread_percentage": 29.785687,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x1d2f0da169ceb9fc7b3144628db156f3f6c60dbe",
                    "converted_last": {
                        "btc": 0.98709952,
                        "usd": 33754,
                        "eth": 16.017396
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x1d2f0da169ceb9fc7b3144628db156f3f6c60dbe",
                    "trust_score": "red",
                    "base": "0X1D2F0DA169CEB9FC7B3144628DB156F3F6C60DBE",
                    "timestamp": "2021-06-21T05:37:22+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:24:23+00:00",
                    "is_anomaly": false,
                    "last": 1.384209901427653e-18,
                    "last_traded_at": "2021-06-21T10:45:50+00:00",
                    "coin_id": "gocerberus",
                    "converted_volume": {
                        "btc": 0.00000999,
                        "usd": 0.326529,
                        "eth": 0.00016621
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 7596161891295,
                    "bid_ask_spread_percentage": 35.13772,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x8b3268a23131dafbd77165690767f285c1aac6c5",
                    "converted_last": {
                        "btc": 0.95026257,
                        "usd": 31055,
                        "eth": 15.807422
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x8b3268a23131dafbd77165690767f285c1aac6c5",
                    "trust_score": "red",
                    "base": "0X8B3268A23131DAFBD77165690767F285C1AAC6C5",
                    "timestamp": "2021-06-21T10:45:50+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T10:59:24+00:00",
                    "is_anomaly": false,
                    "last": 0.000007709979147282506,
                    "last_traded_at": "2021-06-21T10:59:24+00:00",
                    "coin_id": "binance-peg-dogecoin",
                    "converted_volume": {
                        "btc": 0.00000261,
                        "usd": 0.085146,
                        "eth": 0.00004348
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 0.341626960000212,
                    "bid_ask_spread_percentage": 39.830179,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0xba2ae424d960c26247dd6c32edc70b295c744c43",
                    "converted_last": {
                        "btc": 0.99112012,
                        "usd": 32327,
                        "eth": 16.506355
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0xba2ae424d960c26247dd6c32edc70b295c744c43",
                    "trust_score": "red",
                    "base": "0XBA2AE424D960C26247DD6C32EDC70B295C744C43",
                    "timestamp": "2021-06-21T10:59:24+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:23:38+00:00",
                    "is_anomaly": false,
                    "last": 5.46419100995269e-10,
                    "last_traded_at": "2021-06-21T12:23:38+00:00",
                    "coin_id": "footballstars",
                    "converted_volume": {
                        "btc": 1.33e-10,
                        "usd": 0.00000433,
                        "eth": 2.203e-9
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 0.257559106612462,
                    "bid_ask_spread_percentage": -200.719216,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x6507458bb53aec6be863161641ec28739c41cc97",
                    "converted_last": {
                        "btc": 0.94747607,
                        "usd": 30736,
                        "eth": 15.654322
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x6507458bb53aec6be863161641ec28739c41cc97",
                    "trust_score": "red",
                    "base": "0X6507458BB53AEC6BE863161641EC28739C41CC97",
                    "timestamp": "2021-06-21T12:23:38+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:48:12+00:00",
                    "is_anomaly": false,
                    "last": 32372.0515348252,
                    "last_traded_at": "2021-06-21T11:48:12+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 96.133,
                        "usd": 3100927,
                        "eth": 1586
                    },
                    "target_coin_id": "binance-usd",
                    "is_stale": false,
                    "target": "0XE9E7CEA3DEDCA5984780BAFC599BD69ADD087D56",
                    "market": {
                        "identifier": "mdex_bsc",
                        "name": "Mdex BSC",
                        "has_trading_incentive": true
                    },
                    "volume": 0,
                    "bid_ask_spread_percentage": 0.602744,
                    "trade_url": "https://bsc.mdex.com/#/swap?inputCurrency=0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c&outputCurrency=0xe9e7cea3dedca5984780bafc599bd69add087d56",
                    "converted_last": {
                        "btc": 1.016857,
                        "usd": 32800,
                        "eth": 16.779719
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-21T11:48:12+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:48:11+00:00",
                    "is_anomaly": false,
                    "last": 17965.3919639322,
                    "last_traded_at": "2021-06-21T11:48:11+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 86.914,
                        "usd": 2803564,
                        "eth": 1434
                    },
                    "target_coin_id": "mdex",
                    "is_stale": false,
                    "target": "0X9C65AB58D8D978DB963E63F2BFB7121627E3A739",
                    "market": {
                        "identifier": "mdex_bsc",
                        "name": "Mdex BSC",
                        "has_trading_incentive": true
                    },
                    "volume": 0,
                    "bid_ask_spread_percentage": 0.60282,
                    "trade_url": "https://bsc.mdex.com/#/swap?inputCurrency=0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c&outputCurrency=0x9c65ab58d8d978db963e63f2bfb7121627e3a739",
                    "converted_last": {
                        "btc": 0.98896156,
                        "usd": 31901,
                        "eth": 16.319405
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-21T11:48:11+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T10:59:42+00:00",
                    "is_anomaly": false,
                    "last": 5.5190231206174214e-15,
                    "last_traded_at": "2021-06-21T06:18:42+00:00",
                    "coin_id": "upshib",
                    "converted_volume": {
                        "btc": 2.2e-11,
                        "usd": 7.56329e-7,
                        "eth": 3.53e-10
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 8310.72358244658,
                    "bid_ask_spread_percentage": -200.442474,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x795d38678d5a3f7ad80dded5e27644e9c0352904",
                    "converted_last": {
                        "btc": 0.47672805,
                        "usd": 16489.59,
                        "eth": 7.686611
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x795d38678d5a3f7ad80dded5e27644e9c0352904",
                    "trust_score": null,
                    "base": "0X795D38678D5A3F7AD80DDED5E27644E9C0352904",
                    "timestamp": "2021-06-21T06:18:42+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:06:12+00:00",
                    "is_anomaly": false,
                    "last": 0.0005309862916165646,
                    "last_traded_at": "2021-06-21T07:24:46+00:00",
                    "coin_id": "belt",
                    "converted_volume": {
                        "btc": 2.459e-9,
                        "usd": 0.00008103,
                        "eth": 3.9783e-8
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 0.00000464506638087059,
                    "bid_ask_spread_percentage": -210.516926,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0xe0e514c71282b6f4e823703a39374cf58dc3ea4f",
                    "converted_last": {
                        "btc": 0.99684427,
                        "usd": 32853,
                        "eth": 16.129418
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0xe0e514c71282b6f4e823703a39374cf58dc3ea4f",
                    "trust_score": null,
                    "base": "0XE0E514C71282B6F4E823703A39374CF58DC3EA4F",
                    "timestamp": "2021-06-21T07:24:46+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:23:41+00:00",
                    "is_anomaly": false,
                    "last": 32366.38575794265,
                    "last_traded_at": "2021-06-21T12:23:41+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 370.654,
                        "usd": 12023999,
                        "eth": 6124
                    },
                    "target_coin_id": "binance-usd",
                    "is_stale": false,
                    "target": "BUSD",
                    "market": {
                        "identifier": "wault_swap",
                        "name": "WaultSwap",
                        "has_trading_incentive": false
                    },
                    "volume": 369.89409031153735,
                    "bid_ask_spread_percentage": null,
                    "trade_url": "https://swap.wault.finance/#/swap",
                    "converted_last": {
                        "btc": 1.002055,
                        "usd": 32507,
                        "eth": 16.556087
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "BTCB",
                    "timestamp": "2021-06-21T12:23:41+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:23:40+00:00",
                    "is_anomaly": false,
                    "last": 0.00003093539712742599,
                    "last_traded_at": "2021-06-21T12:23:40+00:00",
                    "coin_id": "tether",
                    "converted_volume": {
                        "btc": 145.065,
                        "usd": 4705898,
                        "eth": 2397
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "wault_swap",
                        "name": "WaultSwap",
                        "has_trading_incentive": false
                    },
                    "volume": 4675191.3103111265,
                    "bid_ask_spread_percentage": null,
                    "trade_url": "https://swap.wault.finance/#/swap",
                    "converted_last": {
                        "btc": 1.003015,
                        "usd": 32538,
                        "eth": 16.571949
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "USDT",
                    "timestamp": "2021-06-21T12:23:40+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:23:18+00:00",
                    "is_anomaly": false,
                    "last": 32528.689868418733,
                    "last_traded_at": "2021-06-21T12:23:18+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 109.147,
                        "usd": 3540732,
                        "eth": 1803
                    },
                    "target_coin_id": "binance-usd",
                    "is_stale": false,
                    "target": "BUSD",
                    "market": {
                        "identifier": "dodo_bsc",
                        "name": "Dodo BSC",
                        "has_trading_incentive": false
                    },
                    "volume": 108.38,
                    "bid_ask_spread_percentage": null,
                    "trade_url": null,
                    "converted_last": {
                        "btc": 1.00708,
                        "usd": 32670,
                        "eth": 16.639109
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-21T12:23:18+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:23:37+00:00",
                    "is_anomaly": false,
                    "last": 0.06006887187023513,
                    "last_traded_at": "2021-06-21T12:23:37+00:00",
                    "coin_id": "ethereum",
                    "converted_volume": {
                        "btc": 48.859436,
                        "usd": 1584997,
                        "eth": 807.262
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "wault_swap",
                        "name": "WaultSwap",
                        "has_trading_incentive": false
                    },
                    "volume": 817.933308134328,
                    "bid_ask_spread_percentage": null,
                    "trade_url": "https://swap.wault.finance/#/swap",
                    "converted_last": {
                        "btc": 0.99444572,
                        "usd": 32260,
                        "eth": 16.430361
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "ETH",
                    "timestamp": "2021-06-21T12:23:37+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:23:39+00:00",
                    "is_anomaly": false,
                    "last": 107.75709882341573,
                    "last_traded_at": "2021-06-21T12:23:39+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 32.456567,
                        "usd": 1052889,
                        "eth": 536.252
                    },
                    "target_coin_id": "wbnb",
                    "is_stale": false,
                    "target": "WBNB",
                    "market": {
                        "identifier": "wault_swap",
                        "name": "WaultSwap",
                        "has_trading_incentive": false
                    },
                    "volume": 32.376781682391595,
                    "bid_ask_spread_percentage": null,
                    "trade_url": "https://swap.wault.finance/#/swap",
                    "converted_last": {
                        "btc": 1.002464,
                        "usd": 32520,
                        "eth": 16.562845
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "BTCB",
                    "timestamp": "2021-06-21T12:23:39+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:14:14+00:00",
                    "is_anomaly": false,
                    "last": 107.45874634344085,
                    "last_traded_at": "2021-06-21T12:14:14+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 14.123934,
                        "usd": 458517,
                        "eth": 232.248
                    },
                    "target_coin_id": "wbnb",
                    "is_stale": false,
                    "target": "WBNB",
                    "market": {
                        "identifier": "pantherswap",
                        "name": "PantherSwap",
                        "has_trading_incentive": false
                    },
                    "volume": 14.093488232669674,
                    "bid_ask_spread_percentage": null,
                    "trade_url": "https://dex.pantherswap.com/#/swap",
                    "converted_last": {
                        "btc": 1.00216,
                        "usd": 32534,
                        "eth": 16.479101
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "BTCB",
                    "timestamp": "2021-06-21T12:14:14+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:28:03+00:00",
                    "is_anomaly": false,
                    "last": 32704.223452332204,
                    "last_traded_at": "2021-06-21T12:28:03+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 12.381895,
                        "usd": 402101,
                        "eth": 204.528
                    },
                    "target_coin_id": "binance-usd",
                    "is_stale": false,
                    "target": "BUSD",
                    "market": {
                        "identifier": "dodo_bsc",
                        "name": "Dodo BSC",
                        "has_trading_incentive": false
                    },
                    "volume": 12.228855211305984,
                    "bid_ask_spread_percentage": null,
                    "trade_url": null,
                    "converted_last": {
                        "btc": 1.012515,
                        "usd": 32881,
                        "eth": 16.725067
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-21T12:28:03+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:14:11+00:00",
                    "is_anomaly": false,
                    "last": 32644.4830708095,
                    "last_traded_at": "2021-06-21T12:14:11+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 6.807598,
                        "usd": 221001,
                        "eth": 111.941
                    },
                    "target_coin_id": "binance-usd",
                    "is_stale": false,
                    "target": "BUSD",
                    "market": {
                        "identifier": "pantherswap",
                        "name": "PantherSwap",
                        "has_trading_incentive": false
                    },
                    "volume": 6.779292159013806,
                    "bid_ask_spread_percentage": null,
                    "trade_url": "https://dex.pantherswap.com/#/swap",
                    "converted_last": {
                        "btc": 1.004175,
                        "usd": 32599,
                        "eth": 16.512235
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "BTCB",
                    "timestamp": "2021-06-21T12:14:11+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:22:03+00:00",
                    "is_anomaly": false,
                    "last": 33984.96254396259,
                    "last_traded_at": "2021-06-21T08:13:33+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 0.03028421,
                        "usd": 1000.86,
                        "eth": 0.49535993
                    },
                    "target_coin_id": "tether",
                    "is_stale": false,
                    "target": "USDT",
                    "market": {
                        "identifier": "dodo_bsc",
                        "name": "Dodo BSC",
                        "has_trading_incentive": false
                    },
                    "volume": 0.029424778641626403,
                    "bid_ask_spread_percentage": null,
                    "trade_url": null,
                    "converted_last": {
                        "btc": 1.029208,
                        "usd": 34014,
                        "eth": 16.834789
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-21T08:13:33+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:14:09+00:00",
                    "is_anomaly": false,
                    "last": 0.00000429342159210547,
                    "last_traded_at": "2021-06-21T10:27:52+00:00",
                    "coin_id": "pantherswap",
                    "converted_volume": {
                        "btc": 0.00023776,
                        "usd": 7.81,
                        "eth": 0.00392458
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pantherswap",
                        "name": "PantherSwap",
                        "has_trading_incentive": false
                    },
                    "volume": 56.19121096766316,
                    "bid_ask_spread_percentage": null,
                    "trade_url": "https://dex.pantherswap.com/#/swap",
                    "converted_last": {
                        "btc": 0.98554359,
                        "usd": 32382,
                        "eth": 16.267535
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "PANTHER",
                    "timestamp": "2021-06-21T10:27:52+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:10:20+00:00",
                    "is_anomaly": true,
                    "last": 0.009308729999027416,
                    "last_traded_at": "2021-06-21T12:10:20+00:00",
                    "coin_id": "wbnb",
                    "converted_volume": {
                        "btc": 400.15,
                        "usd": 12984721,
                        "eth": 6571
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 40822.2686986709,
                    "bid_ask_spread_percentage": 0.602712,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
                    "converted_last": {
                        "btc": 1.053017,
                        "usd": 34170,
                        "eth": 17.290882
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
                    "trust_score": "green",
                    "base": "0XBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C",
                    "timestamp": "2021-06-21T12:10:20+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:10:50+00:00",
                    "is_anomaly": true,
                    "last": 0.0000338878726084838,
                    "last_traded_at": "2021-06-21T12:10:50+00:00",
                    "coin_id": "frankenstein-finance",
                    "converted_volume": {
                        "btc": 0.07920346,
                        "usd": 2570.12,
                        "eth": 1.300547
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": false,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 2259.03188237627,
                    "bid_ask_spread_percentage": 0.608543,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x129e6d84c6cab9b0c2f37ad1d14a9fe2e59dab09",
                    "converted_last": {
                        "btc": 1.034612,
                        "usd": 33573,
                        "eth": 16.98867
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x129e6d84c6cab9b0c2f37ad1d14a9fe2e59dab09",
                    "trust_score": "green",
                    "base": "0X129E6D84C6CAB9B0C2F37AD1D14A9FE2E59DAB09",
                    "timestamp": "2021-06-21T12:10:50+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T05:37:36+00:00",
                    "is_anomaly": true,
                    "last": 104.797257963646,
                    "last_traded_at": "2021-06-21T05:37:36+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 43.611129,
                        "usd": 1491305,
                        "eth": 707.666
                    },
                    "target_coin_id": "wbnb",
                    "is_stale": false,
                    "target": "0XBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C",
                    "market": {
                        "identifier": "mdex_bsc",
                        "name": "Mdex BSC",
                        "has_trading_incentive": true
                    },
                    "volume": 0,
                    "bid_ask_spread_percentage": 0.602735,
                    "trade_url": "https://bsc.mdex.com/#/swap?inputCurrency=0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c&outputCurrency=0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
                    "converted_last": {
                        "btc": 0.99913706,
                        "usd": 34166,
                        "eth": 16.212726
                    },
                    "token_info_url": null,
                    "trust_score": "yellow",
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-21T05:37:36+00:00"
                },
                {
                    "last_fetch_at": "2021-06-20T23:55:56+00:00",
                    "is_anomaly": false,
                    "last": 109.316787972342,
                    "last_traded_at": "2021-06-20T23:55:56+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 0.00621293,
                        "usd": 222.16,
                        "eth": 0.09868441
                    },
                    "target_coin_id": "binancecoin",
                    "is_stale": true,
                    "target": "BNB",
                    "market": {
                        "identifier": "one_inch_liquidity_protocol_bsc",
                        "name": "1inch Liquidity Protocol (BSC)",
                        "has_trading_incentive": false
                    },
                    "volume": 0.00596058690318402,
                    "bid_ask_spread_percentage": 0.629382,
                    "trade_url": "https://app.1inch.io/#/r/0x050F788d09395724777a67Dd08bE127cF70dd238/0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee/0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c",
                    "converted_last": {
                        "btc": 1.042336,
                        "usd": 37272,
                        "eth": 16.556156
                    },
                    "token_info_url": null,
                    "trust_score": "green",
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-20T23:55:56+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:40:45+00:00",
                    "is_anomaly": false,
                    "last": 0.000004191488225618772,
                    "last_traded_at": "2021-06-20T12:26:30+00:00",
                    "coin_id": "icarus-finance",
                    "converted_volume": {
                        "btc": 0.00015964,
                        "usd": 5.35,
                        "eth": 0.00261478
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": true,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 37.2087402352481,
                    "bid_ask_spread_percentage": 0.73785,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x95111f630ac215eb74599ed42c67e2c2790d69e2",
                    "converted_last": {
                        "btc": 1.023577,
                        "usd": 34283,
                        "eth": 16.765712
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x0ca2f09eca544b61b91d149dea2580c455c564b2",
                    "trust_score": "yellow",
                    "base": "0X95111F630AC215EB74599ED42C67E2C2790D69E2",
                    "timestamp": "2021-06-20T12:26:30+00:00"
                },
                {
                    "last_fetch_at": "2021-06-19T14:52:05+00:00",
                    "is_anomaly": false,
                    "last": 0.0687851020296431,
                    "last_traded_at": "2021-06-18T18:54:28+00:00",
                    "coin_id": "mirrored-google",
                    "converted_volume": {
                        "btc": 0.00002696,
                        "usd": 1.06,
                        "eth": 0.00043279
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": true,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 0.00299217592987076,
                    "bid_ask_spread_percentage": 1.737622,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x62d71b23bf15218c7d2d7e48dbbd9e9c650b173f",
                    "converted_last": {
                        "btc": 0.95677317,
                        "usd": 37602,
                        "eth": 15.358397
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x59a921db27dd6d4d974745b7ffc5c33932653442",
                    "trust_score": "yellow",
                    "base": "0X62D71B23BF15218C7D2D7E48DBBD9E9C650B173F",
                    "timestamp": "2021-06-18T18:54:28+00:00"
                },
                {
                    "last_fetch_at": "2021-06-20T08:36:52+00:00",
                    "is_anomaly": false,
                    "last": 0.000008515579318747806,
                    "last_traded_at": "2021-06-20T01:21:42+00:00",
                    "coin_id": "kebab-token",
                    "converted_volume": {
                        "btc": 1.2559e-8,
                        "usd": 0.00044695,
                        "eth": 2.04387e-7
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": true,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 0.00143579164449648,
                    "bid_ask_spread_percentage": 12.002735,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x7979f6c54eba05e18ded44c4f986f49a5de551c2",
                    "converted_last": {
                        "btc": 1.027164,
                        "usd": 36556,
                        "eth": 16.716593
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x7979f6c54eba05e18ded44c4f986f49a5de551c2",
                    "trust_score": "red",
                    "base": "0X7979F6C54EBA05E18DED44C4F986F49A5DE551C2",
                    "timestamp": "2021-06-20T01:21:42+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T11:09:43+00:00",
                    "is_anomaly": false,
                    "last": 0.00000103995189256682,
                    "last_traded_at": "2021-06-21T04:25:17+00:00",
                    "coin_id": "julswap",
                    "converted_volume": {
                        "btc": 0.00000765,
                        "usd": 0.26378,
                        "eth": 0.00012496
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": true,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 7.14590597296176,
                    "bid_ask_spread_percentage": 17.216416,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x5a41f637c3f7553dba6ddc2d3ca92641096577ea",
                    "converted_last": {
                        "btc": 1.029336,
                        "usd": 35495,
                        "eth": 16.814697
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x5a41f637c3f7553dba6ddc2d3ca92641096577ea",
                    "trust_score": "red",
                    "base": "0X5A41F637C3F7553DBA6DDC2D3CA92641096577EA",
                    "timestamp": "2021-06-21T04:25:17+00:00"
                },
                {
                    "last_fetch_at": "2021-06-20T23:36:23+00:00",
                    "is_anomaly": false,
                    "last": 0.00428907141930417,
                    "last_traded_at": "2021-06-20T00:12:30+00:00",
                    "coin_id": "binance-peg-litecoin",
                    "converted_volume": {
                        "btc": 8e-11,
                        "usd": 0.00000285,
                        "eth": 1.309e-9
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": true,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 1.81537549368005e-8,
                    "bid_ask_spread_percentage": 38.33409,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x4338665cbb7b2485a8855a139b75d5e34ab0db94",
                    "converted_last": {
                        "btc": 1.026166,
                        "usd": 36605,
                        "eth": 16.814597
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x4338665cbb7b2485a8855a139b75d5e34ab0db94",
                    "trust_score": "red",
                    "base": "0X4338665CBB7B2485A8855A139B75D5E34AB0DB94",
                    "timestamp": "2021-06-20T00:12:30+00:00"
                },
                {
                    "last_fetch_at": "2021-06-20T09:12:20+00:00",
                    "is_anomaly": false,
                    "last": 0.00003374557921253778,
                    "last_traded_at": "2021-06-19T10:39:33+00:00",
                    "coin_id": "evolution",
                    "converted_volume": {
                        "btc": 0.00000349,
                        "usd": 0.124748,
                        "eth": 0.00005583
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": true,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 0.0999999999999999,
                    "bid_ask_spread_percentage": 50.598404,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0xb0f2939a1c0e43683e5954c9fe142f7df9f8d967",
                    "converted_last": {
                        "btc": 1.033833,
                        "usd": 36967,
                        "eth": 16.54406
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0xb0f2939a1c0e43683e5954c9fe142f7df9f8d967",
                    "trust_score": "red",
                    "base": "0XB0F2939A1C0E43683E5954C9FE142F7DF9F8D967",
                    "timestamp": "2021-06-19T10:39:33+00:00"
                },
                {
                    "last_fetch_at": "2021-06-18T08:04:52+00:00",
                    "is_anomaly": false,
                    "last": 0.0000142595881656281,
                    "last_traded_at": "2021-06-17T09:36:41+00:00",
                    "coin_id": "vfox",
                    "converted_volume": {
                        "btc": 0.00000487,
                        "usd": 0.191577,
                        "eth": 0.00007839
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": true,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 0.345268089135061,
                    "bid_ask_spread_percentage": 108.699121,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x4d61577d8fd2208a0afb814ea089fdeae19ed202",
                    "converted_last": {
                        "btc": 0.9893488,
                        "usd": 38912,
                        "eth": 15.922045
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x4d61577d8fd2208a0afb814ea089fdeae19ed202",
                    "trust_score": "red",
                    "base": "0X4D61577D8FD2208A0AFB814EA089FDEAE19ED202",
                    "timestamp": "2021-06-17T09:36:41+00:00"
                },
                {
                    "last_fetch_at": "2021-06-18T08:55:03+00:00",
                    "is_anomaly": false,
                    "last": 37681.98058181194,
                    "last_traded_at": "2021-06-16T01:08:05+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 2.112649,
                        "usd": 84460,
                        "eth": 33.458818
                    },
                    "target_coin_id": "binance-usd",
                    "is_stale": true,
                    "target": "BUSD",
                    "market": {
                        "identifier": "pancakeswap_v1",
                        "name": "PancakeSwap (v1)",
                        "has_trading_incentive": false
                    },
                    "volume": 2.2399856708292414,
                    "bid_ask_spread_percentage": 0.603567,
                    "trade_url": "https://v1exchange.pancakeswap.finance/#/swap?outputCurrency=0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c",
                    "converted_last": {
                        "btc": 0.943153,
                        "usd": 37705,
                        "eth": 14.937068
                    },
                    "token_info_url": null,
                    "trust_score": "gray",
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-16T01:08:05+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T08:25:16+00:00",
                    "is_anomaly": false,
                    "last": 1.231344614121372e-13,
                    "last_traded_at": "2021-06-21T02:14:34+00:00",
                    "coin_id": "moonstar",
                    "converted_volume": {
                        "btc": 5e-12,
                        "usd": 1.63939e-7,
                        "eth": 7.4e-11
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": true,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 5600.55722010881,
                    "bid_ask_spread_percentage": -200.515127,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0xce5814efff15d53efd8025b9f2006d4d7d640b9b",
                    "converted_last": {
                        "btc": 0.00670342,
                        "usd": 237.72,
                        "eth": 0.10694514
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0xce5814efff15d53efd8025b9f2006d4d7d640b9b",
                    "trust_score": null,
                    "base": "0XCE5814EFFF15D53EFD8025B9F2006D4D7D640B9B",
                    "timestamp": "2021-06-21T02:14:34+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T06:53:05+00:00",
                    "is_anomaly": false,
                    "last": 1.07451819117298e-15,
                    "last_traded_at": "2021-06-20T08:45:34+00:00",
                    "coin_id": "charix-token",
                    "converted_volume": {
                        "btc": 1.92e-10,
                        "usd": 0.00000684,
                        "eth": 3.122e-9
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": true,
                    "target": "BTCB",
                    "market": {
                        "identifier": "pancakeswap",
                        "name": "PancakeSwap (v2)",
                        "has_trading_incentive": false
                    },
                    "volume": 982595.940795898,
                    "bid_ask_spread_percentage": -206.18051,
                    "trade_url": "https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x4eabb20064586dea07aaaf84d4ba35037854bd44",
                    "converted_last": {
                        "btc": 0.18230311,
                        "usd": 6475.21,
                        "eth": 2.957149
                    },
                    "token_info_url": "https://pancakeswap.info/tokens/0x4eabb20064586dea07aaaf84d4ba35037854bd44",
                    "trust_score": null,
                    "base": "0X4EABB20064586DEA07AAAF84D4BA35037854BD44",
                    "timestamp": "2021-06-20T08:45:34+00:00"
                },
                {
                    "last_fetch_at": "2021-06-19T06:11:21+00:00",
                    "is_anomaly": false,
                    "last": 39271.93812881111,
                    "last_traded_at": "2021-06-17T13:04:30+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 0.11577637,
                        "usd": 4503.11,
                        "eth": 1.877055
                    },
                    "target_coin_id": "tether",
                    "is_stale": true,
                    "target": "USDT",
                    "market": {
                        "identifier": "dodo_bsc",
                        "name": "Dodo BSC",
                        "has_trading_incentive": false
                    },
                    "volume": 0.11451999999999973,
                    "bid_ask_spread_percentage": null,
                    "trade_url": null,
                    "converted_last": {
                        "btc": 1.010971,
                        "usd": 39322,
                        "eth": 16.390632
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-17T13:04:30+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T10:36:46+00:00",
                    "is_anomaly": true,
                    "last": 0.0000471201222675508,
                    "last_traded_at": "2021-06-17T17:10:09+00:00",
                    "coin_id": "binance-peg-cardano",
                    "converted_volume": {
                        "btc": 0,
                        "usd": 0,
                        "eth": 0
                    },
                    "target_coin_id": "binance-bitcoin",
                    "is_stale": true,
                    "target": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "market": {
                        "identifier": "mdex_bsc",
                        "name": "Mdex BSC",
                        "has_trading_incentive": true
                    },
                    "volume": 0,
                    "bid_ask_spread_percentage": 486.269142,
                    "trade_url": "https://bsc.mdex.com/#/swap?inputCurrency=0x3ee2200efb3400fabb9aacf31297cbdd1d435d47&outputCurrency=0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c",
                    "converted_last": {
                        "btc": 0.99932737,
                        "usd": 38501,
                        "eth": 16.287193
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "0X3EE2200EFB3400FABB9AACF31297CBDD1D435D47",
                    "timestamp": "2021-06-17T17:10:09+00:00"
                },
                {
                    "last_fetch_at": "2021-06-21T12:12:17+00:00",
                    "is_anomaly": true,
                    "last": 85792437.5977273,
                    "last_traded_at": "2021-06-17T10:51:32+00:00",
                    "coin_id": "binance-bitcoin",
                    "converted_volume": {
                        "btc": 0,
                        "usd": 0,
                        "eth": 0
                    },
                    "is_stale": true,
                    "target": "0XB2B2D8A30572E9D308060339B6E5A219C467F1A7",
                    "market": {
                        "identifier": "mdex_bsc",
                        "name": "Mdex BSC",
                        "has_trading_incentive": true
                    },
                    "volume": 0,
                    "bid_ask_spread_percentage": -202.982891,
                    "trade_url": "https://bsc.mdex.com/#/swap?inputCurrency=0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c&outputCurrency=0xb2b2d8a30572e9d308060339b6e5a219c467f1a7",
                    "converted_last": {
                        "btc": 1.003582,
                        "usd": 39572,
                        "eth": 16.200216
                    },
                    "token_info_url": null,
                    "trust_score": null,
                    "base": "0X7130D2A12B9BCBFAE4F2634D864A1EE1CE3EAD9C",
                    "timestamp": "2021-06-17T10:51:32+00:00"
                }
            ],
            "platforms": {
                "harmony-shard-0": "0x34224dcf981da7488fdd01c7fdd64e74cd55dcf7",
                "binance-smart-chain": "0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c"
            },
            "additional_notices": [],
            "links": {
                "subreddit_url": null,
                "blockchain_site": [
                    "https://bscscan.com/address/0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c",
                    "",
                    "",
                    "",
                    ""
                ],
                "official_forum_url": [
                    "",
                    "",
                    ""
                ],
                "telegram_channel_identifier": "",
                "twitter_screen_name": "",
                "repos_url": {
                    "github": [],
                    "bitbucket": []
                },
                "bitcointalk_thread_identifier": null,
                "announcement_url": [
                    "",
                    ""
                ],
                "facebook_username": "",
                "chat_url": [
                    "",
                    "",
                    ""
                ],
                "homepage": [
                    "",
                    "",
                    ""
                ]
            },
            "categories": [],
            "developer_data": {
                "forks": 0,
                "total_issues": 0,
                "pull_request_contributors": 0,
                "code_additions_deletions_4_weeks": {
                    "additions": null,
                    "deletions": null
                },
                "subscribers": 0,
                "commit_count_4_weeks": 0,
                "pull_requests_merged": 0,
                "stars": 0,
                "last_4_weeks_commit_activity_series": [],
                "closed_issues": 0
            },
            "coingecko_price": {
                "usd_market_cap": 0,
                "bnb_24h_change": -1.385177083159274,
                "bnb_24h_vol": 411176.4083002917,
                "last_updated_at": 1624278695,
                "usd": 32392,
                "bnb": 106.958,
                "bnb_market_cap": 0,
                "usd_24h_vol": 124524787.35552126,
                "usd_24h_change": -4.3949431411943145
            }
        }
    }
    pair:
      type: object
      properties:
        "_index": 
          type: string
          example: "catalog_20210721"
        "_type":
          type: string
          example: "_doc"
        "_id":
          type: string
          example: "bsc~contract~0xCA56457F274921bc97319bCe79e04fd7196Ef203"
        "_version": 
          type: integer
          format: int32
          example: 58,
        "_seq_no": 
          type: integer
          format: int32
          example: 20062199,
        "_primary_term": 
          type: integer
          format: int32
          example: 12,
        "found": 
          type: boolean
          example: true
        "_source":
          type: object
          example: {
        "symbol": "NORDX/WBNB",
        "factory_address": "0xca143ce32fe78f1f7019d7d551a6402fc5350c73",
        "quote_token_name": "Wrapped BNB",
        "base_token_supply": 1000000000000000,
        "factory_addres": "0xca143ce32fe78f1f7019d7d551a6402fc5350c73",
        "base_token_decimals": 9,
        "price": 0,
        "base_token_price": 2.748643e-14,
        "quote_token_decimals": 18,
        "quote_token_supply": 7181957,
        "create_date": 1633367117863,
        "base_token_name": "NordX",
        "total_volume_locked": 2947400739.5405884,
        "base_token_address": "0x5471188022325587F281096d202704785a4B041d",
        "owner": "pancake2",
        "identifier": "bsc~contract~0xCA56457F274921bc97319bCe79e04fd7196Ef203",
        "address": "0xCA56457F274921bc97319bCe79e04fd7196Ef203",
        "owner_name": "pancake2",
        "total_supply": 589.9152481294278,
        "kind": "contract",
        "quote_token_balance": 0.021170243929076064,
        "volumes": {
            "week": 1654947774.5308802,
            "hour": 1654929482.6871283,
            "month": 1654947774.5308802,
            "day": 1654947774.5308802
        },
        "readable_create_date": "2021-10-04T17:05:17.863Z",
        "base_token_symbol": "NORDX",
        "update_date": 1633449513000,
        "quote_token_address": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
        "quote_token_symbol": "WBNB",
        "decimals": 18,
        "base_token_balance": 1633205506125.532,
        "name": "Pool NordX-Wrapped BNB",
        "quote_token_price": 36381592419122.47,
        "category": "pool",
        "readable_update_date": "2021-10-05T15:58:33.000Z"
     }
    pairs:
      type: object
      properties:
        "total":
           type: object
           example: {
           "value": 10000,
           "relation": "gte"
        }
        "max_score": 
           type: integer
           format: int32
           example: 1
        "hits":
          type: array
          items: 
            type: object
            example: [
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~contract~0xCA56457F274921bc97319bCe79e04fd7196Ef203",
            "_score": null,
            "_source": {
                "symbol": "NORDX/WBNB",
                "factory_address": "0xca143ce32fe78f1f7019d7d551a6402fc5350c73",
                "quote_token_name": "Wrapped BNB",
                "base_token_supply": 1000000000000000,
                "factory_addres": "0xca143ce32fe78f1f7019d7d551a6402fc5350c73",
                "base_token_decimals": 9,
                "price": 0,
                "base_token_price": 2.748643e-14,
                "quote_token_decimals": 18,
                "quote_token_supply": 7181957,
                "create_date": 1633367117863,
                "base_token_name": "NordX",
                "total_volume_locked": 2947400739.5405884,
                "base_token_address": "0x5471188022325587F281096d202704785a4B041d",
                "owner": "pancake2",
                "identifier": "bsc~contract~0xCA56457F274921bc97319bCe79e04fd7196Ef203",
                "address": "0xCA56457F274921bc97319bCe79e04fd7196Ef203",
                "owner_name": "pancake2",
                "total_supply": 589.9152481294278,
                "kind": "contract",
                "quote_token_balance": 0.021170243929076064,
                "volumes": {
                    "week": 1654947774.5308802,
                    "hour": 1654929482.6871283,
                    "month": 1654947774.5308802,
                    "day": 1654947774.5308802
                },
                "readable_create_date": "2021-10-04T17:05:17.863Z",
                "base_token_symbol": "NORDX",
                "update_date": 1633449513000,
                "quote_token_address": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
                "quote_token_symbol": "WBNB",
                "decimals": 18,
                "base_token_balance": 1633205506125.532,
                "name": "Pool NordX-Wrapped BNB",
                "quote_token_price": 36381592419122.47,
                "category": "pool",
                "readable_update_date": "2021-10-05T15:58:33.000Z"
            },
            "sort": [
                2947400700
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "eth~contract~0x34d7d7Aaf50AD4944B70B320aCB24C95fa2def7c",
            "_score": null,
            "_source": {
                "symbol": "OHM/DAI",
                "factory_address": "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
                "quote_token_name": "Dai Stablecoin",
                "base_token_supply": 1894309,
                "factory_addres": "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
                "base_token_decimals": 9,
                "price": 0,
                "base_token_price": 970.9296756389222,
                "quote_token_decimals": 18,
                "quote_token_supply": 6196789786,
                "create_date": 1631111091195,
                "base_token_name": "Olympus",
                "total_volume_locked": 268860414.0570316,
                "base_token_address": "0x383518188C0C6d7730D91b2c03a03C837814a899",
                "owner": "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
                "identifier": "eth~contract~0x34d7d7Aaf50AD4944B70B320aCB24C95fa2def7c",
                "address": "0x34d7d7Aaf50AD4944B70B320aCB24C95fa2def7c",
                "owner_name": "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
                "total_supply": 49.00440658456187,
                "kind": "contract",
                "quote_token_balance": 134430207.0285158,
                "readable_create_date": "2021-09-08T14:24:51.195Z",
                "base_token_symbol": "OHM",
                "update_date": 1634817463000,
                "quote_token_address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
                "quote_token_symbol": "DAI",
                "decimals": 18,
                "base_token_balance": 138146.195814508,
                "name": "Pool Olympus-Dai Stablecoin",
                "quote_token_price": 0.0010299407105277198,
                "category": "pool",
                "readable_update_date": "2021-10-21T11:57:43.000Z"
            },
            "sort": [
                268860416
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "eth~contract~0xc5578194D457dcce3f272538D1ad52c68d1CE849",
            "_score": null,
            "_source": {
                "symbol": "DAI/wstETH",
                "factory_address": "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
                "quote_token_name": "Wrapped liquid staked Ether 2.0",
                "base_token_supply": 6279005017,
                "factory_addres": "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
                "base_token_decimals": 18,
                "price": 0,
                "base_token_price": 0.0002280678255687837,
                "quote_token_decimals": 18,
                "quote_token_supply": 38728,
                "create_date": 1631459813919,
                "base_token_name": "Dai Stablecoin",
                "total_volume_locked": 41619802.6281537,
                "base_token_address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
                "owner": "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
                "identifier": "eth~contract~0xc5578194D457dcce3f272538D1ad52c68d1CE849",
                "address": "0xc5578194D457dcce3f272538D1ad52c68d1CE849",
                "owner_name": "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
                "total_supply": 307069.801795654,
                "kind": "contract",
                "quote_token_balance": 4751.030736173475,
                "readable_create_date": "2021-09-12T15:16:53.919Z",
                "base_token_symbol": "DAI",
                "update_date": 1634817430000,
                "quote_token_address": "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
                "quote_token_symbol": "wstETH",
                "decimals": 18,
                "base_token_balance": 20809901.31407685,
                "name": "Pool Dai Stablecoin-Wrapped liquid staked Ether 2.0",
                "quote_token_price": 4384.660560980386,
                "category": "pool",
                "readable_update_date": "2021-10-21T11:57:10.000Z"
            },
            "sort": [
                41619804
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "eth~contract~0x6591c4BcD6D7A1eb4E537DA8B78676C1576Ba244",
            "_score": null,
            "_source": {
                "symbol": "BOND/USDC",
                "factory_address": "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
                "quote_token_name": "USD Coin",
                "base_token_supply": 10000000,
                "factory_addres": "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
                "base_token_decimals": 18,
                "price": 0,
                "base_token_price": 29.22809595402122,
                "quote_token_decimals": 6,
                "quote_token_supply": 26773581908,
                "create_date": 1631459074486,
                "base_token_name": "BarnBridge Governance Token",
                "total_volume_locked": 27591281.01095,
                "base_token_address": "0x0391D2021f89DC339F60Fff84546EA23E337750f",
                "owner": "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
                "identifier": "eth~contract~0x6591c4BcD6D7A1eb4E537DA8B78676C1576Ba244",
                "address": "0x6591c4BcD6D7A1eb4E537DA8B78676C1576Ba244",
                "owner_name": "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
                "total_supply": 2.44929524739064,
                "kind": "contract",
                "quote_token_balance": 13795640.505475,
                "readable_create_date": "2021-09-12T15:04:34.486Z",
                "base_token_symbol": "BOND",
                "update_date": 1634817407000,
                "quote_token_address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
                "quote_token_symbol": "USDC",
                "decimals": 18,
                "base_token_balance": 471400.1639306997,
                "name": "Pool BarnBridge Governance Token-USD Coin",
                "quote_token_price": 0.0342136552984191,
                "category": "pool",
                "readable_update_date": "2021-10-21T11:56:47.000Z"
            },
            "sort": [
                27591282
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "eth~contract~0xF6DCdce0ac3001B2f67F750bc64ea5beB37B5824",
            "_score": null,
            "_source": {
                "symbol": "HEX/USDC",
                "factory_address": "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
                "quote_token_name": "USD Coin",
                "base_token_supply": 572529714467,
                "factory_addres": "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
                "base_token_decimals": 8,
                "price": 0,
                "base_token_price": 0.27159088132000003,
                "quote_token_decimals": 6,
                "quote_token_supply": 26656406379,
                "create_date": 1631111147734,
                "base_token_name": "HEX",
                "total_volume_locked": 23502405.967446,
                "base_token_address": "0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39",
                "owner": "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
                "identifier": "eth~contract~0xF6DCdce0ac3001B2f67F750bc64ea5beB37B5824",
                "address": "0xF6DCdce0ac3001B2f67F750bc64ea5beB37B5824",
                "owner_name": "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
                "total_supply": 0.000146573121712415,
                "kind": "contract",
                "quote_token_balance": 11751202.983723,
                "readable_create_date": "2021-09-08T14:25:47.734Z",
                "base_token_symbol": "HEX",
                "update_date": 1634817210000,
                "quote_token_address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
                "quote_token_symbol": "USDC",
                "decimals": 18,
                "base_token_balance": 43188228.0473255,
                "name": "Pool HEX-USD Coin",
                "quote_token_price": 3.682008744696245,
                "category": "pool",
                "readable_update_date": "2021-10-21T11:53:30.000Z"
            },
            "sort": [
                23502406
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~contract~0xc803790dD1a234b326Cd4E593b05337a0c84a05e",
            "_score": null,
            "_source": {
                "symbol": "WBNB/CBET",
                "quote_token_name": "CBET",
                "base_token_supply": 6709687,
                "factory_addres": "0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73",
                "liquidity": 0,
                "base_token_decimals": 18,
                "base_token_price_bnb": 0,
                "rate": 0,
                "price": 0,
                "price1CumulativeLast": 0,
                "base_token_price": 1828738269.524903,
                "quote_token_decimals": 9,
                "quote_token_supply": 1000000000000000,
                "create_date": 1627144791627,
                "base_token_name": "Wrapped BNB",
                "total_volume_locked": 19135796.457642946,
                "base_token_address": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
                "owner": "pancake2",
                "identifier": "bsc~contract~0xc803790dD1a234b326Cd4E593b05337a0c84a05e",
                "address": "0xc803790dD1a234b326Cd4E593b05337a0c84a05e",
                "base_token_price_usd": 0,
                "quote_token_price_usd": 0,
                "total_supply": 21354.352824371712,
                "kind": "contract",
                "quote_token_balance": 29337504099460.01,
                "volumes": {
                    "week": 11583.188320211208,
                    "hour": 0,
                    "month": 171877.55345395533,
                    "day": 0.002007155336963044
                },
                "readable_create_date": "2021-07-24T16:39:51.627Z",
                "base_token_symbol": "WBNB",
                "update_date": 1646222699000,
                "quote_token_address": "0xc212D39E35F22F259457bE79Fc2D822FA7122e6e",
                "quote_token_price_bnb": 0,
                "quote_token_symbol": "CBET",
                "decimals": 18,
                "base_token_balance": 16593.64937360644,
                "name": "Pool Wrapped BNB-CBET",
                "quote_token_price": 5.4682510705e-10,
                "price0CumulativeLast": 0,
                "category": "pool",
                "readable_update_date": "2022-03-02T12:04:59.000Z"
            },
            "sort": [
                19135796
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~contract~0xc7353bDAa987849541657A113984822b5727FAC5",
            "_score": null,
            "_source": {
                "symbol": "DAI/USDC",
                "quote_token_name": "USD Coin",
                "base_token_supply": 261999999,
                "factory_addres": "0x32CE36F6eA8d97f9fC19Aab83b9c6D2F52D74470",
                "liquidity": 0,
                "base_token_decimals": 18,
                "base_token_price_bnb": 0,
                "rate": 0,
                "price": 0,
                "price1CumulativeLast": 0,
                "base_token_price": 1.0029683830421696,
                "quote_token_decimals": 18,
                "quote_token_supply": 1779000000,
                "create_date": 1627509820218,
                "base_token_name": "Dai Token",
                "total_volume_locked": 6530349.993613934,
                "base_token_address": "0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3",
                "owner": "0x32CE36F6eA8d97f9fC19Aab83b9c6D2F52D74470",
                "identifier": "bsc~contract~0xc7353bDAa987849541657A113984822b5727FAC5",
                "address": "0xc7353bDAa987849541657A113984822b5727FAC5",
                "owner_name": "0x32CE36F6eA8d97f9fC19Aab83b9c6D2F52D74470",
                "base_token_price_usd": 0,
                "quote_token_price_usd": 0,
                "total_supply": 101.30443484049705,
                "kind": "contract",
                "quote_token_balance": 3278626.0672542755,
                "volumes": {
                    "week": 0,
                    "hour": 0,
                    "month": 0,
                    "day": 0
                },
                "readable_create_date": "2021-07-28T22:03:40.218Z",
                "base_token_symbol": "DAI",
                "update_date": 1643958241000,
                "quote_token_address": "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
                "quote_token_price_bnb": 0,
                "quote_token_symbol": "USDC",
                "decimals": 18,
                "base_token_balance": 3265174.996806967,
                "name": "Pool Dai Token-USD Coin",
                "quote_token_price": 0.9970404021778173,
                "price0CumulativeLast": 0,
                "category": "pool",
                "readable_update_date": "2022-02-04T07:04:01.000Z"
            },
            "sort": [
                6530350
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~contract~0x5cF01B9519AF45D4e6eb17b668F11ca182290E10",
            "_score": null,
            "_source": {
                "symbol": "Tether USD-Sagittarius",
                "quote_token_name": "Sagittarius",
                "base_token_supply": 3.179997922e-9,
                "factory_addres": "0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73",
                "liquidity": 0,
                "base_token_decimals": 18,
                "base_token_price_bnb": 0,
                "rate": 0,
                "price": 0,
                "price1CumulativeLast": 0,
                "base_token_price": 14.535434774256188,
                "quote_token_decimals": 18,
                "quote_token_supply": 3.179997922e-9,
                "create_date": 1627005193832,
                "base_token_name": "Tether USD",
                "total_volume_locked": 5468457.54910915,
                "base_token_address": "0x55d398326f99059fF775485246999027B3197955",
                "owner": "pancake2",
                "identifier": "bsc~contract~0x5cF01B9519AF45D4e6eb17b668F11ca182290E10",
                "address": "0x5cF01B9519AF45D4e6eb17b668F11ca182290E10",
                "base_token_price_usd": 0,
                "quote_token_price_usd": 0,
                "kind": "contract",
                "quote_token_balance": 39842680.24242953,
                "totalSupply": 8735955.162261628,
                "volumes": {
                    "week": 173162.10121202542,
                    "hour": 113.50018256467831,
                    "month": 3304080.7756277933,
                    "day": 21569.88833727372
                },
                "readable_create_date": "2021-07-23T01:53:13.832Z",
                "base_token_symbol": "USDT",
                "update_date": 1634629950000,
                "quote_token_address": "0x56231D55391bd6382bc2a0761a644ea188B007cc",
                "quote_token_price_bnb": 0,
                "quote_token_symbol": "SGRv2",
                "decimals": 18,
                "base_token_balance": 2734228.774554575,
                "name": "Pool Tether USD-Sagittarius",
                "quote_token_price": 0.06879739172103108,
                "price0CumulativeLast": 0,
                "category": "pool",
                "readable_update_date": "2021-10-19T07:52:30.000Z"
            },
            "sort": [
                5468457.5
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~contract~0x42EBFa37F82eF1819C1718Bf083d3fC45427395a",
            "_score": null,
            "_source": {
                "symbol": "NSI/WBNB",
                "factory_address": "0xca143ce32fe78f1f7019d7d551a6402fc5350c73",
                "quote_token_name": "Wrapped BNB",
                "base_token_supply": 1000000000000000,
                "factory_addres": "0xca143ce32fe78f1f7019d7d551a6402fc5350c73",
                "base_token_decimals": 18,
                "price": 0,
                "base_token_price": 3.375850995e-11,
                "quote_token_decimals": 18,
                "quote_token_supply": 7181957,
                "create_date": 1633388583727,
                "base_token_name": "nSights",
                "total_volume_locked": 5419096.640337447,
                "base_token_address": "0x7eFb55D9AC57B23Cc6811c9068db3CF83CBDfe39",
                "owner": "pancake2",
                "identifier": "bsc~contract~0x42EBFa37F82eF1819C1718Bf083d3fC45427395a",
                "address": "0x42EBFa37F82eF1819C1718Bf083d3fC45427395a",
                "owner_name": "pancake2",
                "total_supply": 0,
                "kind": "contract",
                "quote_token_balance": 4804.544224981595,
                "volumes": {
                    "week": 57231.152043023,
                    "hour": 0,
                    "month": 1183718.9901174651,
                    "day": 11335.794141403137
                },
                "readable_create_date": "2021-10-04T23:03:03.727Z",
                "base_token_symbol": "NSI",
                "update_date": 1646227664000,
                "quote_token_address": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
                "quote_token_symbol": "WBNB",
                "decimals": 18,
                "base_token_balance": 115902111794534.33,
                "name": "Pool nSights-Wrapped BNB",
                "quote_token_price": 29622160500.468628,
                "category": "pool",
                "readable_update_date": "2022-03-02T13:27:44.000Z"
            },
            "sort": [
                5419096.5
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~contract~0x71c1B6302c7F9C49EE3E675224B22CdE34Ab5AC7",
            "_score": null,
            "_source": {
                "symbol": "WBNB/THUGS",
                "quote_token_name": "THUGS",
                "base_token_supply": 7649891,
                "factory_addres": "0xCe8fd65646F2a2a897755A1188C04aCe94D2B8D0",
                "liquidity": 0,
                "base_token_decimals": 18,
                "base_token_price_bnb": 0,
                "rate": 0,
                "price": 0,
                "price1CumulativeLast": 0,
                "base_token_price": 49.10448735454312,
                "quote_token_decimals": 18,
                "quote_token_supply": 652783,
                "create_date": 1628012347601,
                "base_token_name": "Wrapped BNB",
                "total_volume_locked": 4681423.065223522,
                "base_token_address": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
                "owner": "0xCe8fd65646F2a2a897755A1188C04aCe94D2B8D0",
                "identifier": "bsc~contract~0x71c1B6302c7F9C49EE3E675224B22CdE34Ab5AC7",
                "address": "0x71c1B6302c7F9C49EE3E675224B22CdE34Ab5AC7",
                "owner_name": "0xCe8fd65646F2a2a897755A1188C04aCe94D2B8D0",
                "base_token_price_usd": 0,
                "quote_token_price_usd": 0,
                "total_supply": 21778.398916310765,
                "kind": "contract",
                "quote_token_balance": 182894.3072166263,
                "volumes": {
                    "week": 0,
                    "hour": 0,
                    "month": 971.4822107395693,
                    "day": 0
                },
                "readable_create_date": "2021-08-03T17:39:07.601Z",
                "base_token_symbol": "WBNB",
                "update_date": 1646095261000,
                "quote_token_address": "0xE10e9822A5de22F8761919310DDA35CD997d63c0",
                "quote_token_price_bnb": 0,
                "quote_token_symbol": "THUGS",
                "decimals": 18,
                "base_token_balance": 3736.7680916535137,
                "name": "Pool Wrapped BNB-THUGS",
                "quote_token_price": 0.020364737600859623,
                "price0CumulativeLast": 0,
                "category": "pool",
                "readable_update_date": "2022-03-01T00:41:01.000Z"
            },
            "sort": [
                4681423
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~contract~0xe859b6a32d953A0Ece0027C0fC8575571862c0BB",
            "_score": null,
            "_source": {
                "symbol": "THOREUM/WBNB",
                "quote_token_name": "Wrapped BNB",
                "base_token_supply": 5000000000,
                "factory_addres": "0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73",
                "liquidity": 0,
                "base_token_decimals": 18,
                "base_token_price_bnb": 0,
                "rate": 0,
                "price": 0,
                "price1CumulativeLast": 0,
                "base_token_price": 9.403976275242e-8,
                "quote_token_decimals": 18,
                "quote_token_supply": 6709687,
                "create_date": 1627144344409,
                "base_token_name": "Thoreum",
                "total_volume_locked": 4348737.153839826,
                "base_token_address": "0x580dE58c1BD593A43DaDcF0A739d504621817c05",
                "owner": "pancake2",
                "identifier": "bsc~contract~0xe859b6a32d953A0Ece0027C0fC8575571862c0BB",
                "address": "0xe859b6a32d953A0Ece0027C0fC8575571862c0BB",
                "base_token_price_usd": 0,
                "quote_token_price_usd": 0,
                "total_supply": 329250.1668459651,
                "kind": "contract",
                "quote_token_balance": 3855.568808815888,
                "volumes": {
                    "week": 617333.6623400412,
                    "hour": 3073.4293443658125,
                    "month": 4814175.875498701,
                    "day": 183656.18972369318
                },
                "readable_create_date": "2021-07-24T16:32:24.409Z",
                "base_token_symbol": "THOREUM",
                "update_date": 1644116948000,
                "quote_token_address": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
                "quote_token_price_bnb": 0,
                "quote_token_symbol": "WBNB",
                "decimals": 18,
                "base_token_balance": 133151649.484544,
                "name": "Pool Thoreum-Wrapped BNB",
                "quote_token_price": 10633799.689954204,
                "price0CumulativeLast": 0,
                "category": "pool",
                "readable_update_date": "2022-02-06T03:09:08.000Z"
            },
            "sort": [
                4348737
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "eth~contract~0xBBBdB106A806173d1eEa1640961533fF3114d69A",
            "_score": null,
            "_source": {
                "symbol": "XYZ/USDC",
                "factory_address": "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
                "quote_token_name": "USD Coin",
                "base_token_supply": 1000000000,
                "factory_addres": "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
                "base_token_decimals": 18,
                "price": 0,
                "base_token_price": 0.11184081162353815,
                "quote_token_decimals": 6,
                "quote_token_supply": 26773581908,
                "create_date": 1631459065435,
                "base_token_name": "XYZ Governance Token",
                "total_volume_locked": 4202419.123858,
                "base_token_address": "0x618679dF9EfCd19694BB1daa8D00718Eacfa2883",
                "owner": "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
                "identifier": "eth~contract~0xBBBdB106A806173d1eEa1640961533fF3114d69A",
                "address": "0xBBBdB106A806173d1eEa1640961533fF3114d69A",
                "owner_name": "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
                "total_supply": 6.713885828586782,
                "kind": "contract",
                "quote_token_balance": 2101209.561929,
                "readable_create_date": "2021-09-12T15:04:25.435Z",
                "base_token_symbol": "XYZ",
                "update_date": 1634817210000,
                "quote_token_address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
                "quote_token_symbol": "USDC",
                "decimals": 18,
                "base_token_balance": 18665871.25689936,
                "name": "Pool XYZ Governance Token-USD Coin",
                "quote_token_price": 8.941279891333862,
                "category": "pool",
                "readable_update_date": "2021-10-21T11:53:30.000Z"
            },
            "sort": [
                4202419
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~contract~0x8b1089367DbB2fE76aBAcECeBbc8F8Bb5163C10B",
            "_score": null,
            "_source": {
                "symbol": "USDT/USDC",
                "factory_address": "0xd654cbf99f2907f06c88399ae123606121247d5c",
                "quote_token_name": "USD Coin",
                "base_token_supply": 3.179997922178664e+27,
                "factory_addres": "0xd654cbf99f2907f06c88399ae123606121247d5c",
                "base_token_decimals": 18,
                "price": 0,
                "base_token_price": 0.9969851811747061,
                "quote_token_decimals": 18,
                "quote_token_supply": 1779000000,
                "create_date": 1639137719241,
                "base_token_name": "Tether USD",
                "total_volume_locked": 4085519.9134605895,
                "base_token_address": "0x55d398326f99059fF775485246999027B3197955",
                "owner": "0xd654cbf99f2907f06c88399ae123606121247d5c",
                "identifier": "bsc~contract~0x8b1089367DbB2fE76aBAcECeBbc8F8Bb5163C10B",
                "address": "0x8b1089367DbB2fE76aBAcECeBbc8F8Bb5163C10B",
                "owner_name": "0xd654cbf99f2907f06c88399ae123606121247d5c",
                "total_supply": 0.09986440807414822,
                "kind": "contract",
                "quote_token_balance": 2041995.2298948744,
                "volumes": {
                    "week": 3467.771765245343,
                    "hour": 611.167655155068,
                    "month": 3467.771765245343,
                    "day": 744.6143591136548
                },
                "readable_create_date": "2021-12-10T12:01:59.241Z",
                "base_token_symbol": "USDT",
                "update_date": 1646107641000,
                "quote_token_address": "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
                "quote_token_symbol": "USDC",
                "decimals": 18,
                "base_token_balance": 2042759.9567302947,
                "name": "Pool Tether USD-USD Coin",
                "quote_token_price": 1.0030239354427932,
                "category": "pool",
                "readable_update_date": "2022-03-01T04:07:21.000Z"
            },
            "sort": [
                4085520
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~contract~0x91761c931a8dA0cA2bF0c659343a2638757DC5ea",
            "_score": null,
            "_source": {
                "symbol": "OTO/WBNB",
                "factory_address": "0xca143ce32fe78f1f7019d7d551a6402fc5350c73",
                "quote_token_name": "Wrapped BNB",
                "base_token_supply": 1000000000000,
                "factory_addres": "0xca143ce32fe78f1f7019d7d551a6402fc5350c73",
                "base_token_decimals": 9,
                "price": 0,
                "base_token_price": 0.00000528869648601736,
                "quote_token_decimals": 18,
                "quote_token_supply": 7181957,
                "create_date": 1630236342655,
                "base_token_name": "OTO Dao Token",
                "total_volume_locked": 3839877.3270128737,
                "base_token_address": "0x421dDDAB3F78eC2de24c39041f255808b8601891",
                "owner": "pancake2",
                "identifier": "bsc~contract~0x91761c931a8dA0cA2bF0c659343a2638757DC5ea",
                "address": "0x91761c931a8dA0cA2bF0c659343a2638757DC5ea",
                "owner_name": "pancake2",
                "total_supply": 0,
                "kind": "contract",
                "quote_token_balance": 3404.4162081945556,
                "volumes": {
                    "week": 195106.4378791287,
                    "hour": 0,
                    "month": 816258.8862365322,
                    "day": 497.73525519117084
                },
                "readable_create_date": "2021-08-29T11:25:42.655Z",
                "base_token_symbol": "OTO",
                "update_date": 1646202794000,
                "quote_token_address": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
                "quote_token_symbol": "WBNB",
                "decimals": 18,
                "base_token_balance": 529180774.22772306,
                "name": "Pool OTO Dao Token-Wrapped BNB",
                "quote_token_price": 189082.50882686733,
                "category": "pool",
                "readable_update_date": "2022-03-02T06:33:14.000Z"
            },
            "sort": [
                3839877.2
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~contract~0x919964B7f12A742E3D33176D7aF9094EA4152e6f",
            "_score": null,
            "_source": {
                "symbol": "USDT/BXH",
                "quote_token_name": "BXHToken",
                "base_token_supply": 3.179997922178664e+27,
                "factory_addres": "0x7897C32cbda1935e97c0B59F244747562D4d97c1",
                "liquidity": 0,
                "base_token_decimals": 18,
                "base_token_price_bnb": 0,
                "rate": 0,
                "price": 0,
                "price1CumulativeLast": 0,
                "base_token_price": 14.474137063554664,
                "quote_token_decimals": 18,
                "quote_token_supply": 50269194,
                "create_date": 1627678772395,
                "base_token_name": "Tether USD",
                "total_volume_locked": 3808856.8948112708,
                "base_token_address": "0x55d398326f99059fF775485246999027B3197955",
                "owner": "0x7897C32cbda1935e97c0B59F244747562D4d97c1",
                "identifier": "bsc~contract~0x919964B7f12A742E3D33176D7aF9094EA4152e6f",
                "address": "0x919964B7f12A742E3D33176D7aF9094EA4152e6f",
                "owner_name": "0x7897C32cbda1935e97c0B59F244747562D4d97c1",
                "base_token_price_usd": 0,
                "quote_token_price_usd": 0,
                "total_supply": 451783.89167156414,
                "kind": "contract",
                "quote_token_balance": 25579319.881744534,
                "volumes": {
                    "week": 62241.55835661754,
                    "hour": 0,
                    "month": 763154.9111140115,
                    "day": 804.4592382109056
                },
                "readable_create_date": "2021-07-30T20:59:32.395Z",
                "base_token_symbol": "USDT",
                "update_date": 1646049560000,
                "quote_token_address": "0x6D1B7b59e3fab85B7d3a3d86e505Dd8e349EA7F3",
                "quote_token_price_bnb": 0,
                "quote_token_symbol": "BXH",
                "decimals": 18,
                "base_token_balance": 1904428.4474056354,
                "name": "Pool Tether USD-BXHToken",
                "quote_token_price": 0.06908874744028524,
                "price0CumulativeLast": 0,
                "category": "pool",
                "readable_update_date": "2022-02-28T11:59:20.000Z"
            },
            "sort": [
                3808857
            ]
        },
        {
            "_index": "catalog_20210721",
            "_type": "_doc",
            "_id": "bsc~contract~0xb5bdCA8f7edBf7739C2F5776cD61b0616F2d74ce",
            "_score": null,
            "_source": {
                "symbol": "META18X/WBNB",
                "factory_address": "0xca143ce32fe78f1f7019d7d551a6402fc5350c73",
                "quote_token_name": "Wrapped BNB",
                "base_token_supply": 18000000000,
                "factory_addres": "0xca143ce32fe78f1f7019d7d551a6402fc5350c73",
                "base_token_decimals": 18,
                "price": 0,
                "base_token_price": 0.00000156301829368061,
                "quote_token_decimals": 18,
                "quote_token_supply": 7181957,
                "create_date": 1636989036456,
                "base_token_name": "Meta18X",
                "total_volume_locked": 3562739.6272943686,
                "base_token_address": "0x8012C4eA23E8f164D38C4cAcD841FA31A83808e2",
                "owner": "pancake2",
                "identifier": "bsc~contract~0xb5bdCA8f7edBf7739C2F5776cD61b0616F2d74ce",
                "address": "0xb5bdCA8f7edBf7739C2F5776cD61b0616F2d74ce",
                "owner_name": "pancake2",
                "total_supply": 0,
                "kind": "contract",
                "quote_token_balance": 3068.153313205622,
                "volumes": {
                    "week": 1595424.759188962,
                    "hour": 0,
                    "month": 4067574.398645979,
                    "day": 1.85478427442e-7
                },
                "readable_create_date": "2021-11-15T15:10:36.456Z",
                "base_token_symbol": "META18X",
                "update_date": 1643729745000,
                "quote_token_address": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
                "quote_token_symbol": "WBNB",
                "decimals": 18,
                "base_token_balance": 2036046948.1513073,
                "name": "Pool Meta18X-Wrapped BNB",
                "quote_token_price": 639787.7773043781,
                "category": "pool",
                "readable_update_date": "2022-02-01T15:35:45.000Z"
            },
            "sort": [
                3562739.8
            ]
        }
     ]
    markets: 
      type: object
      properties:
        payload:
          type: array
          items:
            type: object
          example: [
            {
             "id": "bitcoin",
             "symbol": "btc",
             "name": "Bitcoin",
             "image": "https://assets.coingecko.com/coins/images/1/large/bitcoin.png?1547033579",
             "current_price": 46850,
             "market_cap": 886432062145,
             "market_cap_rank": 1,
             "fully_diluted_valuation": 984744133379,
             "total_volume": 29006379008,
             "high_24h": 48365,
             "low_24h": 45741,
             "price_change_24h": -1320.954423621188,
             "price_change_percentage_24h": -2.74221,
             "market_cap_change_24h": -24591354901.458862,
             "market_cap_change_percentage_24h": -2.69931,
             "circulating_supply": 18903462.0,
             "total_supply": 21000000.0,
             "max_supply": 21000000.0,
             "ath": 69045,
             "ath_change_percentage": -32.08381,
             "ath_date": "2021-11-10T14:24:11.849Z",
             "atl": 67.81,
             "atl_change_percentage": 69053.91435,
             "atl_date": "2013-07-06T00:00:00.000Z",
             "roi": null,
             "last_updated": "2021-12-17T17:47:38.656Z",
             "price_change_percentage_24h_in_currency": -2.7422101215602948,
             "price_change_percentage_7d_in_currency": -2.1627808523283427
            },
            {
            "id": "ethereum",
            "symbol": "eth",
            "name": "Ethereum",
            "image": "https://assets.coingecko.com/coins/images/279/large/ethereum.png?1595348880",
            "current_price": 3869.31,
            "market_cap": 460644566746,
            "market_cap_rank": 2,
            "fully_diluted_valuation": null,
            "total_volume": 21627222083,
            "high_24h": 4062.33,
            "low_24h": 3713.35,
            "price_change_24h": -179.970636469499,
            "price_change_percentage_24h": -4.44451,
            "market_cap_change_24h": -20345838667.25299,
            "market_cap_change_percentage_24h": -4.22999,
            "circulating_supply": 118778723.4365,
            "total_supply": null,
            "max_supply": null,
            "ath": 4878.26,
            "ath_change_percentage": -20.50083,
            "ath_date": "2021-11-10T14:24:19.604Z",
            "atl": 0.432979,
            "atl_change_percentage": 895596.48266,
            "atl_date": "2015-10-20T00:00:00.000Z",
            "roi": {
               "times": 109.48015877689825,
               "currency": "btc",
               "percentage": 10948.015877689826
             },
               "last_updated": "2021-12-17T17:47:13.483Z",
               "price_change_percentage_24h_in_currency": -4.444512573445673,
               "price_change_percentage_7d_in_currency": -6.838524068604988
             },
            ]
    explorers_tokens:
      type: object
      properties:
        total:
          type: integer
          format: int32
          example: 3
        limit:
          type: integer
          format: int32
          example: 20
        skip:
          type: integer
          format: int32
          example: 20
        data:
          type: array
          items:
            type: object
          example: [
            {
            "id": 1,
            "address": "0x07af67b392B7A202fAD8E0FBc64C34F33102165B",
            "symbol": "AQUAGOAT",
            "name": "Aquagoat",
            "kind": "token",
            "chain": "bsc",
            "create_date": 1635515912000,
            "update_date": 1635515912000,
            "readable_create_date": "2021-10-29T13:58:32.000Z",
            "readable_update_date": "2021-10-29T13:58:32.000Z",
            "subreddit_url": "https://www.reddit.com/r/AquaGoatFinance/",
            "blockchain_site": ["https://bscscan.com/token/0x07af67b392B7A202fAD8E0FBc64C34F33102165B"],
            "repos_url": ["https://github.com/AquaGoat"],
            "official_forum_url": ["www.official.forum.example.com"],
            "telegram_channel_identifier": "AquaGoat",
            "twitter_screen_name": "AquaBsc",
            "medium_url": "https://safemoon.medium.com/",
            "facebook_username": "aquagoat.finance",
            "discord_url": "https://discord.com/invite/QmGT2Rcyn3",
            "homepage": "https://www.aquagoat.finance/",
            "categories": ["Utility Token", "Security Token"],
            "description": "AquaGoat is a yield-generating social cryptocurrency. Members of the AquaGoat ecosystem earn interest from network activity, all while benefitting the planet through our charitable partnerships.",
            "rugged": false,
            "vote_positive": 0,
            "vote_negative": 0,
            "user_wallet": "random",
            "username": "random",
            "user_email": "random",
            "user_phone": "random",
            "user_plan": "free",
          },
          {
            "id": 2,
            "address": "0x07af67b392B7A202fAD8E0FBc64C34F33102165B",
            "symbol": "AQUAGOAT",
            "name": "Aquagoat",
            "kind": "token",
            "chain": "bsc",
            "create_date": 1635515912000,
            "update_date": 1635515912000,
            "readable_create_date": "2021-10-29T13:58:32.000Z",
            "readable_update_date": "2021-10-29T13:58:32.000Z",
            "subreddit_url": "https://www.reddit.com/r/AquaGoatFinance/",
            "blockchain_site": ["https://bscscan.com/token/0x07af67b392B7A202fAD8E0FBc64C34F33102165B"],
            "repos_url": ["https://github.com/AquaGoat"],
            "official_forum_url": ["www.official.forum.example.com"],
            "telegram_channel_identifier": "AquaGoat",
            "twitter_screen_name": "AquaBsc",
            "medium_url": "https://safemoon.medium.com/",
            "facebook_username": "aquagoat.finance",
            "discord_url": "https://discord.com/invite/QmGT2Rcyn3",
            "homepage": "https://www.aquagoat.finance/",
            "categories": ["Utility Token", "Security Token"],
            "description": "AquaGoat is a yield-generating social cryptocurrency. Members of the AquaGoat ecosystem earn interest from network activity, all while benefitting the planet through our charitable partnerships.",
            "rugged": false,
            "vote_positive": 0,
            "vote_negative": 0,
            "user_wallet": "random",
            "username": "random",
            "user_email": "random",
            "user_phone": "random",
            "user_plan": "free",
          },
          {
            "id": 3,
            "address": "0x07af67b392B7A202fAD8E0FBc64C34F33102165B",
            "symbol": "AQUAGOAT",
            "name": "Aquagoat",
            "kind": "token",
            "chain": "bsc",
            "create_date": 1635515912000,
            "update_date": 1635515912000,
            "readable_create_date": "2021-10-29T13:58:32.000Z",
            "readable_update_date": "2021-10-29T13:58:32.000Z",
            "subreddit_url": "https://www.reddit.com/r/AquaGoatFinance/",
            "blockchain_site": ["https://bscscan.com/token/0x07af67b392B7A202fAD8E0FBc64C34F33102165B"],
            "repos_url": ["https://github.com/AquaGoat"],
            "official_forum_url": ["www.official.forum.example.com"],
            "telegram_channel_identifier": "AquaGoat",
            "twitter_screen_name": "AquaBsc",
            "medium_url": "https://safemoon.medium.com/",
            "facebook_username": "aquagoat.finance",
            "discord_url": "https://discord.com/invite/QmGT2Rcyn3",
            "homepage": "https://www.aquagoat.finance/",
            "categories": ["Utility Token", "Security Token"],
            "description": "AquaGoat is a yield-generating social cryptocurrency. Members of the AquaGoat ecosystem earn interest from network activity, all while benefitting the planet through our charitable partnerships.",
            "rugged": false,
            "vote_positive": 0,
            "vote_negative": 0,
            "user_wallet": "random",
            "username": "random",
            "user_email": "random",
            "user_phone": "random",
            "user_plan": "free",
          },
          {
            "id": 4,
            "address": "0x07af67b392B7A202fAD8E0FBc64C34F33102165B",
            "symbol": "AQUAGOAT",
            "name": "Aquagoat",
            "kind": "token",
            "chain": "bsc",
            "create_date": 1635515912000,
            "update_date": 1635515912000,
            "readable_create_date": "2021-10-29T13:58:32.000Z",
            "readable_update_date": "2021-10-29T13:58:32.000Z",
            "subreddit_url": "https://www.reddit.com/r/AquaGoatFinance/",
            "blockchain_site": ["https://bscscan.com/token/0x07af67b392B7A202fAD8E0FBc64C34F33102165B"],
            "repos_url": ["https://github.com/AquaGoat"],
            "official_forum_url": ["www.official.forum.example.com"],
            "telegram_channel_identifier": "AquaGoat",
            "twitter_screen_name": "AquaBsc",
            "medium_url": "https://safemoon.medium.com/",
            "facebook_username": "aquagoat.finance",
            "discord_url": "https://discord.com/invite/QmGT2Rcyn3",
            "homepage": "https://www.aquagoat.finance/",
            "categories": ["Utility Token", "Security Token"],
            "description": "AquaGoat is a yield-generating social cryptocurrency. Members of the AquaGoat ecosystem earn interest from network activity, all while benefitting the planet through our charitable partnerships.",
            "rugged": false,
            "vote_positive": 0,
            "vote_negative": 0,
            "user_wallet": "random",
            "username": "random",
            "user_email": "random",
            "user_phone": "random",
            "user_plan": "free",
            }
         ]
    explorers_pairs:
      type: object
      properties:
        total:
          type: integer
          format: int32
          example: 3
        limit:
          type: integer
          format: int32
          example: 20
        skip:
          type: integer
          format: int32
          example: 0
        data:
          type: array
          items:
            type: object
          example: [
            {
            "id": 1,
            "address": "0xc2Eed0F5a0dc28cfa895084bC0a9B8B8279aE492",
            "factory_address": "0x01bF7C66c6BD861915CdaaE475042d3c4BaE16A7",
            "symbol": "WBNB/BAKE",
            "name": "Pool Wrapped BNB-BakeryToken",
            "owner": "bakeryswap",
            "base_token_name": "Wrapped BNB",
            "base_token_address": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
            "base_token_symbol": "WBNB",
            "quote_token_name": "BakeryToken",
            "quote_token_address": "0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5",
            "quote_token_symbol": "BAKE",
            "create_date": 1635515912000,
            "update_date": 1635515912000,
            "readable_create_date": "2021-10-29T13:58:32.000Z",
            "readable_update_date": "2021-10-29T13:58:32.000Z",
          },
          {
            "id": 2,
            "address": "0xc2Eed0F5a0dc28cfa895084bC0a9B8B8279aE492",
            "factory_address": "0x01bF7C66c6BD861915CdaaE475042d3c4BaE16A7",
            "symbol": "WBNB/BAKE",
            "name": "Pool Wrapped BNB-BakeryToken",
            "owner": "bakeryswap",
            "base_token_name": "Wrapped BNB",
            "base_token_address": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
            "base_token_symbol": "WBNB",
            "quote_token_name": "BakeryToken",
            "quote_token_address": "0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5",
            "quote_token_symbol": "BAKE",
            "create_date": 1635515912000,
            "update_date": 1635515912000,
            "readable_create_date": "2021-10-29T13:58:32.000Z",
            "readable_update_date": "2021-10-29T13:58:32.000Z",
          },
          {
            "id": 3,
            "address": "0xc2Eed0F5a0dc28cfa895084bC0a9B8B8279aE492",
            "factory_address": "0x01bF7C66c6BD861915CdaaE475042d3c4BaE16A7",
            "symbol": "WBNB/BAKE",
            "name": "Pool Wrapped BNB-BakeryToken",
            "owner": "bakeryswap",
            "base_token_name": "Wrapped BNB",
            "base_token_address": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
            "base_token_symbol": "WBNB",
            "quote_token_name": "BakeryToken",
            "quote_token_address": "0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5",
            "quote_token_symbol": "BAKE",
            "create_date": 1635515912000,
            "update_date": 1635515912000,
            "readable_create_date": "2021-10-29T13:58:32.000Z",
            "readable_update_date": "2021-10-29T13:58:32.000Z",
          }
          ]
    singular_sale:
      type: object
      properties:
        "_index":
          type: string
          example: "marketplace_01252022"
        "_type": 
          type: string
          example: "_doc"
        "_id": 
          type: string
          example: "121"  
        "_version": 
          type: integer
          format: int32
          example: 1
        "_seq_no":
          type: integer
          format: int32
          example: 6
        "_primary_term": 
          type: integer
          format: int32
          example: 1
        "found": 
          type: boolean
          example: true
        "_source": 
          type: object
          example: {
        "base_token_address": "0xa037c562d8a5914f9e314efa5308e1f8e3bad1ac",
        "next_claim": {},
        "seller_wallet": "0x4a9e0fcdd826af2b235c69fc4e2ee03cdbb82632",
        "identifier": "300",
        "close_date": 0,
        "period": "0",
        "purchases": {},
        "kind": "1",
        "quote_token_name": "Wrapped BNB",
        "base_token_id": "0",
        "packages": "0",
        "base_token_symbol": "TESTC",
        "update_date": 1645879598000,
        "quote_token_address": "0xae13d989dac2f0debff460ac112a837c89baa7cd",
        "base_token_quantity": 0.0001,
        "quote_token_quantity": 0.0001,
        "blockchain": "bsctest",
        "quote_token_symbol": "WBNB",
        "claims": {},
        "category": "token",
        "create_date": 1645879598000,
        "base_token_name": "Test coin",
        "ratio": 1,
        "whitelisted_wallets": [
            "0x35c223fefa0724e99adf6adc8bc43ed48693d0cf"
        ]
        }
    Subscriptions:
      type: array
      items:
        type: object
      properties:
        "active": 
          type: boolean
          example: true
        "created_at": 
          type: string
          example: "2021-06-13T02:00:47.287Z"
        "identifier": 
          type: string
          example: "0224566a-4f4b-4eac-8ed6-f46e60d804e6"
        "user_sub": 
          type: string
          example: "system"
        "details": 
          type: object
          example: {
            "portfolios": 10000000000,
            "staking": {
                "portfolios": 10000000000,
                "portfolioEntities": 10000000000
            },
            "alerts": true,
            "wallets": 10000000000,
            "portfolioEntities": 10000000000,
            "notifications": {
                "wallet": true
            }
            }
        "price": 
          type: object
          example: {
            "discount_threshold_eulers": 4000,
            "usd_month_discounted": 299.99,
            "usd_month": 449.99,
         } 
        "name":
          type: string
          example: "pro"
    Profiles:
      type: object
      properties:
        "user_sub": 
          type: string
          example: "18a4d00f-17ac-4f02-bd89-d3e4a671af63"
        "identifier": 
          type: string
          example: "8dffaa18-46a2-4858-a82d-f74edd53e855"
        "subscription":
          type: object
          example: {
        "created_at": "2022-02-23T13:34:29.661Z",
        "identifier": "4208cc9c-db93-4ec0-87bd-7cbf1db0219a",
        "subscription": "877cfea9-bf77-4e71-9c6a-00e45c3226fb",
        "status": "confirmed",
        "user_sub": "18a4d00f-17ac-4f02-bd89-d3e4a671af63",
        "details": {},
        "permissions": {
            "portfolios": 1,
            "staking": {
                "portfolios": 3,
                "portfolioEntities": 50
            },
            "alerts": false,
            "wallets": 3,
            "portfolioEntities": 20,
            "notifications": {
                "wallet": false
            }
        },
        "name": "free"
     }
    Farms:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
          example: [
     {
        "id": "pancake_farm_137",
        "name": "LOTTO",
        "token": "lotto",
        "platform": "pancake",
        "provider": "pancake",
        "earns": [
            "cake"
        ],
        "link": "https://pancakeswap.finance/farms",
        "has_details": true,
        "extra": {
            "lpAddress": "0xcA8825E9486ac20b17737E7231d67e1373B7FB4a",
            "transactionToken": "0xcA8825E9486ac20b17737E7231d67e1373B7FB4a",
            "transactionAddress": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
        },
        "chain": "bsc",
        "main_platform": "pancake",
        "tvl": {
            "amount": 1
        },
        "actions": [
            {
                "method": "deposit",
                "inputs": [
                    137,
                    0
                ],
                "type": "claim_fake",
                "contract": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
            },
            {
                "method": "emergencyWithdraw",
                "inputs": [
                    137
                ],
                "type": "emergency_withdraw",
                "contract": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
            }
        ]
     },
     {
        "id": "pancake_farm_138",
        "name": "BURN",
        "token": "burn",
        "platform": "pancake",
        "provider": "pancake",
        "earns": [
            "cake"
        ],
        "link": "https://pancakeswap.finance/farms",
        "has_details": true,
        "extra": {
            "lpAddress": "0xffaf3aF0Cb86BA126158CAb09DbD094996Bb4d24",
            "transactionToken": "0xffaf3aF0Cb86BA126158CAb09DbD094996Bb4d24",
            "transactionAddress": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
        },
        "chain": "bsc",
        "main_platform": "pancake",
        "tvl": {
            "amount": 1
        },
        "actions": [
            {
                "method": "deposit",
                "inputs": [
                    138,
                    0
                ],
                "type": "claim_fake",
                "contract": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
            },
            {
                "method": "emergencyWithdraw",
                "inputs": [
                    138
                ],
                "type": "emergency_withdraw",
                "contract": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
            }
        ]
     },
     {
        "id": "pancake_farm_251",
        "name": "CAKE-WBNB",
        "token": "cake-wbnb",
        "platform": "pancake",
        "provider": "pancake",
        "earns": [
            "cake"
        ],
        "link": "https://pancakeswap.finance/farms",
        "has_details": true,
        "extra": {
            "lpAddress": "0x0eD7e52944161450477ee417DE9Cd3a859b14fD0",
            "transactionToken": "0x0eD7e52944161450477ee417DE9Cd3a859b14fD0",
            "transactionAddress": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
        },
        "chain": "bsc",
        "main_platform": "pancake",
        "tvl": {
            "amount": 1934027.1979703677,
            "usd": 255996021.39902633
        },
        "yield": {
            "apy": 43.705335557185165
        },
        "actions": [
            {
                "method": "deposit",
                "inputs": [
                    251,
                    0
                ],
                "type": "claim_fake",
                "contract": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
            },
            {
                "method": "emergencyWithdraw",
                "inputs": [
                    251
                ],
                "type": "emergency_withdraw",
                "contract": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
            }
        ]
     },
     {
        "id": "pancake_farm_252",
        "name": "WBNB-BUSD",
        "token": "wbnb-busd",
        "platform": "pancake",
        "provider": "pancake",
        "earns": [
            "cake"
        ],
        "link": "https://pancakeswap.finance/farms",
        "has_details": true,
        "extra": {
            "lpAddress": "0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16",
            "transactionToken": "0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16",
            "transactionAddress": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
        },
        "chain": "bsc",
        "main_platform": "pancake",
        "tvl": {
            "amount": 7726570.299520907,
            "usd": 388316561.07661265
        },
        "yield": {
            "apy": 6.794921265608833
        },
        "actions": [
            {
                "method": "deposit",
                "inputs": [
                    252,
                    0
                ],
                "type": "claim_fake",
                "contract": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
            },
            {
                "method": "emergencyWithdraw",
                "inputs": [
                    252
                ],
                "type": "emergency_withdraw",
                "contract": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
            }
        ]
     },
     {
        "id": "pancake_farm_253",
        "name": "ADA-WBNB",
        "token": "ada-wbnb",
        "platform": "pancake",
        "provider": "pancake",
        "earns": [
            "cake"
        ],
        "link": "https://pancakeswap.finance/farms",
        "has_details": true,
        "extra": {
            "lpAddress": "0x28415ff2C35b65B9E5c7de82126b4015ab9d031F",
            "transactionToken": "0x28415ff2C35b65B9E5c7de82126b4015ab9d031F",
            "transactionAddress": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
        },
        "chain": "bsc",
        "main_platform": "pancake",
        "tvl": {
            "amount": 290230.77023778873,
            "usd": 14048258.298869751
        },
        "yield": {
            "apy": 8.610520397437949
        },
        "actions": [
            {
                "method": "deposit",
                "inputs": [
                    253,
                    0
                ],
                "type": "claim_fake",
                "contract": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
            },
            {
                "method": "emergencyWithdraw",
                "inputs": [
                    253
                ],
                "type": "emergency_withdraw",
                "contract": "0x73feaa1eE314F8c655E354234017bE2193C9E24E"
            }
        ]
       }
        ]
    Portfolios:
      type: object
      properties:
        "name":
          type: string
          example: "portfolio"
        "created_at": 
          type: string
          example: "2022-03-02T17:21:22.580Z"
        "identifier": 
          type: string
          example: "62dea784-ef19-4980-aa1d-5cc545b5131f"
    Wallet:
      type: array
      items:
        type: object
        properties:
          "user_sub": 
            type: string
            example: "18a4d00f-17ac-4f02-bd89-d3e4a671af63"
          "created_at": 
            type: string
            example: "2022-02-25T17:54:09.683Z"
          "address": 
            type: string
            example: "0xE7c5F631457e38cAa5d006e10936CDBDF41d3273"
          "name": 
            type: string
            example: "mywallet20"
          "identifier": 
            type: string
            example: "559d24d1-1502-44a5-b4a0-6ee62a9af58f"
    App_trades:
      type: object
      properties:
        total:
          type: integer
          format: int32
          example: 440
        limit:
          type: integer
          format: int32
          example: 10
        skip:
          type: integer
          format: int32
          example: 0
        data:
          type: array
          items:
            type: object
          example: [
         {
            "address": "0x51dddb90f8ec85be147a4b7f9922bdba063ac07e",
            "base_token": "0x31045e7023e6c388f9447e632a3f9eaff90393fa",
            "quote_token": "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
            "transaction_hash": "0x6e0731acdf483a660d3140a9def02e42e3c4089a12b57b2990b0bf0b1b2eb9a4",
            "log_index": "48",
            "base_in": "285920091.35418170000000000000000000000000000000000000000000",
            "base_out": "0.00000000000000000000000000000000000000000000000000",
            "quote_in": "0.00000000000000000000000000000000000000000000000000",
            "quote_out": "0.00046474655745459100000000000000000000000000000000",
            "price_base": "0.00000000000162544211305140200000000000000000000000",
            "price_quote": "615217233496.38390000000000000000000000000000000000000000000000",
            "price_bnb": "0.00000000000162544211305140200000000000000000000000",
            "price_usd": "0.00000000083885631632312350000000000000000000000000",
            "block_number": "13918697",
            "block_timestamp": "2021-12-30T05:29:48.000Z",
            "volume": "0.23984587459613985000000000000000000000000000000000",
            "factory": null,
            "base_price_usd": "0.00000000083885631632312350000000000000000000000000",
            "quote_price_usd": "317500609886658.90000000000000000000000000000000000000000000000000",
            "ratio": "0.00000000000162544211305140200000000000000000000000"
         },
         {
            "address": "0x1a9aa2a681b95112dc980edee56d23313a416ac8",
            "base_token": "0x31045e7023e6c388f9447e632a3f9eaff90393fa",
            "quote_token": "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
            "transaction_hash": "0x15eade2abe8d5eb792cfdea5a7cb4e1ba97b7a2cd6401a68f806d92f9dbbbf46",
            "log_index": "1016",
            "base_in": "4178859636.21411400000000000000000000000000000000000000000000",
            "base_out": "0.00000000000000000000000000000000000000000000000000",
            "quote_in": "0.00000000000000000000000000000000000000000000000000",
            "quote_out": "0.00744655891561249300000000000000000000000000000000",
            "price_base": "0.00000000000178195956884514750000000000000000000000",
            "price_quote": "561179960243.47520000000000000000000000000000000000000000000000",
            "price_bnb": "0.00000000000178195956884514750000000000000000000000",
            "price_usd": "0.00000000091502093998618010000000000000000000000000",
            "block_number": "13914846",
            "block_timestamp": "2021-12-30T02:17:01.000Z",
            "volume": "3.82374407239894550000000000000000000000000000000000",
            "factory": null,
            "base_price_usd": "0.00000000091502093998618010000000000000000000000000",
            "quote_price_usd": "288161091699838.90000000000000000000000000000000000000000000000000",
            "ratio": "0.00000000000178195956884514750000000000000000000000"
         },
         {
            "address": "0x1a9aa2a681b95112dc980edee56d23313a416ac8",
            "base_token": "0x31045e7023e6c388f9447e632a3f9eaff90393fa",
            "quote_token": "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
            "transaction_hash": "0x72ac319a595386dd15e341c695944b122e47d8a89375e59e70f53612be26e4d3",
            "log_index": "353",
            "base_in": "11345389046.26648000000000000000000000000000000000000000000000",
            "base_out": "0.00000000000000000000000000000000000000000000000000",
            "quote_in": "0.00000000000000000000000000000000000000000000000000",
            "quote_out": "0.02021826589686694000000000000000000000000000000000",
            "price_base": "0.00000000000178206898101218770000000000000000000000",
            "price_quote": "561145505956.79820000000000000000000000000000000000000000000000",
            "price_bnb": "0.00000000000178206898101218770000000000000000000000",
            "price_usd": "0.00000000092303132026635260000000000000000000000000",
            "block_number": "13912931",
            "block_timestamp": "2021-12-30T00:41:16.000Z",
            "volume": "10.47214943031076300000000000000000000000000000000000",
            "factory": null,
            "base_price_usd": "0.00000000092303132026635260000000000000000000000000",
            "quote_price_usd": "290648051643120.75000000000000000000000000000000000000000000000000",
            "ratio": "0.00000000000178206898101218770000000000000000000000"
         },
         {
            "address": "0x1a9aa2a681b95112dc980edee56d23313a416ac8",
            "base_token": "0x31045e7023e6c388f9447e632a3f9eaff90393fa",
            "quote_token": "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
            "transaction_hash": "0x1e537fed960fcab00db7cca0002677f49300bb901ba0bceab07f5cfc0cde0120",
            "log_index": "468",
            "base_in": "44198176990.09643000000000000000000000000000000000000000000000",
            "base_out": "0.00000000000000000000000000000000000000000000000000",
            "quote_in": "0.00000000000000000000000000000000000000000000000000",
            "quote_out": "0.07878150844278077000000000000000000000000000000000",
            "price_base": "0.00000000000178246058565794470000000000000000000000",
            "price_quote": "561022222901.42720000000000000000000000000000000000000000000000",
            "price_bnb": "0.00000000000178246058565794470000000000000000000000",
            "price_usd": "0.00000000091667709140675790000000000000000000000000",
            "block_number": "13912032",
            "block_timestamp": "2021-12-29T23:56:19.000Z",
            "volume": "40.51545632876268000000000000000000000000000000000000",
            "factory": null,
            "base_price_usd": "0.00000000091667709140675790000000000000000000000000",
            "quote_price_usd": "288520387851383.40000000000000000000000000000000000000000000000000",
            "ratio": "0.00000000000178246058565794470000000000000000000000"
         },
         {
            "address": "0x51dddb90f8ec85be147a4b7f9922bdba063ac07e",
            "base_token": "0x31045e7023e6c388f9447e632a3f9eaff90393fa",
            "quote_token": "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
            "transaction_hash": "0x25d422b5ee76e83ea3cf6c509376c7c24e9eee614a9f6242cdab0425448cf54f",
            "log_index": "210",
            "base_in": "240489283.80011110000000000000000000000000000000000000000000",
            "base_out": "0.00000000000000000000000000000000000000000000000000",
            "quote_in": "0.00000000000000000000000000000000000000000000000000",
            "quote_out": "0.00040530697180545100000000000000000000000000000000",
            "price_base": "0.00000000000168534316956231800000000000000000000000",
            "price_quote": "593350967363.93400000000000000000000000000000000000000000000000",
            "price_bnb": "0.00000000000168534316956231800000000000000000000000",
            "price_usd": "0.00000000090559418812652230000000000000000000000000",
            "block_number": "13893229",
            "block_timestamp": "2021-12-29T08:15:46.000Z",
            "volume": "0.21778569771609038000000000000000000000000000000000",
            "factory": null,
            "base_price_usd": "0.00000000090559418812652230000000000000000000000000",
            "quote_price_usd": "318828353339797.10000000000000000000000000000000000000000000000000",
            "ratio": "0.00000000000168534316956231800000000000000000000000"
         },
         {
            "address": "0x51dddb90f8ec85be147a4b7f9922bdba063ac07e",
            "base_token": "0x31045e7023e6c388f9447e632a3f9eaff90393fa",
            "quote_token": "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
            "transaction_hash": "0xfb0afd185ae4c1318ce99f397fa6d1bd169bc8c6804b169854f796bc6032e769",
            "log_index": "68",
            "base_in": "242932587.65478653000000000000000000000000000000000000000000",
            "base_out": "0.00000000000000000000000000000000000000000000000000",
            "quote_in": "0.00000000000000000000000000000000000000000000000000",
            "quote_out": "0.00042352250708026400000000000000000000000000000000",
            "price_base": "0.00000000000174337461749718180000000000000000000000",
            "price_quote": "573600183209.97300000000000000000000000000000000000000000000000",
            "price_bnb": "0.00000000000174337461749718180000000000000000000000",
            "price_usd": "0.00000000093985993154562630000000000000000000000000",
            "block_number": "13888886",
            "block_timestamp": "2021-12-29T04:38:37.000Z",
            "volume": "0.22832260520342950000000000000000000000000000000000",
            "factory": null,
            "base_price_usd": "0.00000000093985993154562630000000000000000000000000",
            "quote_price_usd": "309230055041314.40000000000000000000000000000000000000000000000000",
            "ratio": "0.00000000000174337461749718180000000000000000000000"
         },
         {
            "address": "0x1a9aa2a681b95112dc980edee56d23313a416ac8",
            "base_token": "0x31045e7023e6c388f9447e632a3f9eaff90393fa",
            "quote_token": "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
            "transaction_hash": "0xd7aa39ac1baec84d328452cd952f9822e5587fc6d911c8f0ee8adf22eb249d5a",
            "log_index": "275",
            "base_in": "16344846685.36572600000000000000000000000000000000000000000000",
            "base_out": "0.00000000000000000000000000000000000000000000000000",
            "quote_in": "0.00000000000000000000000000000000000000000000000000",
            "quote_out": "0.02914101648276320000000000000000000000000000000000",
            "price_base": "0.00000000000178288711076467040000000000000000000000",
            "price_quote": "560888007974.38350000000000000000000000000000000000000000000000",
            "price_bnb": "0.00000000000178288711076467040000000000000000000000",
            "price_usd": "0.00000000095616868891422550000000000000000000000000",
            "block_number": "13882660",
            "block_timestamp": "2021-12-28T23:26:31.000Z",
            "volume": "15.62843062565017300000000000000000000000000000000000",
            "factory": null,
            "base_price_usd": "0.00000000095616868891422550000000000000000000000000",
            "quote_price_usd": "300806230509210.60000000000000000000000000000000000000000000000000",
            "ratio": "0.00000000000178288711076467040000000000000000000000"
         },
         {
            "address": "0x1a9aa2a681b95112dc980edee56d23313a416ac8",
            "base_token": "0x31045e7023e6c388f9447e632a3f9eaff90393fa",
            "quote_token": "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
            "transaction_hash": "0xbe2eafb10298c5a748199ad63d1a5d4cd87530a04473fcd57613f7589830187c",
            "log_index": "327",
            "base_in": "12759361424.43445600000000000000000000000000000000000000000000",
            "base_out": "0.00000000000000000000000000000000000000000000000000",
            "quote_in": "0.00000000000000000000000000000000000000000000000000",
            "quote_out": "0.02275111883176990000000000000000000000000000000000",
            "price_base": "0.00000000000178309227828604420000000000000000000000",
            "price_quote": "560823470651.34880000000000000000000000000000000000000000000000",
            "price_bnb": "0.00000000000178309227828604420000000000000000000000",
            "price_usd": "0.00000000097683305925217400000000000000000000000000",
            "block_number": "13795012",
            "block_timestamp": "2021-12-25T22:16:41.000Z",
            "volume": "12.46376605433448500000000000000000000000000000000000",
            "factory": null,
            "base_price_usd": "0.00000000097683305925217400000000000000000000000000",
            "quote_price_usd": "307236430334030.94000000000000000000000000000000000000000000000000",
            "ratio": "0.00000000000178309227828604420000000000000000000000"
         },
         {
            "address": "0x1a9aa2a681b95112dc980edee56d23313a416ac8",
            "base_token": "0x31045e7023e6c388f9447e632a3f9eaff90393fa",
            "quote_token": "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
            "transaction_hash": "0x9ba424b02515e4f1989833e25d19c7a4452d35c5089c5d831b5675308a1c9f9c",
            "log_index": "241",
            "base_in": "3485790596.28617860000000000000000000000000000000000000000000",
            "base_out": "0.00000000000000000000000000000000000000000000000000",
            "quote_in": "0.00000000000000000000000000000000000000000000000000",
            "quote_out": "0.00621669319522930400000000000000000000000000000000",
            "price_base": "0.00000000000178343851229981390000000000000000000000",
            "price_quote": "560714593244.07030000000000000000000000000000000000000000000000",
            "price_bnb": "0.00000000000178343851229981390000000000000000000000",
            "price_usd": "0.00000000095603863135894700000000000000000000000000",
            "block_number": "13705122",
            "block_timestamp": "2021-12-22T19:17:53.000Z",
            "volume": "3.33255047087732550000000000000000000000000000000000",
            "factory": null,
            "base_price_usd": "0.00000000095603863135894700000000000000000000000000",
            "quote_price_usd": "300579363185766.94000000000000000000000000000000000000000000000000",
            "ratio": "0.00000000000178343851229981390000000000000000000000"
         },
         {
            "address": "0x1a9aa2a681b95112dc980edee56d23313a416ac8",
            "base_token": "0x31045e7023e6c388f9447e632a3f9eaff90393fa",
            "quote_token": "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
            "transaction_hash": "0x57bf57559944e3e98b99dc69a0fda7d7719a2bd5f3f8a2d8dccbf2678ecb82ef",
            "log_index": "470",
            "base_in": "1024455055.42552590000000000000000000000000000000000000000000",
            "base_out": "0.00000000000000000000000000000000000000000000000000",
            "quote_in": "0.00000000000000000000000000000000000000000000000000",
            "quote_out": "0.00182708517107033300000000000000000000000000000000",
            "price_base": "0.00000000000178347030589001310000000000000000000000",
            "price_quote": "560704597490.32130000000000000000000000000000000000000000000000",
            "price_bnb": "0.00000000000178347030589001310000000000000000000000",
            "price_usd": "0.00000000094307347694192370000000000000000000000000",
            "block_number": "13698649",
            "block_timestamp": "2021-12-22T13:53:16.000Z",
            "volume": "0.96613639109088190000000000000000000000000000000000",
            "factory": null,
            "base_price_usd": "0.00000000094307347694192370000000000000000000000000",
            "quote_price_usd": "296492536234651.20000000000000000000000000000000000000000000000000",
            "ratio": "0.00000000000178347030589001310000000000000000000000"
         }
         ]
    wallets:
      type: object
      properties:
        "address": 
          type: string
          example: "0xE7c5F631457e38cAa5d006e10936CDBDF41d3273"
        "name": 
          type: string
          example: "Wallet3"
        "created_at": 
          type: string
          example: "2022-03-02T17:50:18.959Z"
        "identifier": 
          type: string
          example: "4235ed2b-d8a4-4e51-99db-a5c077e0d254"
    wallet_delete:
      type: object
      properties:
        "$metadata":
          type: object
          example: {
        "httpStatusCode": 200,
        "requestId": "PGPT2I4RB12JM38TPUBI54ULO7VV4KQNSO5AEMVJF66Q9ASUAAJG",
        "attempts": 1,
        "totalRetryDelay": 0
      }
    portfolios_update:
      type: object
      properties:
        "updated_at": 
          type: string
          example: "2022-03-02T17:29:53.255Z"
        "user_sub":
          type: string
          example: "18a4d00f-17ac-4f02-bd89-d3e4a671af63"
        "name": 
          type: string
          example: "portfolio10"
        "identifier": 
          type: string
          example: "49b5985b-f95f-4869-9c25-e952ccb4624a"
    portfolios_delete:
      type: object
      properties:
        "$metadata":
          type: object
          example: {
        "httpStatusCode": 200,
        "requestId": "434VB5TPIBBETK624UJQHCMBTVVV4KQNSO5AEMVJF66Q9ASUAAJG",
        "attempts": 1,
        "totalRetryDelay": 0
    }
    wallet_update:
      type: object
      properties:
        "address": 
          type: string
          example: "0xE7c5F631457e38cAa5d006e10936CDBDF41d3273"
        "name": 
          type: string
          example: "MYWALLET3"
        "updated_at": 
          type: string
          example: "2022-03-02T17:57:49.500Z"
        "identifier": 
          type: string
          example: "baae0cde-117f-45ed-afa5-56307e03201c"
    token_prices_latest:
      type: object
      properties:
        "status":
          type: integer
          format: int64
          example: 200
        "title":
          type: string
          example: "OK"
        "description":
          type: string
          example: "Successful request"
        "payload":
          type: array
          items:
            type: object
          example: [
           {
            "address": "0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2",
            "circulatingSupply": 1000000,
            "dailyPercentChangeUSD": -1.0245,
            "dailyVolumeUSD": 3954194.30424895,
            "hourlyPercentChangeUSD": 1.53884,
            "marketCapUSD": 504322007.06200004,
            "name": "Maker",
            "priceUSD": 504.322007062,
            "symbol": "MKR",
            "totalSupply": 1000000,
            "weeklyPercentChangeUSD": -7.69287
           }
        ]
    All_prices:
      type: object
      properties:
        "data":
          type: object
          example: { 
"cake": 8.3,
"bnb": 429.3692095752282,
"egg": 275.8,
"bfi": 6.93,
"kebab": 0.00976213,
"burger": 1.88,
"jul": 0.01673376,
"bake": 0.732925,
"auto": 458.74,
"2omb": 2.692908554910458,
"2shares": 2932.8996600780297,
"50c": 0.12204176655939235,
"50k": 0.021403589608798335,
"aave": 166.89255223470855,
"aave.e": 166.43866897913313,
"ada": 1.096,
"adx": 0.459862,
"alice": 8.55,
"alpa": 0.139855,
"alpaca": 0.399873,
"alpha": 0.404258,
"ampl": 1.041,
"ampl-bsc-mp": 1.0297618406403675,
"ann": 0.01821395,
"any": 20.4,
"aot": 0.11467816947769663,
"ape": 0.025239,
"apein": 6.90893737497719,
"apys": 0.1114918903327881,
"arpa": 0.09346987274979403,
"ata": 0.448921,
"atom": 28.6,
"auro": 0.0014803476999985209,
"aurora": 11.033154566942212,
"avax": 89.85,
"avaxm": 85.99135877022916,
"axs": 61.84,
"azuki": 0.023300520157101233,
"baby": 0.27626,
"babycake": 0.00001602267957944139,
"badger": 11.539467459402475,
"bal": 15.317455298383365,
"ball": 3.8803855234894877,
"banana": 0.512823,
"bananapoly": 0.5037388995480917,
"band": 4.655871696528117,
"bat": 1.2053855779216052e-10,
"bcfx": 0.1295426319662169,
"bch": 337.52,
"bct": 4.175215071206685,
"bdo": 0.01120138,
"bdp": 0.08374922859784253,
"bear": 1.39,
"beets": 0.8644241255893765,
"bel": 0.987449,
"belt": 1.65,
"beta": 0.601478,
"beth": 2938.71,
"betu": 0.13694178970302281,
"bfg": 0.01809781,
"bgo": 0.01506723,
"bhc": 51.25,
"bifi": 2582.73,
"bison": 0.325214,
"biti": 0.4943205967884338,
"bliq": 14.75508429270622,
"blk": 0.007789039045044069,
"blz": 0.232925,
"blzz": 0.052694392169622045,
"bmon": 0.05485,
"bnbm": 412.80294028672034,
"bondly": 0.004475987718582032,
"bone": 0.40356369258458763,
"boneswap": 0.0022026438703463725,
"boo": 22.61301354613437,
"bor": 309.57,
"boring": 0.03172261,
"bp": 0.14998,
"brew": 0.03434384,
"brush": 0.1189766170291716,
"bry": 0.43462,
"bscdefi": 0.3003974539060728,
"bscpad": 0.705327,
"bscx": 2.42,
"bsw": 0.551395,
"btc": 44085.70585205413,
"btcb": 44166,
"btd": 0.04903627,
"btr": 0.30045044168866836,
"bts": 7.06,
"btt": 0.00163414,
"bunny": 0.392407,
"busd": 1.001,
"busd.e": 1.0096157817441638,
"bux": 0.46102,
"bigone": 0.0017442001667385874,
"c98": 1.82,
"caps": 0.064308,
"carrot": 1.18,
"cc10": 0.00000715174355459658,
"ccar": 0.03149162,
"ceek": 0.428113,
"cel": 3.60056400322971,
"celo": 3.1001207185203885,
"celr": 0.052038575506862396,
"cgg": 0.675285,
"charge": 112.29,
"charm": 0.00005059922486688868,
"chess": 1.12,
"chr": 0.553823,
"clam": 3.4103287046794377,
"cly": 0.7982476117254612,
"com": 0.0003351525301826866,
"comp": 133.22,
"cos": 0.017172501454788207,
"coti": 0.2830533769896379,
"cover": 24.610449334248173,
"cra": 1.4112093524398899,
"craft": 0.5481086584917971,
"cream": 33.46436929576312,
"cred": 14.70546433963617,
"crona": 0.1808061759074925,
"crow": 0.72522,
"crush": 0.02565052,
"crv": 3.0991339430460823,
"crystl": 0.12136731006821384,
"ctk": 1.332486829838698,
"cyc": 154.54,
"cyt": 0.00968346,
"czf": 5.05533e-7,
"dada": 1.043940427728835,
"dai": 0.302945,
"dai.e": 0.9981763161752772,
"daio": 1.0661826667421983,
"daiv1": 0.9996832390966383,
"dar": 1.068,
"dbnb": 1.625661425703558,
"dbtc": 101.11215896241907,
"ddot": 7.297755977314605,
"defi5": 0.22772616514378607,
"degen": 3.046847466959977,
"dego": 3.54,
"delirium": 0.006879428416460743,
"dep": 0.035106755170374676,
"deri": 0.117693,
"deth": 54.64203943804872,
"dexe": 7.31,
"dfd": 0.04130713,
"dft": 0.00215195,
"dfyn": 0.11423094292854394,
"dg": 334.5610434743155,
"dibs": 4.5,
"dino": 0.0446126079992871,
"dis": 12.16,
"ditto": 0.503333,
"dkt": 1.35,
"dnd": 0.089464,
"dodo": 0.530999,
"doge": 0.149959,
"dogem": 0.030802218471133375,
"doki": 20.516102709799977,
"dola": 1.0034706270297076,
"dolly": 0.9954473583904312,
"dop": 0.03777582388916464,
"dot": 19.88,
"dotm": 19.34017581860401,
"dpi": 190.31351629713456,
"dpt": 0.01731557,
"drugs": 0.019524017310851616,
"dshare": 280.99,
"dusk": 0.4613788546582159,
"dvi": 0.6857580709668011,
"dyp": 0.24408903063938703,
"easy": 0.06127867253615942,
"egld": 195.33,
"elk": 2.9046062402759403,
"eos": 2.47,
"eps": 0.237912,
"erowan": 0.08189807567268953,
"est": 0.006625397035639464,
"etc": 33.00341901900539,
"eternal": 0.756447,
"eth": 3117.97,
"eth2x": 39.259456078419625,
"ethm": 3084.5689599582015,
"etho": 4958.354412937223,
"exp": 0.00000751194909526716,
"ez": 2.69,
"fet": 0.357739,
"fff": 5.28371148795026,
"fil": 22.16,
"fine": 0.139251,
"finn": 0.1757495695119558,
"fish": 0.499286001802361,
"foo": 0.07464635652849265,
"for": 0.0497591,
"form": 0.0257748680084816,
"fox": 0.34402342123514607,
"frax": 1.001,
"front": 0.496452,
"froyo": 0.091799,
"fruit": 0.00008868,
"ftm": 2.05,
"ftmm": 1.9772089076472257,
"fts": 0.09467,
"fxs": 26.41,
"fuel": 37.17,
"g$": 0.00018356317352103744,
"gdl": 0.0005741013127011556,
"geist": 0.21618418516349172,
"ghst": 2.0656031225534046,
"gm": 0.00002981,
"gns": 2.869572676213145,
"goal": 0.03280641359950967,
"gold": 0.026679203341089072,
"goldcoin": 0.14795144563282814,
"grand": 1.39,
"grt": 0.4755244671839224,
"guard": 1.14,
"gum": 0.151412,
"guns": 0.006691757139529806,
"hai": 0.088993,
"hakka": 0.012899602193334402,
"hard": 0.6124711588769602,
"hbar[0x]": 0.25749272507834947,
"hbch": 338.2320626716378,
"hbtc": 43988.56459741892,
"hdot": 19.775139038214746,
"hero": 0.08226,
"hfi": 0.000466121268653566,
"hfil": 22.15014116171966,
"hget": 2.1265270688108044,
"high": 5.33,
"hltc": 129.53712069849163,
"hnd": 1.6776604804312334,
"honey": 4.85,
"honor": 0.0008195314312439159,
"hoo": 1.257360068233369,
"hotcross": 0.274963,
"hps": 0.875469,
"hpt": 0.002124964322458513,
"ht": 8.21565851015551,
"htb": 0.05071628315743851,
"husd": 1,
"husky": 8.506146706415e-8,
"hyfi": 0.00040293,
"hzn": 0.079437,
"helmet": 0.053259,
"ica": 0.0029619,
"icav1": 0.1549013367749338,
"ice": 3.4,
"iceiron": 0.000666877021024493,
"idia": 0.88695,
"if": 0.597074,
"inj": 6.15,
"insur": 0.631682,
"inv": 471.20558616494446,
"iota": 0.882626021694306,
"iotx": 0.097279,
"iron": 0.934303,
"itam": 0.621151,
"jewel": 7.96312793773562,
"jgn": 0.205625,
"joe": 1.2568187702758777,
"jrt": 0.049033170230419164,
"juld": 0.01673908,
"just": 0.0018509002807139878,
"juv": 7.1935576703292075,
"kalm": 1.35,
"kart": 0.136707,
"kek": 0.063007,
"keyfi": 0.377468,
"kiro": 0.1979302663091975,
"klima": 26.21168482211688,
"klo": 0.259626887350128,
"krill": 0.013029360935060992,
"krw": 0.0000808,
"ktn": 3.21,
"kun": 0.180588,
"lac": 0.14883225492471183,
"land": 2.06,
"lava": 0.006156582578927571,
"lazio": 3.66,
"lhb": 0.003633093852963938,
"lien": 1.81,
"lina": 0.02612162,
"link": 16.94,
"link.e": 16.83367071201107,
"linko": 23.757135562290074,
"liq": 0.607445,
"lit": 1.6234469976379917,
"lithium": 0.09138123451981921,
"lmt": 0.0036422,
"long": 0.00208411,
"lqdr": 22.05321351612083,
"ltc": 130.3,
"lto": 0.238152,
"luna": 55.64851545238896,
"lyd": 0.00663501055955968,
"magic": 4.597643140892011,
"mai": 0.9957762760293053,
"mana": 3.1817034780699083,
"marsh": 0.309074,
"mash": 0.00244011,
"mask": 6.13,
"math": 0.206956,
"matic": 1.8,
"mbox": 3.09,
"mcb": 4.72,
"mcrn": 0.884392,
"mdx": 0.255676,
"mead": 0.00003449993475584433,
"melt": 2.4140219330948622,
"merl": 0.00776807,
"metahero": 0.0843905004482409,
"metis": 141.2510208717863,
"mfrm": 0.008672366300244856,
"milk": 0.00038976729609273996,
"mim": 0.9992019178008253,
"mir": 1.19,
"mobi": 0.018411313891750134,
"moon": 0.716922,
"msc": 0.03433954197888985,
"mss": 0.900575,
"mtrg": 2.17,
"multi": 19.1,
"must": 57.51114646676983,
"mx": 1.8458527874387303,
"nabox": 0.00004097,
"naos": 0.229926,
"nar": 0.06886511398212161,
"naut": 0.326001,
"near": 11.14295186194121,
"nett": 4.364092183819619,
"nexo": 2.145544833696242,
"nft": 0.0000021,
"nfty": 0.0499331,
"nrv": 0.02748394,
"nugget": 0.023822788573517436,
"nuls": 0.4768386640949443,
"nuts": 0.174836,
"nya": 0.00024364189580843273,
"nyan": 0.013710240336782007,
"nyas": 0.001825730503775406,
"o3": 0.387029,
"oasis": 0.694229,
"ocp": 0.01706664,
"oddz": 0.156742,
"oin": 0.158629,
"olive": 0.03346481,
"one": 0.194305,
"ont": 0.570494,
"ooe": 0.142223,
"orbs": 0.073563,
"pacoca": 0.067761,
"palm": 0.0006127293297061544,
"panther": 0.00283702,
"pbnb": 427.5245465320111,
"pbtc": 44245,
"pear": 0.0011783185237879041,
"pefi": 0.37166707990688336,
"pera": 0.02462551,
"perl": 0.055972,
"pets": 0.07952377656272468,
"pha": 0.2883218391463742,
"pickle": 7.377936393603108,
"pmon": 5.53,
"pmp": 0.075645,
"png": 0.39303292419880675,
"pnt": 0.724324,
"pool": 2.8084551092829098,
"popen": 0.07091145371592585,
"porto": 4,
"pots": 1.21,
"psg": 19.181213663237372,
"psp": 0.15794061443965698,
"ptp": 4.335444619412384,
"pup": 3.8049451737472952,
"pusd": 0.9810706965655618,
"pyq": 0.001852423511869871,
"pzap": 0.00531488417726516,
"polydoge": 2.451342135595e-8,
"qbt": 0.00177181,
"qi": 1.0900423877589018,
"qkc": 0.017227586995450954,
"quant": 0.00002470359692815326,
"quick": 210.93453305616475,
"quidd": 0.573412,
"rabbit": 0.01427478,
"ramp": 0.116186,
"razor": 0.018679600078495246,
"reef": 0.01199983,
"relay": 1.24,
"revv": 0.102589,
"rfox": 0.067248,
"rib": 446.9306396748264,
"roco": 0.9459316586055545,
"rome": 44.976870074517066,
"route": 3.5222351492230874,
"rpg": 9.9,
"ramen": 0.00800828,
"salt": 0.0027236883763652056,
"santos": 2.86,
"sat": 4.086475442903164,
"scream": 55.99717673935296,
"sdt": 1.5982313138398978,
"sdump": 0.0007681227497583532,
"sfp": 0.842921,
"sfund": 7.77,
"shade": 0.2638408818952198,
"sherpa": 0.3094031321781037,
"shib": 0.00003058650745666365,
"shibx": 0.0001591690531477585,
"sing": 0.04235634,
"sista": 0.0028562,
"skill": 6.72,
"slime": 0.03018757485980611,
"snob": 0.2993960584335978,
"snx": 4.822357830228072,
"soak": 0.0011323446370630236,
"sol": 102.41,
"solar": 0.8001439696255723,
"soup": 2.5151680126402556,
"soups": 0.12475226488067995,
"space": 0.668666,
"spade": 0.035837934691259614,
"spell": 0.005953336652508994,
"spg": 0.4382220417017344,
"spirit": 0.1180470073364484,
"sps": 0.149592,
"stars": 0.05255,
"start": 4.88,
"static": 1.084,
"stax": 1.1112519594649852,
"steak": 0.011862033856105543,
"steam": 0.07189898326664367,
"steel": 0.00478535,
"summit": 1.3824330546940815,
"sushi": 4.28,
"sushi.e": 4.1534414572158544,
"sushiv2": 4.171277958028352,
"sushio": 7.158249266824211,
"suter": 0.003179807445344723,
"swamp": 0.088405,
"swgb": 0.00072287,
"swingby": 0.01780649,
"swirl": 0.059949,
"swth": 0.01337237,
"sx": 0.4599987608517665,
"sxp": 1.47,
"syn": 2.7212406058455083,
"tape": 0.00223489,
"tarot": 0.5284767920277286,
"teddy": 0.025346602876780495,
"tel": 0.008083739744084028,
"ten": 0.22345242149126698,
"tenfi": 0.03975117,
"tethys": 2.630921062617595,
"tetu": 0.020739977116914665,
"thg": 2.17,
"thugs": 7.146039125789217,
"time": 326.67356055876843,
"titan": 1.8991705705418e-7,
"tko": 0.813201,
"tlm": 0.137055,
"tlos": 1.062517557609722,
"tndr": 0.0038816080655528214,
"tomb": 2.0212589032397497,
"tonic": 0.00000134810972708278,
"tpt": 0.01734884,
"trade": 0.078344,
"treeb": 0.3042130539817679,
"tri": 0.6738604430296078,
"trx": 0.066483,
"tsd": 1.0186701269550726,
"tshare": 6849.302299262708,
"tusd": 1.001,
"twt": 0.570475,
"txl": 0.070976,
"typh": 0.02268898,
"ubt": 0.9102682987820554,
"ubxt": 0.0143085,
"uft": 0.5287325302007188,
"unfi": 5.52,
"uni": 11.02,
"uni.e": 10.465244600842015,
"unio": 14.931628508319607,
"usdc": 1,
"usdc.e": 0.9989301213725685,
"usdcm": 0.9964498096373177,
"usdn": 1,
"usdo": 1.003,
"usdt": 1.001,
"usdt.e": 0.9985787919858458,
"usdtm": 0.9994574133991064,
"usdto": 1.0145810500402606,
"ust": 1.002,
"ustw": 1.0048534448140347,
"vai": 0.912101,
"vapor": 0.00040655211277385527,
"vision": 1.4991295053183085,
"vrt": 0.00050477,
"vso": 0.040314517198404336,
"vvs": 0.00003878391394089767,
"walbt": 0.3430223291006074,
"wanm": 0.48493695579105855,
"watch": 0.131843,
"watchpoly": 0.13150024282604142,
"waultx": 0.00064906,
"wavax": 88.43633175833742,
"wbnb": 432.26,
"wbtc": 44050.08700997551,
"wbtc.e": 43970.48536313193,
"wbtcm": 44000.556155873935,
"wbtco": 44463.35111804883,
"wcro": 0.4941589961879094,
"well": 0.00396999431993125,
"wet": 2.383032514280267,
"weth": 3104.596433687577,
"weth.e": 3097.3016380789686,
"wethv1": 3115.5385320251103,
"wex": 0.00021552,
"wexpoly": 0.00008743266368194602,
"wfil": 25.07172769330081,
"wftm": 2.0443343683262962,
"wfuse": 0.6690675855540401,
"wht": 9.953105064230963,
"win": 0.00033037,
"wings": 0.01765429,
"wise": 0.31273895689462033,
"wmass": 0.017985424224040078,
"wmatic": 1.7930916276905469,
"wmatic_dfyn": 1.7959368177129882,
"wmovr": 95.80715289081506,
"wmovr_sushi": 96.78225769830743,
"woo": 0.59431,
"woofy": 0.023786882421986077,
"woop": 0.145908,
"wsg": 2.111678765121e-8,
"wsta": 0.07785001554258734,
"wusd": 0.982134,
"xava": 6.468428886482906,
"xcv": 0.074012,
"xed": 0.305584,
"xend": 0.103674,
"xrp": 0.826346,
"xrpm": 0.8103534047568147,
"xtz": 4.136999960016877,
"xvs": 9.76,
"xwg": 0.09456,
"yak": 2679.6996898358966,
"yamp": 0.0008130340447629275,
"yel": 0.023767726881469668,
"yfi": 23799.999343547122,
"yfi.e": 26371.723467296342,
"yfii": 2322.9160024801427,
"yoshi": 1.3951202300743966,
"zbtc": 0.529731,
"zec": 125.81261215655232,
"zee": 0.190836,
"zefi": 0.060447,
"zero": 0.00306053,
"zeth": 0.6098044355152993,
"zil": 0.050551,
"zoo": 0.100597,
"abnb": 420.09370673570635,
"amim": 0.9981389984258624,
"aqi": 0.07279453276977499,
"arome": 132.99450559709592,
"asing": 0.018000579594319586,
"awool": 0.0000558196859599063,
"anymtlx": 0.697073,
"arbmim": 1.0039426927770596,
"asusdc": 1,
"avaxbnb": 428.5640519480043,
"avaxqi": 1.101608740455616,
"balbt": 0.320342875469233,
"bbadger": 13.815003277577638,
"bcom": 0.0007447128170895059,
"bdigg": 6715.0836496301545,
"bmxx": 0.012027,
"bopen": 0.070307,
"bpear": 0.00032991555179778776,
"bqi": 0.07332237673545855,
"broobee": 0.0037171627231334116,
"binspirit": 0.1163287283169241,
"bscmdx": 0.25477138531192606,
"bxbtc": 0.03528323,
"cavax": 90.54187134022034,
"cbnb": 430.57319295186426,
"ceur": 1.1367873173349345,
"cftm": 2.0503993501069147,
"cmatic": 1.7952687159796081,
"cusd": 1,
"dtop": 0.9339124816446052,
"fpear": 0.00033447161248168335,
"fsing": 0.010320442628272556,
"fusd": 1.0026356303513413,
"fusdt": 1.002292996927698,
"fwings": 0.010817456566461693,
"gguard": 1.1324567373700405,
"gohm": 6074.297131004974,
"ibbtc": 42593.09855524742,
"mamzn": 3176.24,
"mbnb": 428.4836748795245,
"mcoin": 210.90150394876696,
"mgoogl": 2811.92,
"mmim": 0.9988503019677667,
"mnflx": 415.28,
"mocean": 0.5962062011362832,
"msushi": 3.5867162394987258,
"mtsla": 961.13,
"mausdc": 0.9490689149708815,
"mimatic": 1.0295397514579852,
"pbrew": 0.0008900069431389152,
"pcws": 4.54,
"psing": 0.03791982359622922,
"pswamp": 0.00830828164562574,
"pwings": 0.005049445911248095,
"polyalpha": 0.5494646807055096,
"polybunny": 0.08115693938598838,
"polysage": 0.7193841514626538,
"polywise": 0.37719227184049386,
"rbnb": 429.6964531708668,
"rusd": 0.94611,
"rendgb": 0.02344964973391813,
"rendoge": 0.15075770335186545,
"sbdo": 5.44,
"sbgo": 0.24847653354401883,
"sspell": 0.007184361396868765,
"safepal": 0.8405829919209173,
"sushibnb": 5.280789846200348,
"sushiwbtc": 44661.14053909381,
"tbtc": 5920.436537665825,
"tdoge": 0.013414417809111671,
"wmemo": 26702.582229433734,
"wsote": 0.02439503553968733,
"wshec": 154.2623220013398,
"wsspa": 76.18807179639711,
"xblzd": 0.111365,
"xmark": 0.03009534,
"xsat": 0.01214315,
"xyeld": 0.4835863837683456,
"aur": 767.0190410683067,
"agden": 1330.7769358435892,
"jchf": 1.081111380452417,
"jeur": 1.1312909682263412,
"jgbp": 1.3548867650222347,
"moofantombifi": 3078.2097515305572,
"moonfty": 0.06054343862174645,
"stasis-eurs": 1.14,
"cad-coin": 0.786707,
"jarvis-synthetic-euro": 1.14,
"jpyc": 0.00806113,
"par-stablecoin": 1.14,
"tether-eurt": 1.14,
"2omb-2omb-ftm": 5.23110296277655,
"2omb-2share-ftm": 177.90065167974103,
"50k-50c-wmatic": 1.376393232738552,
"50k-50k-usdc": 312746.29066649615,
"alpaca-alpaca-bnb": 30.17578823366352,
"annex-ann-busd": 0.28048672153678245,
"ape-banana-matic": 1.9342451148933373,
"ape-bnb-matic": 56.30239322011567,
"ape-eth-matic": 152.2424564235601,
"ape-matic-dai": 2.7962492188249977,
"ape-watch-matic": 0.9769478554681819,
"ape-wmatic-crystl": 0.9648419840940916,
"arbinyan-nyan-eth": 14.392020920664823,
"auro-auro-bnb": 1.5980382176203702,
"auro-auro-busd": 0.07695057374701038,
"auto-auto-bnb": 952.5754877377327,
"auto-beth-eth": 6101.317464060247,
"auto-btc-bnb": 9808.528756253241,
"auto-btcb-eth": 23495.999389199384,
"auto-btcb-usdt": 424.57811887704764,
"auto-busd-bnb": 71.80840194331988,
"auto-busd-usdt": 2.014330490628394,
"auto-cake-bnb": 144.08301308069966,
"auto-comp-eth": 1326.9992802189734,
"auto-eth-beth": 6021.682357257464,
"auto-eth-usdt": 114.18544952167294,
"auto-ust-busd": 2.120945742516902,
"baby-baby-bnb": 28.10430613100448,
"baby-baby-usdt": 3.2759001791261464,
"baby-usdt-milk": 0.03622916060072593,
"bakery-bake-bnb": 52.930665660172615,
"bakery-bake-busd": 2.6941195159019937,
"bakery-bat-bake": 1.6927988745548268,
"bakery-btc-bnb": 9296.68228099606,
"bakery-usdt-busd": 2.0363565596928153,
"banana-aave-bnb": 552.7229175797013,
"banana-ada-bnb": 45.76896605681953,
"banana-ada-eth": 121.73555318234115,
"banana-ata-bnb": 29.818343096080344,
"banana-avax-bnb": 424.0188123637548,
"banana-axs-bnb": 342.2050113832705,
"banana-bake-bnb": 39.927509417162916,
"banana-banana-bnb": 33.83665194153983,
"banana-banana-busd": 1.771577273085008,
"banana-bat-bnb": 40.205170053265164,
"banana-bhc-bnb": 307.3614942319369,
"banana-bifi-bnb": 2310.370037237674,
"banana-blz-bnb": 20.90010941087343,
"banana-bnb-sista": 2.368681320483387,
"banana-bnb-stars": 11.707864830554165,
"banana-btcb-bnb": 9145.960563616532,
"banana-busd-bnb": 56.43422297330777,
"banana-busd-usdc": 2.0383009334343867,
"banana-bxbtc-bnb": 49496.2419329436,
"banana-cake-bnb": 131.2199528104457,
"banana-caps-bnb": 10.882780477076299,
"banana-celr-bnb": 10.045548917227485,
"banana-comp-bnb": 491.27536281418816,
"banana-coti-bnb": 23.725968581846253,
"banana-crush-wbnb": 6.897317469628668,
"banana-cyt-bnb": 4.891629514542152,
"banana-dot-bnb": 192.58790150312146,
"banana-eps-bnb": 21.151340502773092,
"banana-etc-bnb": 246.9039517038061,
"banana-eth-bnb": 2453.758319095729,
"banana-exp-wbnb": 0.12320902562275735,
"banana-fil-wbnb": 199.0111182739815,
"banana-frax-busd": 2.011460312100311,
"banana-fruit-bnb": 0.38727285354549584,
"banana-ftm-bnb": 66.05347335947451,
"banana-guard-bnb": 46.99693717906933,
"banana-hotcross-busd": 1.0671013996340535,
"banana-keyfi-bnb": 26.426564881485767,
"banana-land-bnb": 62.722202973158154,
"banana-link-bnb": 176.51812376835366,
"banana-ltc-bnb": 487.32456967397525,
"banana-matic-bnb": 62.08532340830225,
"banana-near-bnb": 151.95974605823858,
"banana-nfty-wbnb": 10.461865998593252,
"banana-oasis-wbnb": 36.592603954486215,
"banana-ont-bnb": 32.32832520309065,
"banana-pots-bnb": 49.26908378240461,
"banana-sfp-bnb": 39.69830470363864,
"banana-shib-bnb": 0.2609198982129095,
"banana-snx-bnb": 95.02876000872827,
"banana-sushi-bnb": 90.96538830015132,
"banana-sxp-bnb": 52.83624106974558,
"banana-tape-bnb": 2.0778671267552804,
"banana-tusd-busd": 2.0084332595632723,
"banana-twt-bnb": 32.655810609158735,
"banana-typh-bnb": 6.360989115557246,
"banana-watch-bnb": 15.227799396509955,
"banana-wbnb-ceek": 38.579692606963576,
"banana-wbnb-dep": 8.045629928632213,
"banana-wbnb-fxs": 214.968241872752,
"banana-wbnb-nugget": 6.853191433685241,
"banana-xrp-bnb": 39.15999764764367,
"banana-xvs-bnb": 135.18630361082865,
"banana-yfi-bnb": 6587.663702390422,
"banana-zec-bnb": 481.2136002411811,
"bingo-bgo-busd": 0.2583480729864917,
"bingo-sbgo-busd": 1.1231209163270819,
"bison-bison-bnb": 25.38024190785708,
"biswap-ada-wbnb": 44.38744805789386,
"biswap-avax-wbnb": 396.7400242587874,
"biswap-axs-wbnb": 330.80467094212315,
"biswap-bsw-bfg": 0.21475774994664906,
"biswap-bsw-wbnb": 32.96276170947223,
"biswap-btcb-wbnb": 8915.245253705772,
"biswap-cake-wbnb": 122.2449211499933,
"biswap-dai-usdt": 2.0070267532358588,
"biswap-dot-wbnb": 188.93984577676403,
"biswap-eth-btcb": 23721.89109538609,
"biswap-eth-sushi": 233.94466858977495,
"biswap-eth-usdt": 116.06842630602632,
"biswap-eth-wbnb": 2385.419158216323,
"biswap-fil-usdt": 9.73910223002276,
"biswap-ftm-wbnb": 60.14904294335031,
"biswap-ltc-usdt": 23.2950958845416,
"biswap-near-wbnb": 141.0843733740719,
"biswap-shib-wbnb": 0.23412446559666059,
"biswap-sol-wbnb": 422.6781702392717,
"biswap-trx-wbnb": 10.80932064663852,
"biswap-tusd-busd": 2.005468584576479,
"biswap-twt-wbnb": 31.90052992508182,
"biswap-usdt-bsw": 1.6240485665113544,
"biswap-usdt-btcb": 432.1717743897303,
"biswap-usdt-busd": 2.0605981597772054,
"biswap-usdt-usdc": 2.0126513577381107,
"biswap-usdt-wbnb": 44.90995411000826,
"biswap-ust-busd": 2.0164594666468427,
"biswap-vai-busd": 1.9255693396549505,
"biswap-wbnb-bake": 36.268152272010894,
"biswap-wbnb-bifi": 2142.036902729981,
"biswap-wbnb-busd": 45.337749844054045,
"biswap-wbnb-link": 174.0472342459485,
"biswap-wbnb-matic": 56.25247460274419,
"biswap-wbnb-uni": 139.69416499044135,
"biswap-wbnb-xvs": 132.37767013219334,
"biswap-xrp-wbnb": 38.45068575722506,
"biti-biti-bnb": 30.289109117029795,
"blizz-blzz-avax": 4.901936560644324,
"blizzard-xblzd-bnb": 14.622014104041789,
"blizzard-xblzd-busd": 0.708120323973498,
"blockmine-nugget-goldcoin": 0.12501969137438196,
"boneswap-ape-wmatic-bone": 0.12940719820559077,
"boneswap-quick-usdc-bone": 122664.98354237207,
"boneswap-quick-wmatic-bone": 0.1465750804536966,
"boneswap-sushi-wmatic-bone": 0.14532504858565828,
"boo-aave-ftm": 39.299174386551705,
"boo-any-ftm": 14.051922435879648,
"boo-bifi-ftm": 156.6214442008296,
"boo-bnb-ftm": 66.62997360590889,
"boo-boo-ftm": 14.267083575755892,
"boo-cover-ftm": 14.799226776138532,
"boo-cream-ftm": 17.963130027115415,
"boo-crv-ftm": 5.586816259907109,
"boo-dai-ftm": 3.816613692134619,
"boo-dola-inv": 44.42745099986247,
"boo-eth-ftm": 182.3439183806289,
"boo-eth-wsta": 31.381799020671806,
"boo-ftm-badger": 10.292524654214535,
"boo-ftm-band": 6.3821842287358415,
"boo-ftm-ice": 6.197482271167482,
"boo-ftm-scream": 22.37110562497816,
"boo-ftm-sushi": 6.400918522522503,
"boo-hnd-wftm": 8.497365016287354,
"boo-inv-wftm": 63.4912790071722,
"boo-kek-ftm": 0.7403776223992808,
"boo-link-ftm": 12.791820239220014,
"boo-lqdr-ftm": 16.515807439921378,
"boo-mim-ftm": 3.5599641120727843,
"boo-snx-ftm": 6.937207899791113,
"boo-steak-wftm": 0.0001817689879886775,
"boo-wftm-avax": 27.974517639320624,
"boo-wftm-beets": 3.0251312957973493,
"boo-wftm-brush": 1.2982227132085755,
"boo-wftm-dola": 2.993954865633668,
"boo-wftm-foo": 0.8324216655683505,
"boo-wftm-joe": 3.387525893520051,
"boo-wftm-matic": 3.9475078432073936,
"boo-wftm-ooe": 1.0929869592317694,
"boo-wftm-shade": 1.5380302471933969,
"boo-wftm-treeb": 1.7410925069114622,
"boo-wftm-woo": 2.280253154656306,
"boo-wftm-wsspa": 26.108423246885994,
"boo-wftm-yoshi": 3.4724968995123313,
"boo-woofy-ftm": 457.78501884504243,
"boo-yfi-eth": 17754.04310890364,
"burger-burger-bnb": 140.61869625571467,
"cafe-bifi-bnb": 4051.0005310008246,
"cafe-brew-bnb": 9.649992499776351,
"cafe-brew-busd": 0.4090467244121625,
"cafe-pbrew-matic": 0.08352773158336689,
"cafe-pbrew-usdc": 63708.385752836424,
"cafev2-brew-bnb": 8.06474660958035,
"cafev2-brew-busd": 0.40612234898217325,
"cake-ada-bnb": 48.34846421631264,
"cake-alpha-bnb": 29.864944104305163,
"cake-apys-bnb": 14.680192617823378,
"cake-arpa-bnb": 13.637764800730247,
"cake-atom-bnb": 248.14982067329888,
"cake-balbt-bnb": 25.779129208707158,
"cake-bdigg-btcb": 34936.12771252222,
"cake-bdo-bnb": 4.884545058526225,
"cake-bdo-bnb-sbdo": 4.884545058526225,
"cake-bdo-busd": 0.2329055344850312,
"cake-bel-bnb": 43.20211009856288,
"cake-belt-bnb": 62.99722342130912,
"cake-bifi-bnb": 4066.1898680803292,
"cake-bmxx-bnb": 4.746079510770362,
"cake-bondly-bnb": 0.5394663772132153,
"cake-bopen-bnb": 13.866330350212426,
"cake-bor-bnb": 784.4360656014342,
"cake-broobee-bnb": 3.837755220863099,
"cake-broobee-cake": 0.372363296032103,
"cake-bry-bnb": 29.48818930881661,
"cake-bscx-bnb": 69.79400090176307,
"cake-btcb-bnb": 9808.528756253241,
"cake-btcst-bnb": 634.7830679726482,
"cake-btd-busd": 0.46008173745032305,
"cake-bts-busd": 8.66752972718012,
"cake-busd-bnb": 71.80844801923402,
"cake-cake-bnb": 144.08301308069966,
"cake-cos-bnb": 5.813159211621781,
"cake-dai-busd": 2.054358916767485,
"cake-dego-bnb": 118.09779048545963,
"cake-dexe-busd": 5.775621610929616,
"cake-dft-bnb": 2.020796754683405,
"cake-ditto-bnb": 189505.1638940856,
"cake-dodo-bnb": 32.46027451201468,
"cake-dot-bnb": 204.055172347169,
"cake-dusk-bnb": 29.70846275387978,
"cake-egld-bnb": 718.7607520489847,
"cake-fil-bnb": 221.59160219822263,
"cake-front-bnb": 31.660179340633547,
"cake-gum-bnb": 18.092179089112165,
"cake-helmet-bnb": 10.671736867475028,
"cake-hoo-busd": 234527.49364641326,
"cake-hzn-bnb": 13.455055912581305,
"cake-inj-bnb": 115.0577585590826,
"cake-iotx-busd": 0.6794567598883379,
"cake-itam-bnb": 43.44837842169916,
"cake-jgn-bnb": 24.60760754752838,
"cake-lina-busd": 0.3619689963006485,
"cake-link-bnb": 184.28001864438428,
"cake-lit-bnb": 58.53701118762141,
"cake-ltc-bnb": 517.0144525895632,
"cake-lto-bnb": 22.293664809489798,
"cake-mamzn-ust": 116.71559257413371,
"cake-mgoogl-ust": 109.63712517037152,
"cake-mnflx-ust": 42.34166998465839,
"cake-mtsla-ust": 63.002914238948684,
"cake-nar-cake": 2.096250512477397,
"cake-nrv-bnb": 7.91908811256556,
"cake-nya-cake": 0.09301536542217495,
"cake-pcws-bnb": 96.427363359159,
"cake-perl-bnb": 10.381355646509359,
"cake-ramp-busd": 0.7352309383314646,
"cake-reef-bnb": 5.222163457236246,
"cake-sbdo-busd": 5.171930321594579,
"cake-sfp-bnb": 43.03853271366364,
"cake-stax-cake": 6.609210399666646,
"cake-sushi-eth": 238.25290712285732,
"cake-swgb-bnb": 1.393542705376482,
"cake-swingby-bnb": 5.956225110033311,
"cake-ten-bnb": 20.254194774015122,
"cake-trade-bnb": 12.48113746916575,
"cake-twt-bnb": 36.21398730746929,
"cake-txl-busd": 0.5582053677869157,
"cake-unfi-bnb": 112.3449142067782,
"cake-usdt-busd": 2.1746365371504615,
"cake-vai-busd": 2.05136554536019,
"cake-watch-bnb": 15.807616087722382,
"cake-wsote-bnb": 7.182763635059061,
"cake-xmark-busd": 11734.692426141026,
"cake-xtz-bnb": 99.43673209168178,
"cake-xvs-bnb": 186.67873258271854,
"cake-yfi-bnb": 6907.588622833296,
"cake-yfii-bnb": 2180.954684855339,
"cake-zee-bnb": 20.490628149479306,
"cake-zil-bnb": 9733.89612256568,
"cakev2-ada-bnb": 47.32604768237612,
"cakev2-adx-busd": 1.4533209312125137,
"cakev2-alpa-bnb": 16.41204099395873,
"cakev2-alpaca-busd": 1.4350527630287935,
"cakev2-alpha-bnb": 27.79025876368791,
"cakev2-ampl-bsc-mp-busd": 30934.849114867255,
"cakev2-apys-bnb": 14.950407155638183,
"cakev2-arpa-bnb": 13.625231794164755,
"cakev2-ata-bnb": 31.24315799852951,
"cakev2-atom-bnb": 272.0257075944356,
"cakev2-axs-wbnb": 372.2512851984792,
"cakev2-balbt-bnb": 26.77794694152444,
"cakev2-band-bnb": 95.62337827088058,
"cakev2-bbadger-btcb": 1587.207219775051,
"cakev2-bcfx-busd": 0.7866272377699517,
"cakev2-bdigg-btcb": 34844.02409007436,
"cakev2-bdo-bnb": 4.716945186398048,
"cakev2-bel-bnb": 43.30387294323694,
"cakev2-belt-bnb": 54.48623614570286,
"cakev2-betu-wbnb": 17.533182274414347,
"cakev2-bfi-bnb": 110.04555555732999,
"cakev2-bifi-bnb": 2327.232772109064,
"cakev2-bmon-busd": 0.5707865994853829,
"cakev2-bmon-wbnb": 12.972308647313287,
"cakev2-bmxx-bnb": 4.90926355081215,
"cakev2-bondly-bnb": 0.5260000804448949,
"cakev2-bopen-bnb": 13.836248431854823,
"cakev2-bor-bnb": 775.7635426798612,
"cakev2-boring-bnb": 8.395051618384331,
"cakev2-bp-wbnb": 24.284908650422643,
"cakev2-broobee-bnb": 2.6031064400818296,
"cakev2-bry-bnb": 29.0242259222735,
"cakev2-bscdefi-wbnb": 24.919418974209975,
"cakev2-bscpad-wbnb": 91.16173750857888,
"cakev2-bscx-bnb": 66.8563873749852,
"cakev2-btcb-bnb": 9281.607872835071,
"cakev2-btcb-busd": 457.7589380703368,
"cakev2-btcb-eth": 24582.830690852355,
"cakev2-btcst-bnb": 604.9187058370028,
"cakev2-btr-busd": 1.1385001585843764,
"cakev2-btt-bnb": 2.14798040156904,
"cakev2-btt-busd": 0.09772568565958005,
"cakev2-bunny-bnb": 34.68326884050223,
"cakev2-busd-bnb": 51.71584999694119,
"cakev2-busd-orbs": 0.5533803085737328,
"cakev2-bux-bnb": 29.767376964655828,
"cakev2-c98-wbnb": 63.028966093298614,
"cakev2-cake-bnb": 124.37888988418827,
"cakev2-cake-busd": 8.578695082771013,
"cakev2-cake-usdt": 7.07573584444817,
"cakev2-ccar-wbnb": 16.28310021342787,
"cakev2-cgg-bnb": 59.69190545881134,
"cakev2-chess-usdc": 2.5133197965700407,
"cakev2-comp-eth": 1346.5001849377295,
"cakev2-cos-bnb": 5.961306489369913,
"cakev2-cyc-bnb": 535.9418739345307,
"cakev2-dai-busd": 2.0898191592232487,
"cakev2-dego-bnb": 84.93444263868953,
"cakev2-deri-busd": 0.8408589868737816,
"cakev2-dexe-busd": 6.162334145656297,
"cakev2-dfd-busd": 0.43069256163869263,
"cakev2-dft-bnb": 1.9907048399607503,
"cakev2-dg-bnb": 921.239274904713,
"cakev2-ditto-bnb": 117467.51696501159,
"cakev2-dkt-wbnb": 57.36336789940547,
"cakev2-dodo-bnb": 32.84260889150792,
"cakev2-dot-bnb": 196.60243017858642,
"cakev2-dusk-bnb": 31.21462006714387,
"cakev2-dvi-wbnb": 38.32313004674826,
"cakev2-easy-bnb": 10.441601429061624,
"cakev2-egld-bnb": 1049.9285434408594,
"cakev2-eos-bnb": 77.29307206343154,
"cakev2-eps-bnb": 23.55541580226671,
"cakev2-eth-bnb": 2500.04607322217,
"cakev2-eth-usdc": 118.46579703445686,
"cakev2-ez-bnb": 79.70385724250502,
"cakev2-fil-bnb": 304.00544841424136,
"cakev2-fine-bnb": 19.091317794173058,
"cakev2-for-busd": 0.531885388017584,
"cakev2-form-busd": 0.36632292541486466,
"cakev2-front-bnb": 31.816225973571623,
"cakev2-gum-bnb": 18.8823929707696,
"cakev2-hakka-busd": 0.23252606336051077,
"cakev2-helmet-bnb": 10.00217309810107,
"cakev2-high-busd": 6.256450238704524,
"cakev2-hoo-busd": 232436.847647713,
"cakev2-hotcross-bnb": 23.89378017632463,
"cakev2-htb-bnb": 9.624187645389851,
"cakev2-hyfi-bnb": 0.9004146189519301,
"cakev2-hzn-bnb": 11.964990335459847,
"cakev2-idia-busd": 3.075961655117209,
"cakev2-if-busd": 2.04512044104538,
"cakev2-inj-bnb": 110.30270853668816,
"cakev2-insur-wbnb": 37.02438822780792,
"cakev2-iotx-busd": 0.7190234555263227,
"cakev2-itam-bnb": 49.990931688132775,
"cakev2-jgn-bnb": 22.704083555960345,
"cakev2-kalm-bnb": 54.135833047468836,
"cakev2-kart-wbnb": 21.93745232646037,
"cakev2-ktn-bnb": 103.25465176902449,
"cakev2-kun-busd": 0.8971648397298445,
"cakev2-lina-busd": 0.3647191636909429,
"cakev2-link-bnb": 179.42921525954392,
"cakev2-lit-bnb": 56.93942039803162,
"cakev2-lmt-bnb": 3.2664277108549435,
"cakev2-ltc-bnb": 499.4178882995018,
"cakev2-lto-bnb": 23.335982997387216,
"cakev2-mamzn-ust": 116.43248311182472,
"cakev2-marsh-bnb": 24.725254955762683,
"cakev2-mask-wbnb": 112.45151080910749,
"cakev2-math-busd": 0.9690517179148942,
"cakev2-mbox-bnb": 80.24010420286528,
"cakev2-mcb-wbnb": 93.25172419239045,
"cakev2-mcoin-ust": 29.499676560694812,
"cakev2-mcrn-wbnb": 40.92436936580044,
"cakev2-mgoogl-ust": 110.22307787676043,
"cakev2-mir-ust": 2.3403152059625736,
"cakev2-mnflx-ust": 42.187196519481866,
"cakev2-mtrg-busd": 3.523924400050921,
"cakev2-mtsla-ust": 62.71537164623565,
"cakev2-mx-busd": 3.1020936364363365,
"cakev2-nabox-busd": 0.016659900528041144,
"cakev2-naos-wbnb": 20.966128434903617,
"cakev2-nft-wbnb": 68251.24820198382,
"cakev2-nrv-bnb": 8.55406841545541,
"cakev2-nuls-busd": 151492.12147250836,
"cakev2-o3-busd": 1.4340567686903596,
"cakev2-oddz-bnb": 17.802077042407607,
"cakev2-oin-busd": 81724.850676459,
"cakev2-one-busd": 0.08616078550079295,
"cakev2-one-wbnb": 31.704551315460453,
"cakev2-pbtc-bnb": 5847.450540124461,
"cakev2-pcws-bnb": 95.48842478021724,
"cakev2-perl-bnb": 10.547850963508774,
"cakev2-pha-busd": 1.1876680864034532,
"cakev2-pmon-busd": 5.1936209852787005,
"cakev2-pnt-pbtc": 202.15561790008493,
"cakev2-popen-bnb": 11.303663119933345,
"cakev2-pots-busd": 2.582203740109357,
"cakev2-qbt-wbnb": 1.8186893627034384,
"cakev2-qi-wbnb": 12.144924846765534,
"cakev2-qkc-busd": 0.272639852822848,
"cakev2-quidd-wbnb": 36.75312552067933,
"cakev2-rabbit-wbnb": 9.855032963419738,
"cakev2-ramp-busd": 0.7546719027695712,
"cakev2-reef-bnb": 4.9264261483020215,
"cakev2-revv-bnb": 14.611184444084499,
"cakev2-rfox-bnb": 12.079784435412813,
"cakev2-rpg-busd": 6.558132232936503,
"cakev2-rusd-busd": 2.0349910549945345,
"cakev2-sfp-bnb": 40.1606938894411,
"cakev2-sfund-wbnb": 131.3346078475152,
"cakev2-skill-wbnb": 361.2117080766902,
"cakev2-sps-wbnb": 19.918882513558433,
"cakev2-sushi-eth": 243.1949056138607,
"cakev2-suter-bnb": 2.51546524713202,
"cakev2-swgb-bnb": 1.2745407155572945,
"cakev2-swingby-bnb": 5.808069383293223,
"cakev2-sxp-bnb": 55.61606994156974,
"cakev2-ten-bnb": 20.34803350854594,
"cakev2-thg-wbnb": 103.41816913129956,
"cakev2-titan-busd": 2.654788204207953,
"cakev2-tko-bnb": 39.86322896696739,
"cakev2-tlos-wbnb": 51.937920169564535,
"cakev2-trade-bnb": 12.408773969069369,
"cakev2-trx-bnb": 11.61810729488595,
"cakev2-trx-busd": 0.5517204401487731,
"cakev2-tusd-busd": 2.0179946285783927,
"cakev2-twt-bnb": 34.17480731559867,
"cakev2-txl-busd": 0.5850005163292347,
"cakev2-ubxt-busd": 0.2514380109384017,
"cakev2-unfi-bnb": 116.14276441742308,
"cakev2-uni-bnb": 142.92931327412154,
"cakev2-usdc-busd": 2.093744049884906,
"cakev2-usdt-bnb": 53.19859546504008,
"cakev2-usdt-busd": 2.098794161611801,
"cakev2-usdt-usdc": 2.089274556800395,
"cakev2-ust-busd": 2.168748830715154,
"cakev2-vai-busd": 2.0196423477089036,
"cakev2-vrt-bnb": 1.8469655444288238,
"cakev2-watch-bnb": 15.424768869646153,
"cakev2-waultx-wbnb": 1.2798829771255713,
"cakev2-wbnb-babycake": 0.19840657229307898,
"cakev2-wbnb-beta": 34.3663165123611,
"cakev2-wbnb-dpt": 5.7148697177637775,
"cakev2-wbnb-eternal": 50.33551769070967,
"cakev2-wbnb-gm": 0.26851281202185445,
"cakev2-wbnb-gnt": 0.004079068373808178,
"cakev2-wbnb-metahero": 12.658154154776193,
"cakev2-well-busd": 0.13305147222217514,
"cakev2-wex-wbnb": 0.7304073533159351,
"cakev2-win-bnb": 0.8554881794031611,
"cakev2-win-busd": 0.03877984455849512,
"cakev2-wmass-busd": 27589.798165334618,
"cakev2-woo-bnb": 35.39889332447325,
"cakev2-woop-wbnb": 16.49940365192995,
"cakev2-wsg-wbnb": 0.00891448111110567,
"cakev2-wsote-bnb": 7.062257164398905,
"cakev2-xcv-busd": 0.6477431867680583,
"cakev2-xed-bnb": 26.14241511030266,
"cakev2-xend-bnb": 15.083432307200459,
"cakev2-xmark-busd": 11946.21521804679,
"cakev2-xrp-bnb": 40.153932241102424,
"cakev2-xvs-bnb": 154.1330114261481,
"cakev2-xwg-usdc": 0.6643690389136094,
"cakev2-yfi-bnb": 7123.785069397198,
"cakev2-zee-bnb": 21.030174492454037,
"cakev2-zil-bnb": 10025.180386116048,
"cakev2-zoo-wbnb": 15.758986178201038,
"charge-charge-busd": 24.31173035138063,
"charge-static-busd": 0.5193478005437308,
"com-com-avax": 0.3777305971008143,
"com-com-bnb": 1.2300479092717427,
"com-dai-avax": 20.122436481101722,
"com-eth-avax": 1099.244747288542,
"com-png-avax": 12.337473327415749,
"cometh-azuki-eth": 17.88505123640433,
"cometh-bifi-eth": 6075.84840039629,
"cometh-bifi-must": 831.4175662123213,
"cometh-doki-eth": 554.6885661919472,
"cometh-eth-matic": 168.47936962460363,
"cometh-matic-must": 23.77782933494756,
"cometh-must-eth": 1032.6798666760296,
"cometh-must-pickle": 44.06296076307224,
"cometh-razor-eth": 15.975483603677063,
"cometh-sdt-eth": 150.57015204039678,
"crona-busd-bnb": 42.15771916789469,
"crona-cro-crona": 0.6130467323648491,
"crona-cro-dai": 1.4514919197786376,
"crona-cro-eth": 80.2600756863482,
"crona-cro-shib": 0.00794487804254219,
"crow-crow-bnb": 47.41020114381651,
"crow-crow-busd": 2.278424350929898,
"czf-czf-bnb": 0.004619219198781867,
"czf-czf-busd": 0.00019422378342450763,
"dfyn-aave-dfyn": 9.075278013385004,
"dfyn-bifi-dfyn": 35.89543257029376,
"dfyn-crv-dfyn": 1.2584740656106994,
"dfyn-dfyn-eth": 50.781517387474615,
"dfyn-ez-dfyn": 1.2111101450583592,
"dfyn-ice-dfyn": 0.018476948120126596,
"dfyn-link-dfyn": 2.9022591755777802,
"dfyn-luna-dfyn": 5.457122963347522,
"dfyn-matic-dfyn": 1.1240321040064805,
"dfyn-route-dfyn": 1.437948598571104,
"dfyn-route-eth": 247.2976109950302,
"dfyn-sx-dfyn": 0.47670959649830214,
"dfyn-uft-dfyn": 0.5648839637798944,
"dfyn-uni-dfyn": 2.322868103471886,
"dibs-dibs-bnb": 105.89346792026369,
"dibs-dshare-bnb": 820.337348337087,
"dinoswap-dfyn-eth-dfyn": 50.73423044425909,
"dinoswap-dfyn-route-eth": 247.2976109950302,
"dinoswap-dino-eth": 24.82180499864813,
"dinoswapv2-dino-eth": 23.50255180062967,
"dinoswapv2-dino-usdc": 422392.6323222928,
"dopple-dolly-dop": 0.40706643916275265,
"dopple-dop-bnb": 10.287836581939139,
"dopple-dop-busd": 0.6034381740530774,
"dumpling-sdump-bnb": 1.13991842537298,
"dumpling-sdump-busd": 0.055873090118173395,
"elk-elk-bnb": 100.18390023490628,
"elk-elk-dai": 3.804011681498242,
"ellipsis-eps-bnb": 22.56728605233636,
"ester-est-ftm": 0.2819751666211578,
"farmhero-pancake-hero-busd": 0.11047101363434866,
"farmhero-pancake-hero-wbnb": 2.2486499523071446,
"farmhero-quick-usdc-honor": 71376.4899787694,
"farmhero-wault-usdc-honor": 60324.09956597589,
"finn-dot-finn": 40337.31752688323,
"finn-eth-finn": 77.25433119517027,
"finn-eth-wmovr": 1145.2906589755353,
"finn-finn-avax": 8.449142783718402,
"finn-finn-bnb": 18.354932196782432,
"finn-finn-doge": 15909.265110914137,
"finn-finn-ftm": 1.2929537003754983,
"finn-wan-finn": 0.7016933190005329,
"finn-wan-wmovr": 14.263771789392276,
"finn-wmovr-finn": 10.61107101891087,
"froyo-froyo-ftm": 0.02121919109327276,
"fruit-fruit-cake": 0.0525660271547769,
"fruit-fruit-xvs": 0.0570185896510235,
"fusefi-fusd-bnb": 40.293693964507554,
"fusefi-wfuse-busd": 1.7498356703617715,
"fusefi-wfuse-fusd": 1.7905324326684806,
"fusefi-wfuse-weth": 85.56913561418186,
"garuda-garuda-bnb": 0.00001925425559567864,
"garuda-garuda-usdc": 2.2281318610941e-7,
"garuda-garuda-usdt": 3.7235284175314e-7,
"geist-geist-ftm": 1.4184761936362453,
"goal-goal-busd": 0.3925695902470698,
"gondola-gdl-avax": 0.5734752837453385,
"gondola-gdl-zero": 0.0035826544982991734,
"grand-grand-bnb": 51.896432624187824,
"hfi-hfi-ht": 0.13667455089336356,
"hfi-hfi-husd": 4329.770952170212,
"honeyfarm-bear-bnb": 79.38078819820568,
"honeyfarm-bear-busd": 2.5669090553053695,
"honeyfarm-honey-bnb": 107.10589547485326,
"honeyfarm-honey-busd": 5.248514880859878,
"honeyfarm-moon-bnb": 37.967565935973845,
"honeyfarm-moon-busd": 1.81207478777675,
"hps-hps-bnb": 47.11625051538529,
"ica-ica-btcb": 165.7502926817024,
"ica-ica-busd": 0.11044083770186816,
"ica-ica-eth": 44.471903740067724,
"ica-zbtc-busd": 1.5087791136373454,
"ica-zeth-busd": 1.6066370109334722,
"iron-dada-ada": 2.2018440462518347,
"iron-dbnb-bnb": 53.66791342443615,
"iron-dbtc-btcb": 4327.77091768345,
"iron-ddot-dot": 24.320027519019074,
"iron-deth-eth": 832.109684975035,
"iron-dnd-bnb": 1.066417504089281,
"iron-iron-busd": 2.0324167643834343,
"iron-steel-bnb": 4.3012652536553215,
"iron-steel-iron": 0.14419871542317822,
"iron-titan-iron": 0.001418668346308703,
"iron-titan-matic": 0.003999467098379821,
"ironswap-ice-eth": 3.1697404100272233,
"ironswap-ice-iron": 0.052593512178841686,
"ironswap-ice-usdc": 66332.50888005654,
"jetfuel-bhc-bnb": 324.8328506574431,
"jetfuel-busd-bnb": 71.80840194331988,
"jetfuel-cake-bnb": 144.08301308069966,
"jetfuel-eth-bnb": 2679.465341013878,
"jetfuel-fts-bnb": 13.592816171868169,
"jetfuel-fuel-bnb-pcs": 321.32270258514666,
"jetfuel-fuel-bnb-ss": 308.6811570129024,
"jetfuel-link-bnb": 184.28001864438428,
"jetfuel-uni-bnb": 149.62482751918887,
"jetfuel-usdt-bnb": 108.55197437045857,
"jetfuel-vapor-bnb": 30492.604609975915,
"jetswap-btcb-bnb": 8910.20045077423,
"jetswap-busd-bnb": 46.3661536646346,
"jetswap-fantom-fwings-ftm": 0.31036997472898764,
"jetswap-fantom-fwings-usdc": 215692.92312036993,
"jetswap-fts-bnb": 13.545376591078265,
"jetswap-fuel-bnb": 278.6056672657063,
"jetswap-poly-pwings-matic": 0.20246976885511325,
"jetswap-poly-pwings-usdc": 167296.5595189344,
"jetswap-poly-pwings-usdt": 158216.7597311557,
"jetswap-usdc-busd": 2.0074135097082855,
"jetswap-wings-bnb": 6.5276757325196,
"jetswap-wings-busd": 0.30400377653822,
"joe-awool-wavax": 6131.278889265796,
"joe-bnb-wavax": 415.4941654042368,
"joe-cra-wavax": 35.75016256310021,
"joe-craft-wavax": 17.076047777175745,
"joe-frax-wavax": 20.321849755083463,
"joe-gohm-wavax": 1547.1093403947837,
"joe-husky-wavax": 0.006387205501446444,
"joe-joe-wavax": 25.751488242060958,
"joe-klo-wavax": 12.105267686354866,
"joe-link.e-wavax": 82.2709214535908,
"joe-lyd-wavax": 1.7863286615450602,
"joe-mai-wavax": 19.369189579591964,
"joe-mai-wavax-v2": 19.794001452290054,
"joe-mead-wavax": 13345.17596480143,
"joe-melt-wavax": 37.90966590951369,
"joe-mim-wavax": 25.38474326904999,
"joe-png-joe": 1.5075620465725799,
"joe-png-wavax": 13.3314755099538,
"joe-ptp-wavax": 42.53225778146274,
"joe-qi-wavax": 6.672114095958882,
"joe-sherpa-wavax": 11.261819355906361,
"joe-shibx-wavax": 0.5191770819181344,
"joe-spore-wavax": 14.60197793671566,
"joe-syn-wavax": 36.806182244332796,
"joe-teddy-wavax": 3.5803695691695663,
"joe-tsd-avax": 21.60396553194033,
"joe-vso-wavax": 4.174528404659455,
"joe-wavax-aave.e": 257.8571298424202,
"joe-wavax-bifi": 1001.7109640918056,
"joe-wavax-boo": 95.5297944041253,
"joe-wavax-cly": 24.19985237559131,
"joe-wavax-dai.e": 23.073634911661987,
"joe-wavax-elk": 41.12565804515648,
"joe-wavax-pefi": 13.130397298441707,
"joe-wavax-snob": 11.013605177492487,
"joe-wavax-spell": 1.7628941866182675,
"joe-wavax-xava": 56.69067284475077,
"joe-wet-wavax": 29.902769289117717,
"joe-weth.e-wavax": 1162.2135741148102,
"joe-yak-wavax": 1077.645546135653,
"jul-bifi-bnb": 2426.0292045308815,
"jul-btcb-bnb": 9286.397302392394,
"jul-dot-bnb": 195.3782924473141,
"jul-juld-bnb": 12.486902516232849,
"jul-juld-busd": 0.41596908193857185,
"jul-twt-bnb": 37.99071636627799,
"jul-xvs-bnb": 151.0300703407877,
"kebab-bifi-busd": 124.07475013127106,
"kebab-eth-btcb": 24137.021816399658,
"kebab-kebab-bnb": 4.7835112590515925,
"kebab-kebab-btc": 44.39752754251657,
"kebab-kebab-busd": 0.234938868910053,
"kebab-usdt-busd": 2.174635468340189,
"kingdefi-krown-bnb": 0.4271818803901883,
"krill-krill-usdc": 274226.6829744627,
"lava-lava-usdt": 0.19438444456009596,
"lava-lava-wht": 0.5584227396315976,
"lendhub-lhb-usdt": 0.12288591242638654,
"lendhub-lhb-wht": 0.3990778592433373,
"liq-liq-cro": 1.1040392552727754,
"long-long-wbnb": 1.9941592139488393,
"lyd-lyd-avax": 1.9705451540849597,
"lyd-lyd-usdt": 181934.87418705362,
"mai-qi-matic": 8.953073104927611,
"mai-qi-mimatic": 2.328301244969143,
"mai-qi-wavax": 20.432381131726128,
"mash-mash-bnb": 2.1017584499152284,
"mash-mash-busd": 0.09837733616965183,
"mdex-aave-usdt": 26.462186624386888,
"mdex-bal-usdt": 7.929457469499673,
"mdex-bifi-usdt": 102.26712182644866,
"mdex-bsc-bifi-usdt": 103.18731103058747,
"mdex-bsc-bnb-usdt": 42.20124739967027,
"mdex-bsc-btc-usdt": 424.57811887704764,
"mdex-bsc-busd-bnb": 42.19271351338439,
"mdex-bsc-eth-btc": 23495.999389199384,
"mdex-bsc-eth-usdt": 114.18544952167294,
"mdex-bsc-fil-usdt": 9.59687970852768,
"mdex-bsc-mdx-bnb": 21.336168062890767,
"mdex-bsc-mdx-busd": 1.0314140111090655,
"mdex-bsc-usdt-busd": 2.014330490628394,
"mdex-bsc-usdt-usdc": 2.012038429077595,
"mdex-eth-usdt": 112.80074502726221,
"mdex-eth-wht": 358.8439710508286,
"mdex-hbch-usdt": 37.504303395283515,
"mdex-hbtc-usdt": 423.27169852487947,
"mdex-hbtc-wht": 1383.8296231758989,
"mdex-hdot-usdt": 9.199821036149212,
"mdex-hfil-usdt": 9.82471088377532,
"mdex-hltc-usdt": 23.158443603411612,
"mdex-hpt-usdt": 0.0940302558302745,
"mdex-husd-usdt": 209048.75707528964,
"mdex-lac-busd": 0.7730366252641385,
"mdex-lhb-usdt": 0.12288591242638654,
"mdex-link-usdt": 8.562404919892137,
"mdex-mdx-usdt": 1.062655762223178,
"mdex-mdx-wht": 3.2372507132975934,
"mdex-rabbit-busd": 0.24566521317367296,
"mdex-shib-usdt": 0.01123812578597324,
"mdex-snx-usdt": 4.516080342138201,
"mdex-uni-usdt": 6.860398337096216,
"mdex-usdt-btcb": 424.57811887704764,
"mdex-wht-usdt": 6.524244894478679,
"mdex-yfi-usdt": 314.6435181110339,
"memefarm-ape-bnb": 6.886602478353174,
"memefarm-mfrm-bnb": 3.9918681428670983,
"memefarmv2-ape-bnb": 7.454683207618358,
"memefarmv2-mfrm-bnb": 3.9771982290326076,
"merlin-merl-bnb": 5.5513083289620635,
"monster-msc-bnb": 8.280657331807076,
"monster-msc-busd": 0.40485951259213626,
"monster-mss-busd": 2.6171692906429826,
"narwhal-gold-bnb": 11.076171789101537,
"netswap-bnb-nett": 86.8679030631051,
"netswap-nett-metis": 53.34101663170142,
"netswap-weth-metis": 1359.3030999163236,
"netswap-weth-nett": 242.11045237164117,
"nyacash-nyas-usdt": 0.09476194812461251,
"olive-olive-avax": 1.492278956785808,
"olive-olive-usdt": 154779.9703500498,
"omnifarm-fet-usdo": 1.2210483542575183,
"omnifarm-ocp-usdo": 0.2655022194381607,
"omnifarm-usdo-anymtlx": 1.701514186163292,
"omnifarm-usdo-bdp": 0.5842780819396901,
"omnifarm-usdo-busd": 2.173406739736447,
"omnifarm-usdo-busd-ot": 1.0223406341808772,
"omnifarm-usdo-popen": 0.540548472325458,
"omnifarm-usdo-wbnb": 47.15758282744855,
"ooe-ooe-bnb": 16.882086389823904,
"ooe-ooe-busd": 0.8080188359881264,
"pacoca-pacoca-bnb": 11.519938523391847,
"palm-palm-bnb": 1.1976374968955064,
"palm-palm-busd": 0.05858763184152111,
"pangolin-aave.e-wavax": 267.118970147689,
"pangolin-link.e-wavax": 85.51609642779866,
"pangolin-png-qi": 0.4148200609195196,
"pangolin-sushi.e-wavax": 45.159059138999716,
"pangolin-uni.e-wavax": 64.79570519573716,
"pangolin-wavax-dai.e": 23.566762619655496,
"pangolin-wavax-xava": 55.515153415866216,
"pangolin-weth.e-png": 74.70363775705803,
"pangolin-weth.e-wavax": 1166.115586921457,
"pangolin-yfi.e-wavax": 3184.4175444182833,
"panther-panther-bnb": 3.1954795494401225,
"panther-panther-busd": 0.1624512339654004,
"pearzap-fpear-ftm": 0.06044440679288392,
"pearzap-fpear-usdc": 41646.18128586278,
"pearzap-pear-bnb": 0.8649860748211988,
"pearzap-pear-busd": 0.04175635141847805,
"pearzap-pear-matic": 0.10589580694279159,
"pearzap-pear-usdc": 81641.87375093301,
"pera-pera-bnb": 7.335541519789439,
"png-apein-wavax": 50.83148100018236,
"png-bifi-avax": 989.6075272197506,
"png-bifi-png": 65.07010335310781,
"png-bnb-avax": 536.6250398935205,
"png-bnb-png": 26.66915017520052,
"png-dai-png": 1.4288748550352723,
"png-dyp-wavax": 9.997976700232973,
"png-eth-avax": 1403.4323819783315,
"png-eth-png": 94.3559944496165,
"png-husky-wavax": 0.007179045239506219,
"png-jewel-wavax": 55.55003139881249,
"png-klo-wavax": 11.782805669488397,
"png-link-avax": 97.36063317038465,
"png-link-png": 6.541899863505887,
"png-link.e-wavax": 85.45364587530763,
"png-mim-wavax": 20.237271088957954,
"png-png-avax": 13.737916476216878,
"png-png-wavax": 13.727883973450107,
"png-roco-wavax": 22.383472337529636,
"png-sushi-avax": 54.69587349543412,
"png-sushi-png": 3.6090697250250976,
"png-teddy-wavax": 3.649859111732406,
"png-tusd-wavax": 19.935661048466315,
"png-uni-avax": 76.89869485093121,
"png-uni-png": 5.143147840077265,
"png-walbt-wavax": 11.290219789865102,
"png-wavax-dai.e": 23.551082200818335,
"png-wavax-frax": 19.461395109083963,
"png-wavax-spell": 1.6237102094684555,
"png-wavax-xava": 55.418755978327106,
"png-weth.e-wavax": 1165.263997972549,
"polyalpha-alpha-matic": 2.4708800680471215,
"polycat-dfyn-fish-matic": 1.96560349879117,
"polycat-quick-fish-matic": 2.3879881508572427,
"polycat-sushi-fish-matic": 2.05797118644703,
"polygonfarm-spade-matic": 0.5914599026058275,
"polypup-ball-wmatic-ball": 1.876609975835741,
"polypup-weth-pup-eol": 237.7179653302568,
"polypup-wmatic-bone": 2.0437518718103846,
"polypup-wmatic-pup": 6.156676139908101,
"polyquity-pyq-usdc": 105047.16513111819,
"polysage-wmatic-sage": 2.6281946320533573,
"polywise-wmatic-wise": 1.8494094641006025,
"polyyeld-ape-wmatic-yeld": 0.00005662486415565254,
"polyyeld-quick-usdc-yeld": 71.08174160910316,
"polyyeld-quick-wmatic-yeld": 0.00010233831846220749,
"polyyeld-sushi-wmatic-yeld": 0.00010453727228391906,
"polyyeld-xyeld-quick-wmatic-xyeld": 2.2154668155197332,
"polyyeld-xyeld-quick-wmatic-yeld": 0.00010233831846220749,
"popsicle-ice-bnb": 93.93559015210336,
"popsicle-ice-ftm": 6.228796763979497,
"pumpy-pmp-bnb": 12.448143223330755,
"pzap-pzap-matic": 0.2121264352692516,
"pzap-pzap-usdc": 156578.5642367181,
"quick-aave-eth": 1537.7563257974514,
"quick-any-quick": 145.40793326072495,
"quick-bifi-eth": 6651.664417624426,
"quick-bifi-quick": 1566.7060740571635,
"quick-cc10-eth": 0.5983550288144293,
"quick-cc10-quick": 0.14493739968647631,
"quick-dai-eth": 143.46977480189068,
"quick-dai-mai": 2.039916873282159,
"quick-defi5-eth": 55.528064244069355,
"quick-defi5-quick": 14.554732510888062,
"quick-degen-eth": 202.9600577700182,
"quick-degen-quick": 52.93672123205762,
"quick-dpi-eth": 1633.1077689484441,
"quick-eth-fff": 263.5771566350061,
"quick-eth-matic": 200.71759330410399,
"quick-eth-ramp": 39.85722604713704,
"quick-fff-quick": 68.4434414592568,
"quick-frax-quick": 33.72036386749175,
"quick-ftm-matic": 4.107889110796721,
"quick-gns-dai": 3.787927071712732,
"quick-guard-usdc": 354616.07115921366,
"quick-hbar[0x]-mimatic": 102587.12849304764,
"quick-kiro-matic": 1.2199178688285555,
"quick-link-eth": 486.2717545013045,
"quick-link-quick": 131.26663959562364,
"quick-mai-matic": 3.6280469141120273,
"quick-matic-mana": 7.798735228148953,
"quick-matic-wcro": 1.9377720915045482,
"quick-mimatic-clam": 119302.54987055215,
"quick-mocean-matic": 2.1590771644630165,
"quick-nexo-eth": 168.17236883397945,
"quick-pbnb-quick": 821.7562289069142,
"quick-polybunny-eth": 33.02572967641856,
"quick-polybunny-quick": 8.52081739239129,
"quick-pool-weth": 191.12497090845864,
"quick-psp-matic": 1.089028033704303,
"quick-qi-eth": 175.37280235388735,
"quick-qi-quick": 39.438353486013334,
"quick-quick-erowan": 9.164583775575387,
"quick-quick-eth": 2451.2388187426045,
"quick-quick-matic": 56.45576297279514,
"quick-quick-polydoge": 0.09414222529451757,
"quick-quick-uni": 108.03125789678901,
"quick-quick-woo": 23.54833676843554,
"quick-quick-yamp": 0.8548887048931877,
"quick-shib-matic": 0.01802917520083002,
"quick-sol-matic": 30.44456662322648,
"quick-start-quick": 68.80315571054653,
"quick-titan-eth": 0.1707911566578684,
"quick-tomb-mimatic": 2.849750585318517,
"quick-uni-eth": 441.30276699543174,
"quick-vision-eth": 140.38372974498964,
"quick-watch-quick": 10.818419473303928,
"quick-wise-eth": 63.717602336907625,
"quick-wmatic-avax": 28.043747094182642,
"quick-wmatic-ht": 8.168899308898391,
"quick-woo-eth": 91.5299366494186,
"quick-yamp-usdc": 59315.626944898926,
"rabbit-carrot-busd": 0.08719077299415501,
"ramen-ramen-bnb": 4.369810453844524,
"ramen-ramen-busd": 0.20222767200857303,
"salt-salt-bnb": 2.424229480462116,
"salt-salt-busd": 0.11836128950822197,
"sandman-delirium-matic": 0.2501307761306624,
"sandman-delirium-usdc": 182175.34385937869,
"satis-sat-bnb": 98.2314785904179,
"satis-sat-busd": 5.414381425530873,
"satis-xsat-bnb": 4.810087022242963,
"satis-xsat-busd": 0.23146369760951352,
"sing-ftm-usdc-sing": 269424.3849807914,
"sing-sing-busd": 0.5520252650453078,
"sing-usdt.e-sing": 382390.24105738144,
"slime-slime-bnb": 8.456133486824015,
"slime-slime-busd": 0.40267562077755,
"snob-snob-avax": 11.696458005585066,
"solarbeam-avax-wmovr": 195.93061945818357,
"solarbeam-bnb-busd": 42.568316010677705,
"solarbeam-bnb-wmovr": 424.17966233851956,
"solarbeam-eth-wmovr": 1239.1339171129891,
"solarbeam-frax-wmovr": 21.31439052008849,
"solarbeam-frax-wmovr-2": 23.65952654478994,
"solarbeam-matic-wmovr": 27.455716693705696,
"solarbeam-pets-wmovr": 5.789234287719104,
"solarbeam-solar-rib": 40.15753220600658,
"solarbeam-solar-wmovr": 18.826223210198453,
"solarbeam-wmovr-ftm": 29.5514976308872,
"solarbeam-wmovr-mai": 20.134577820789147,
"solarbeam-wmovr-relay": 23.007623144440405,
"solarbeam-wmovr-rib": 450.77893791915085,
"soup-soup-bnb": 69.79729637736672,
"soup-soups-bnb": 16.61601260918011,
"space-space-bnb": 0.46340329345094033,
"space-space-busd": 0.021986096205514765,
"spartacadabra-charm-usdc": 25392.604356506516,
"spirit-any-ftm": 14.234736943606533,
"spirit-crv-ftm": 5.6100133215775125,
"spirit-ftm-beets": 3.8322371873155863,
"spirit-ftm-dai": 5.965215312039743,
"spirit-ftm-eth": 188.51874613550635,
"spirit-ftm-frax": 3.1058608130658896,
"spirit-ftm-gohm": 228.80927437749074,
"spirit-ftm-ice": 6.025285433718734,
"spirit-ftm-jewel": 8.275800114781148,
"spirit-ftm-just": 1279.6259230442677,
"spirit-ftm-mai": 2.9714603897162912,
"spirit-ftm-mim": 3.5251046332836324,
"spirit-ftm-multi": 12.978176907778026,
"spirit-ftm-spell": 0.27417091797706555,
"spirit-ftm-spirit": 1.1833269415113739,
"spirit-ftm-sushi": 6.466992364497164,
"spirit-ftm-tarot": 2.1649243190881755,
"spirit-ftm-wshec": 38.40723327782655,
"spirit-fusdt-spell": 184582.84957575976,
"spirit-link-ftm": 12.89040352435069,
"spirit-spell-sspell": 0.013605310886374388,
"spirit-spirit-binspirit": 0.25428803589340776,
"spirit-spirit-dai": 0.8438798235924746,
"spirit-wmemo-mim": 372.1330307718186,
"spirit-yfi-ftm": 495.1257503968635,
"sponge-soak-bnb": 1.6598785988154154,
"sponge-steam-bnb": 11.919449059171281,
"squirrel-nuts-bnb": 21.089825253391968,
"stablequant-quant-busd": 0.010563526759551444,
"stakesteak-fusd-usdc": 2.5794017288730706,
"steakhouse-scream-ftm": 22.37110562497816,
"street-alpha-bnb": 27.860820466655483,
"street-bch-bnb": 800.2608759313057,
"street-bhc-bnb": 324.8328506574431,
"street-bifi-bnb": 3132.398082808331,
"street-bliq-bnb": 199.50496483829744,
"street-busd-bnb": 65.01589024342547,
"street-cred-bnb": 175.4595324319924,
"street-dai-bnb": 44.68692365944984,
"street-drugs-bnb": 6.640900906355204,
"street-guns-bnb": 3.6322174897597455,
"street-jgn-bnb": 22.443458226527987,
"street-nar-bnb": 46.243741525445984,
"street-panacakelp-thugs-bnb": 611.4620532121976,
"street-sxp-bnb": 52.370137254146094,
"street-thugs-bnb": 200.76071934811273,
"street-twt-bnb": 33.79857597350836,
"street-xvs-bnb": 148.45467643108523,
"summit-summit-ftm": 3.5484968691220358,
"sushi-aave-eth": 1502.7208046159012,
"sushi-arb-magic-weth": 280.9290217528748,
"sushi-arb-spell-weth": 9.13489898300362,
"sushi-arb-sushi-eth": 241.92507933439927,
"sushi-arb-weth-bifi": 5739.216208009657,
"sushi-arb-weth-gohm": 8821.377138118942,
"sushi-arb-weth-link": 473.6842596426449,
"sushi-arb-weth-mim": 115.54918513871525,
"sushi-avax-weth": 1149.8802806213853,
"sushi-axs-eth": 913.3596556801165,
"sushi-celo-bifi-weth": 181.48569867516053,
"sushi-celo-celo-mobi": 0.4784725564091238,
"sushi-celo-celo-weth": 203.66651971843078,
"sushi-celo-ceur-weth": 121.08451513102013,
"sushi-celo-csushi-celo": 7.521713743433071,
"sushi-celo-cusd-ceur": 2.149277410148881,
"sushi-celo-cusd-ceurv2": 2.149277410148881,
"sushi-celo-cusd-dai": 2.0411285873526417,
"sushi-celo-cusd-daiv2": 2.0414667197872,
"sushi-celo-cusd-weth": 116.21031587364897,
"sushi-celo-dai-weth": 136.9600758328674,
"sushi-celo-weth-daiv2": 111.85069226996679,
"sushi-celo-wethv2-celo": 197.83431239646032,
"sushi-celo-wethv2-cusd": 113.1080604267286,
"sushi-crv-eth": 196.61914360837085,
"sushi-dtop-weth": 107.70644325269083,
"sushi-eth-dai": 113.04378156511456,
"sushi-eth-gohm": 8765.749768026106,
"sushi-eth-iron": 122.4108896951441,
"sushi-eth-wfil": 572.2060962480135,
"sushi-eth2x-eth": 724.2354922893313,
"sushi-fox-eth": 65.70799036053282,
"sushi-frax-fxs": 11.130652105690368,
"sushi-fxs-frax": 10.415668559754142,
"sushi-grt-eth": 83.96748160892615,
"sushi-jrt-eth": 25.064634738719786,
"sushi-link-eth": 477.065763404498,
"sushi-matic-eth": 171.9930173111441,
"sushi-mr-bifi-wmovr": 1017.4417017982306,
"sushi-mr-eth-bnb": 258.49255678094846,
"sushi-mr-eth-dai": 112.90320852547343,
"sushi-mr-eth-wmovr": 1168.86734485681,
"sushi-mr-mim-wmovr": 20.468919532048805,
"sushi-mr-msushi-wmovr": 45.99640476309092,
"sushi-one-1axs-1eth": 881.6408047467266,
"sushi-one-1eth-1aave": 1461.6553336469315,
"sushi-one-1eth-1dai": 124.59759379161737,
"sushi-one-1eth-1frax": 116.04208648927627,
"sushi-one-1ygg-1eth": 213.0909362568816,
"sushi-one-bifi-wone": 45.65117817407663,
"sushi-one-bscbusd-busd": 2.0657205561998855,
"sushi-one-busd-one": 1.1105624783146324,
"sushi-one-eth-one": 54.641399377535556,
"sushi-one-sushi-one": 2.027749556243998,
"sushi-one-ust-1eth": 126.09292158870542,
"sushi-one-ust-wone": 0.9824808679132436,
"sushi-snx-eth": 262.3679162578358,
"sushi-wmatic-ghst": 4.524476761102909,
"sushi-wmatic-woofy": 424.0569753933825,
"swamp-pswamp-matic": 0.2837460888255339,
"swamp-swamp-bnb": 14.470573895073898,
"swamp-swamp-busd": 0.6539768464065839,
"swampv2-swamp-bnb": 13.65140644106449,
"swampv2-swamp-busd": 0.6514101629460394,
"swirl-swirl-bnb": 11.112237195935517,
"tenfi-tenfi-bnb": 9.131675383885723,
"tenfi-tenfi-busd": 0.4369119996609905,
"tethys-avax-metis": 227.11846058019879,
"tethys-tethys-metis": 39.713022572659966,
"tethys-weth-metis": 1360.9169894548,
"tetu-matic-tetu": 0.4329384053945155,
"tetu-tetu-usdc": 313326.04428088205,
"tndr-tndr-bnb": 2.865706898162333,
"tndr-tndr-busd": 0.14473308511418737,
"tofy-tofy-bnb": 0.0037651702178300933,
"tofy-tofy-mash": 0.00000655928480894352,
"tomb-tomb-ftm": 6.017230771748351,
"tomb-tshare-ftm": 283.15408690102316,
"tosdisbsc-dis-wbnb": 155.62779743149898,
"tosdisftm-dis-wftm": 10.37705169549105,
"trisolaris-aurora-weth": 384.4703448203877,
"trisolaris-near-tri": 0.022236763653212702,
"trisolaris-near-wbtc": 143581.79177252325,
"trisolaris-near-weth": 0.41513515112669125,
"trisolaris-usdc-near": 7344.802576462793,
"trisolaris-usdt-near": 7736.695931738721,
"typh-typh-bnb": 6.539835307855046,
"typhv2-typh-bnb": 6.761310526780783,
"vvs-cro-bifi": 74.92981160737143,
"vvs-cro-dai": 1.4527152943475163,
"vvs-cro-doge": 55029.21470778703,
"vvs-cro-eth": 78.96322272393871,
"vvs-cro-shib": 0.007956236782806214,
"vvs-tonic-cro": 0.0017123337333983782,
"vvs-tonic-usdc": 2420.5824267720463,
"vvs-vvs-cro": 0.009103389007162586,
"vvs-vvs-usdc": 411971.30002184736,
"wex-ada-busd": 2.250917529873739,
"wex-alpaca-bnb": 27.584069410782845,
"wex-bnb-dep": 8.0546672671184,
"wex-bnb-ont": 31.620808835683437,
"wex-eth-beth": 6089.481425674047,
"wex-eth-bnb": 2372.0318819589884,
"wex-krown-bnb": 0.39864263148363005,
"wex-ltc-busd": 23.68183945644836,
"wex-tusd-usdt": 2.007658874796608,
"wex-usdt-alpaca": 1.3277655586366495,
"wex-usdt-matic": 2.8659361154567757,
"wex-usdt-wex": 0.03281911952356068,
"wex-watch-bnb": 15.120051774034142,
"wex-wex-bnb": 0.6766752659538129,
"wex-wex-btcb": 6.476095163373399,
"wex-wusd-busd": 2.0243906238739258,
"wex-wusd-dep": 0.3811410979939132,
"wex-wusd-wex": 0.03125440781417724,
"wex-xrp-busd": 1.9145159319751401,
"wexpoly-aave-eth": 1466.128416704292,
"wexpoly-bifi-matic": 142.1212907291465,
"wexpoly-dai-eth": 115.00972872909996,
"wexpoly-link-eth": 467.505005972149,
"wexpoly-matic-eth": 158.4035484714961,
"wexpoly-polydoge-matic": 0.00046821080230273775,
"wexpoly-snx-eth": 251.9235424046367,
"wexpoly-usdc-wex": 19808.769093765244,
"wexpoly-wbtc-wex": 398077.2833565103,
"wexpoly-wex-matic": 0.02600817311610415,
"wexpoly-wex-usdc": 19808.769093765244,
"wsg-wsg-bnb": 0.00891448111110567,
"yel-yel-wbnb": 7.057808275177785,
"zefi-zefi-bnb": 10.902759202451309,
"zefi-zefi-busd": 0.5306426730944855,
"zefiv2-zefi-bnb": 10.647849837110792,
"zefiv2-zefi-busd": 0.5105310195145051,
"beets-steady-beets-2": 1.003948019537458,
"beets-dante-symphony": 891.6565482475171,
"beets-ode-to-joy": 11705.964905802823,
"beets-wagmi-index": 5.3398259663095065,
"beets-two-became-one": 1.484188966693123,
"beets-variation-theme": 1.0125072131846555,
"beets-battle-bands": 29.521905258150408,
"beets-double-dollar-fugue": 1.0131837757944298,
"beets-solana-sonata": 11.833181582210699,
"beets-phantom-dai-opera": 1.478304292140111,
"beets-baron-von-binance": 24.289624247441505,
"beets-symphony-nr-10": 0.7628137201964197,
"beets-grand-orchestra": 675.3665714557624,
"beets-steady-beets": 1.0133957284003292,
"beets-ftm-sonata": 2.87507289808042,
"beets-e-major": 125.62125826117283,
"beets-b-major": 609.2958236865658,
"beets-classic-trio": 2220.9086644298905,
"beets-dance-of-degens": 2.320952029152304,
"beets-fantom-of-opera": 1.623930682030587,
"beets-ziggy-mim": 1.0391252652841259,
"beets-guqin-qi": 1.0346428545910227,
"beets-magic-touch-daniele": 2.5428035916086373,
"beets-sound-of-moosic": 29.022235695955782,
"beets-fantom-conservatory": 3.0440833648353727,
"beets-guqin-qi-2": 1.016911909456679,
"beets-late-quartet": 134.2064323782551,
"beets-song-ice-fire": 0.5292449568888549,
"beets-tubular-bells": 3.4110849078746575,
"beets-fidelio-duetto": 0.8744857199748347,
"belt-venus-blp": 1.06745,
"belt-4belt": 1.008035,
"belt-beltbnb": 472.914849,
"belt-beltbtc": 44972.720151,
"belt-belteth": 3178.355884,
"ellipsis-usdn": 1.023022,
"ellipsis-pbtc": 44254.478959,
"ellipsis-renbtc": 44298.667576,
"ellipsis-fusdt-3eps": 1.040281,
"ellipsis-3eps": 1.039166,
"snob-3pool": 1.043233,
"froyo-3pool": 1.278043,
"gondola-eth-zeth": 3118.1545,
"gondola-usdt-zusdt": 1.006608,
"gondola-dai-zdai": 1.006201,
"curve-am3crv": 1.0460125169888088,
"curve-poly-ren": 44308.72806790453,
"curve-poly-atricrypto": 1639.9443760411568,
"curve-poly-atricrypto2": 1570.5411246530134,
"curve-poly-atricrypto3": 1582.588618707062,
"curve-poly-eurt": 2.180605342185262,
"curve-ftm-tricrypto": 1563.4724874841495,
"curve-ftm-fusdt": 1.0213646559714988,
"curve-ftm-2pool": 1.0119191168444273,
"curve-ftm-ren": 44296.27790914286,
"curve-ftm-geist": 1.0106522074424997,
"curve-ftm-mim": 1.039505168837048,
"curve-ftm-lambda": 1.0027199264079654,
"curve-arb-tricrypto": 1564.815208156461,
"curve-arb-2pool": 1.0037951189484768,
"curve-arb-ren": 43971.09277227613,
"curve-arb-mim": 1.0037955199838242,
"curve-arb-eurs": 2.14620826040343,
"curve-avax-av3crv": 1.0137146369209242,
"curve-avax-ren": 44395.586309483784,
"curve-avax-atricrypto": 1572.2912708004217,
"curve-avax-mim": 1.0170117191404766,
"curve-avax-mai": 1.0053926820941714,
"curve-harmony-3pool": 1.0030436376589278,
"curve-harmony-tricrypto": 1566.6659939723897,
"dopple-dolly-lp": 1.026604,
"dopple-dop-lp": 1.043704,
"dopple-ust-lp": 1.056245,
"ironswap-3usd": 1.0096804686066785,
"ironswap-iron": 1.0067966542191136,
"alpaca-ibalpaca": 0.404697,
"alpaca-ibbnb": 477.052553,
"alpaca-ibbusd": 1.096804,
"synapse-nusdlp": 1.0021133070734007,
"den": 927.7048911079979,
"qui": 421.4755274609875,
"ses": 493.2352901086355,
"jarvis-2cad": 0.7855090279951055,
"jarvis-2jpy": 0.008027039752648896,
"jarvis-4eur": 1.1394327738056889,
"jarvis-5eur": 1.1316378521924582,
"1inch": 1.76,
"acs": 5.39,
"aced": 0.00008005,
"7up": 0.275195,
"acsi": 2.18,
"8pay": 0.0390334,
"ankr": 0.07855,
"airt": 0.00813424,
"soul": 0.00000862,
"argon": 0.00959906,
"arv": 0.00049821,
"atl": 2.3,
"bagel": 0.00750097,
"wban": 0.01280964,
"beluga": 713.13,
"berry": 0.00132357,
"bev": 76.41294485872247,
"rock": 0.060751,
"pet": 0.04834435,
"bleo": 0.194832,
"bles": 0.03695774,
"bog": 0.880394,
"bnsd": 0.00457566,
"bbag": 0.04062647,
"blink": 0.0079099,
"blue": 0.016056773004724304,
"bpay": 0.000052659491895548096,
"brick": 0.0000136,
"bscs": 0.099168,
"bscv": 0.01155072,
"btcst": 16.64,
"can": 0.01823878,
"cpx": 1.58,
"chs": 0.029717,
"ccake": 0.02385487,
"climb": 0.825853,
"css": 0.247618,
"cook": 0.00400686,
"cmerge": 0.00072879,
"crx": 6.07,
"cub": 0.29331,
"cbix": 0.00148258,
"cgu": 5.5,
"cummies": 0.00804134,
"xcur": 2.59,
"dfy": 0.01950038,
"dfx": 0.2641958771683424,
"doggy": 0.00211362,
"dopx": 0.00000118,
"drivenx": 0.01064412,
"ddim": 11.53,
"ele": 0.03679783,
"gen": 0.329468,
"fmt": 0.087577,
"feed": 0.075448,
"floki": 0.00004167,
"free": 9.75676e-7,
"fren": 7.77583e-7,
"fusii": 0.065296,
"fuse": 0.673704,
"gmt": 0.449479,
"gton": 1.96,
"hokk": 0.00318766,
"hogl": 0.0000013,
"farm": 109.27,
"rupee": 0.00156789,
"alloy": 0.00606427,
"hydro": 0.00954745,
"dara": 0.051832,
"jntr": 0.02811243,
"bwjup": 0.02992075,
"bkangal": 0.00001111,
"kpad": 0.00588454,
"kind": 0.00100104,
"knc": 2.12,
"l1q": 129.06008727151877,
"lime": 0.0003528060153835341,
"lowb": 0.00005535,
"om": 0.098782,
"mdo": 0.116474,
"mdg": 1.011,
"mod": 0.615289,
"key": 154.68,
"mochi": 0.00660959,
"mla": 0.0030574389872498114,
"nmx": 1.8,
"odin": 0.12422,
"oks": 0.00358031,
"oct": 58.24,
"olympus": 7.73876e-7,
"room": 0.059628,
"popium": 0.784295,
"papr": 1.041,
"ori": 0.02610978,
"pasta": 0.00311246,
"propel": 0.00010715,
"pofi": 0.065852,
"pols": 1.77,
"prom": 10.43,
"pvm": 0.781364,
"por": 0.00129679,
"prntr": 0.478566,
"pfy": 0.01366545,
"purse": 0.00114814,
"petn": 0.555824,
"qa": 0.02217859,
"quam": 0.00276895,
"rvl": 0.391292,
"renbtc": 44017,
"rugbust": 0.00685467,
"sfm": 0.00169149,
"safemoon": 0.00000155,
"swap": 0.435602,
"sea": 0.00227834,
"shield": 1.65,
"milk2": 0.222223,
"shake": 1188.27,
"squid": 0.00001094,
"sact": 0.077969,
"sph": 2.45942e-7,
"sparta": 0.163161,
"super": 1.065,
"launch": 0.963819,
"sa": 0.03430391,
"tcub": 5.06111e-7,
"tft": 0.102545,
"tools": 0.077332,
"treat": 3.27,
"uncx": 455.41,
"tsuga": 0.00013737,
"ubu": 0.01240982,
"tff": 0.00038292,
"vidt": 0.50724,
"vbswap": 46.44,
"wault": 3.31,
"warden": 0.237508,
"viking": 0.00320253,
"whirl": 0.00010072,
"xbn": 0.223652,
"wow": 7.16,
"xysl": 15.85,
"yetu": 0.00110207,
"ysl": 4.18,
"xwin": 1.42,
"syl": 0.00185303,
"ass": 4.6861678951865725e-7,
"mdg2": 0.02049097810073707,
"bcash": 0.19969046799333043,
"bac": 426749.385899744,
"gvvalue-b": 0.0020336347133843233,
"acom": 378.9006301657923,
"sil": 0.0001449736677470152,
"mda": 0.5030412973046373,
"basv2": 5.54991331951935e-10,
"mee": 76.01138187020965,
"mes": 14.845543703882639,
"vbond-b": 0.9830875119869424,
"mdg3": 0.06152497374699984,
"rsd": 0.0011395435879289497,
"mdg4": 0.20308033923308833,
"mdg5": 0.0768473095778371,
"pug": 0.0000031396429191076858,
"baus": 58.02314585951553,
"bags": 0.9113472541043207,
"maid": 0.000003864117427241016,
"meb": 660.9364657906762,
"santa": 0.000006557530608585145,
"snbl": 0.16978734597287973,
"nvt": 0.03232737196314562,
"mdg6": 0.09099794483227992,
"mgoro": 0.00001641855957055618,
"green": 0.0053784355010781885,
"superfarm": 0.9908450531936673,
"getb": 6.279334069716124,
"bmixs": 0.0009607877012626933,
"arto": 0.002072884944012598,
"moondog": 1.9295649257671081,
"bsd": 0.007572187488961849,
"profitcoin": 1.2467109159780279,
"vdollar": 0.985632189180211,
"renzec": 79.12418593169569,
"pkgb": 0.00015619296173850607,
"bgov": 0.006310179217540826,
"omnic": 0.2,
"hdln": 0.00015894978499657474,
"getc": 10.568835616438356,
"defif": 107.0924692352587,
"fwd": 0.00039444933663562346,
"fxt": 0.029573660749052842,
"bzh": 0.00011722274730909659,
"mds": 3.4772614225394256,
"cakemax": 13.46162085698415,
"bswap": 76.26496472572478,
"bmb": 1.165170330907739,
"aat": 0.013801456496742047,
"cent": 0.0000014022759223265708,
"bdex": 0.06266219094339967,
"yolo": 0.002045332834366753,
"burbot": 0.010331449024179217,
"neww": 0.30008250317542695,
"mer": 3903.7144526248417,
"blzd": 1.2773495754209712,
"water": 0.35583806820346414,
"panda": 1.783162015355217e-8,
"bbdo": 1.6543228030310242,
"siron": 4.430840163628462,
"alcapa": 1,
"qusd": 0.46246741211110565,
"jay": 0.08739142348242658,
"koin": 0.00024386360077787046,
"xes": 0.22660903193444176,
"piggy": 1.356250242687673e-7,
"ega": 0.0000065726629801330305,
"safesun": 0.6470641353129739,
"raca": 0.000017707216948578895,
"tokau": 2.2719878500309614e-8,
"ginu": 0.00001012959976140992,
"bahb": 0.0006329795022968431,
"bark": 0.0003535202711837183,
"tct": 0.02269942478857406,
"d100": 0.015043104746841313,
"car": 736.7443208172491,
"soccer": 937.1330769415313,
"poker": 846.5788708663762,
"maka": 1.787659475194726e-9,
"dra3": 0.05327050006624669,
"zgoat": 0.00020205378147401717,
"diesel": 0.019583198713042486,
"erc20": 0.03457269301829893,
"aeth": 2774.127691415201,
"dra2": 2.174215098698141e-8,
"weapon": 0.01133138792876509,
"xditto": 0.15479286356535568,
"peak": 0.09510164154434325,
"tcore": 65.82641498504091,
"gfx": 0.9444130117438025,
"gfc": 0.004300016595731149,
"bgoat": 1.456902096457813e-8,
"koala": 0.0030660140059058497,
"so": 1.1358081997127253e-7,
"paka": 9.50446282917317e-10,
"shik": 6.974535964095202e-9,
"pstart": 0.012134988460277864,
"dra4": 0.00015520669678259944,
"gax": 0.002168332428520571,
"jerry": 0.003415228446145417,
"parrot": 0.00022157964015347522,
"shih": 0.000009145427321314006,
"lev": 1.2592610195294016e-7,
"bsc": 0.029055397994423707,
"bk": 0.47823511197091545,
"sko": 6.655974994370375e-9,
"eusd": 0.00019403971254932525,
"yfbk": 0.000024342740491932144,
"catty": 3.3143209035797243e-9,
"ffa": 0.000021736996588848656,
"bcaps": 0.002067626573021706,
"artdeco": 0.000951231267022071,
"pada": 7.771082742949896e-10,
"gwusdn": 1.0159705558908134,
"zseed": 0.010680970773713421,
"ears": 0.033329362992783475,
"renbch": 295.8124278871589,
"mkr": 2047.0905838981855,
"pax": 0.9996045974037943,
"bcha": 30.656869021769108,
"elf": 1.2520600953025114,
"fries": 0.83421999441444,
"stm": 0.0018572894666864543,
"spore": 0.03655830871939754,
"kp3rb": 0.4289481127485163,
"pho": 0.03352224517650472,
"crp": 0.0002925694055304755,
"bidr": 0.00006842564672173653,
"df": 0.10191457077482154,
"dos": 0.011911444262158382,
"innbc": 6.573847635275392e-7,
"julb": 0.14922196434033042,
"ethb": 4284.1351755731375,
"niu": 0.00011058689924766327,
"flo": 0.005553189638377366,
"utl": 0.00006507483973180011,
"meowth": 0.0040036571038989405,
"bsrk": 0.0016559915368726359,
"dango": 0.8493686399137529,
"borshch": 0.000014681713026030211,
"nana": 0.00016258748034054258,
"br34p": 297.65419298121805,
"taco": 0.0016355937869121809,
"yvs": 0.13294373836311632,
"bday": 0.000595490160172879,
"gst": 0.003859382295625938,
"operand": 0.2710583988272598,
"smoke": 0.002274488740342638,
"matter": 0.1948046851725703,
"pnl": 0.00007023214189895178,
"tinfoil": 0.015551690432086948,
"zd": 891.8214891254253,
"ypanda": 0.0012290179465372713,
"fat": 0.0015911043617250352,
"jigg": 0.0003585432347133489,
"safestar": 3.955802143123104e-9,
"mtf": 0.0002530799629206301,
"bboo": 0.005423905233800729,
"pin": 0.0006980384121183797,
"tao": 0.02427611155328247,
"gfce": 2.341656843147832,
"slme": 0.0297036797770334,
"sail": 0.0003933564959762503,
"polar": 5.463563707631787,
"salpaca": 0.3280379429815101,
"mndao": 4.764396679133318e-10,
"tit": 0.0000646489558709656,
"dog": 0.0000238199177759683,
"unicorn": 0.0048986484782900545,
"torj": 0.0024461852390533696,
"crptp": 0.01061382284372796,
"unfi_1": 0.0003902591344516693,
"mntn": 0.005736897984972639,
"mgb": 0.13083781957031473,
"xspace": 5.782392431807322e-10,
"ctf": 6.370889817275102,
"nftl": 0.03899121063992409,
"anyeth": 3094.162495263284,
"anybtc": 44388.223867142835,
"safegalaxy": 1.2289723249677266e-9,
"mrat": 2.8711657129077667e-9,
"safemars": 3.425048730053819e-8,
"safep": 0.0000027410713439132657,
"fsafe": 1.4459119768440298e-9,
"safebtc": 3.6257893980127933e-9,
"pig": 6.50893635815531e-8,
"neon": 0.0009077350118597376,
"ecp": 3.4808729960890577e-9,
"moontoken": 5.379272279490266e-9,
"elongate": 3.578038346540592e-8,
"pdo": 0.07276962805060887,
"octa": 4.263972876542323e-9,
"pika": 0.0001593687739442268,
"lptp": 0.004136610315758983,
"brrl": 0.00003142256996099023,
"wenmoon": 1.4692925686922532e-7,
"moonmoon": 7.177447343254003e-10,
"vgd": 0.00009915562576552732,
"spool": 0.002053917406156256,
"bnbtc": 0.030240526701538883,
"safespace": 1.283829393921477e-9,
"moonstar": 1.5970761301362943e-9,
"lunar": 1.6089280084281995e-10,
"nftart": 4.166504348491908e-10,
"smdx": 0.000010190091842319805,
"bingus": 2.0466677278071755e-8,
"tree": 2.164008547337252,
"lot": 0.12842424812543046,
"poodl": 4.025458452370968e-8,
"koda": 0.000012766920436941652,
"tbc": 0.0002300394373047726,
"kaiinu": 1.295570065588102e-10,
"fast": 1.994858645454041,
"porn": 1.9291472712373087e-10,
"osm": 1.5029382190445542e-10,
"mtdr": 4.467742057284116e-9,
"x2p": 6.162624629038761e-10,
"chips": 0.008714303699889693,
"moonrise": 4.968222536610774e-10,
"gnt": 3.1377318580267744e-9,
"safuyield": 8.232635915599834e-9,
"vault": 9.583919212345579e-9,
"ethvault": 3.49351620183421e-9,
"alvn": 3.1982252565946195e-10,
"okboomer": 5.422186014510471e-10,
"sushiba": 5.492349237047159e-10,
"pit": 9.849351822751306e-10,
"$rfg": 3.9064053624075216e-10,
"ccclo": 0.0048820211911512175,
"kty": 5.024736026101224e-8,
"ibnb": 437.21437585395023,
"ibusd": 1.0161382207278034,
"iusdt": 1.0166783579312637,
"ieth": 3120.1400498735165,
"ibtc": 44157,
"ilink": 16.93731982202541,
"ads": 3.31,
"a.o.t": 0.112296,
"stz": 0.31297,
"aog": 0.220119,
"ani": 0.00911113,
"alu": 0.095829,
"prot": 0.00320276,
"apx": 0.071148,
"jaws": 0.02295172,
"avn": 0.01595298,
"babi": 0.105766,
"tbake": 0.00016024,
"bbq": 0.00254188,
"bcpay": 0.01607577,
"bft": 0.00066313,
"firo": 4.93,
"birb": 0.02256811,
"bpet": 0.00715276,
"bnx": 30.71,
"bcoin": 0.588155,
"bls": 0.04124713,
"gold nugget": 0.02424868,
"bcmc": 0.305548,
"bnbh": 0.00529466,
"blwa": 0.00696261,
"cherry": 0.157016,
"codex": 0.01105386,
"cow": 0.859335,
"corgi": 2.26887e-7,
"crox": 0.115769,
"king": 0.0143779,
"cgar": 0.00012033,
"cfi": 3.04,
"cbix-p": 0.113278,
"cpan": 0.00000318,
"godz": 0.053657,
"$dg": 387.48,
"dcb": 0.02611943,
"fina": 1.13,
"dek": 0.00336193,
"dusd": 0.760525,
"dsg": 0.0341883,
"fiwa": 0.0030044,
"dmt": 0.00301731,
"dxct": 0.557704,
"dose": 0.097404,
"duel": 0.075689,
"elmon": 0.226778,
"fan": 0.03344916,
"fara": 0.402154,
"frm": 0.110093,
"fins": 0.04056129,
"fsxu": 0.00053093,
"otaku": 0.00293467,
"gala": 0.333387,
"gmee": 0.138841,
"gan": 0.0011703,
"game1": 0.0175502,
"gat": 3.97,
"gmr": 0.03803943,
"ginza": 0.224792,
"ghd": 0.00040992,
"genx": 0.130374,
"gummy": 0.00397754,
"gamma": 0.260743,
"ginux": 0.00000167,
"htd": 0.199167,
"hera": 0.081127,
"hifi": 0.00135714,
"hash": 0.01565129,
"ibfr": 0.119803,
"bee": 0.02910711,
"jade": 21.09,
"ihc": 0.00072467,
"info": 0.0025514,
"kai": 0.04410164,
"jdi": 0.0025201,
"kala": 0.0252992,
"lead": 0.00296321,
"lz": 2.34,
"lmn": 0.093953,
"loa": 0.133922,
"xms": 0.061032,
"ari": 0.02126345,
"mnft": 0.0468734,
"meta": 5.26,
"mok": 0.00190104,
"mist": 0.054782,
"mor": 1.002,
"moni": 0.398102,
"moo": 0.16573,
"newb": 41.66,
"myra": 0.360346,
"dpet": 0.47494,
"ore": 0.00380675,
"phx": 0.00854149,
"toon": 0.194736,
"hmdx": 0.226247,
"aqua": 120.23,
"pros": 0.727972,
"rasko": 0.00589386,
"ratoken": 0.0000128,
"rsun": 0.00002764,
"rbs": 0.204917,
"rgold": 2.29,
"zmbe": 0.00585979,
"rocki": 0.151895,
"rps": 0.0341855,
"scy": 0.03586607,
"sefi": 0.04004172,
"shill": 0.224106,
"nora": 0.091235,
"stbb": 0.01030085,
"sip": 0.03102571,
"sss": 9.29,
"τbtc": 5251.84,
"τdoge": 0.01339938,
"tsa": 0.00223067,
"tower": 0.02752709,
"tusk": 2.99,
"udo": 2.09,
"usdg": 0.858796,
"vnt": 0.00794135,
"wgr": 0.02224298,
"wnow": 0.059403,
"voxb": 5.74,
"wag": 0.148624,
"war": 0.00483406,
"wrx": 0.891937,
"wana": 0.118994,
"wizard": 0.54173,
"wnyc": 0.00001696,
"xps": 0.00899407,
"lory": 0.068368,
"ydr": 0.01055491,
"rei": 0.03312136,
"zuki": 0.02372236,
"1aave": 166.45611038789707,
"1axs": 59.540852965737386,
"1dai": 1.001807536370904,
"1eth": 3099.641974117959,
"1frax": 0.999751443403524,
"1usdc": 1.0004977160477149,
"1usdt": 1.0001470728027955,
"1wbtc": 43983.25569164986,
"1ygg": 3.3680070823414403,
"wone": 0.1934478353770007,
"bscbusd": 1.000460251108668,
"onesushi": 4.257737550308245,
"netswap-bifi-metis": 1223.7128839326224,
"bino": 0.04401610882483347,
"banana-bino-busd": 0.42193302905618174,
"1btc": 44217.00103969694,
"boo-wftm-wshec": 327457.2217592399,
"polygonfarm-spade-usdc": 440567.0550060243,
"quick-quick-rendgb": 457849.2442699406,
"dinoswap-dino-usdc": 442761.3739589184,
"prl": 0.191183,
"cakev2-fuse-wbnb": 42.02546129681152,
"png-gohm-wavax": 1494.1870456673905,
"beets-paint-it-black": 0.5334850813615587,
"beets-spooky-tempered-clavier": 6.56906077964971,
"cake-swth-bnb": 467190.8253321897,
"joe-ampl-wavax": 475792.49345281225,
"png-ampl-wavax": 474875.8537327918,
"oxd": 0.07212980607652067,
"cakev2-swth-bnb": 472034.4807290073,
"sushi-wftm-eth": 181.8701327496155,
"sushi-wftm-link": 12.411680794193064,
"sushi-wftm-sushi": 6.454627702203439,
"sushi-yfi-eth": 17372.84993917941,
"sushi-sushi-weth": 231.4040775452143,
"sushi-wfuse-weth": 92.35451351777022,
"popsicle-ice-eth": 204.79708312077568,
"1crv": 2.456719114287575,
"fusefi-wfuse-bifi": 83.1516359490516,
"sushi-one-1crv-1eth": 176.08854333261095,
"tbl": 0.242748,
"income": 0.00064519,
"rbx": 0.148109,
"ertha": 0.177701,
"joe-wavax-frax": 19.346914591522296,
"joe-gmx-wavax": 118.2554122089382,
"joe-wavax-frm": 6.555286482992971,
"joe-wavax-more": 6.041316393675908,
"gmx": 36.977511101617125,
"more": 0.09362972704248597,
"solarbeam-frax-rome": 462318.74690309697,
"cakev2-ertha-wbnb": 23.207071999326267,
"quick-sand-matic": 5.670736523466622,
"sand": 4.259391075084881,
"finn-finn-xcksm": 11623.779059063334,
"finn-finn-xcrmrk": 37999.56530607578,
"xcksm": 170.81683151507187,
"xcrmrk": 18.392959936014815,
"xboo": 37.43943041082438,
"xscream": 70.17240047116493,
"dquick": 291.98627263179566,
"dcau": 118.8817716974157,
"hec": 2.800450817552286,
"joe-wavax-cook": 1.2048760027079826,
"joe-wavax-dcau": 257.9197950233632,
"joe-wavax-hec": 40.86111685831833,
"oxd-oxd-usdc": 473146.2105605324,
"banana-sushi-eth": 239.4627089526155,
"baby-ftm-usdt": 3.3209552698676825,
"grape-grape-mim": 3.984742380703709,
"grape-wine-mim": 45.35159116278377,
"grape": 2.7029404652316207,
"wine": 434.943173112701,
"tmt": 0.471261,
"sushi-eth-mana": 231.28557805790177,
"tri-atust-near": 0.006993513519968062,
"tri-aurora-tri": 5.7101444614151715,
"tri-aurora-weth": 384.4703448203877,
"tri-avax-near": 0.06484766386923836,
"tri-bnb-near": 0.14132100629738883,
"tri-matic-near": 0.009083733410131474,
"tri-mecha-near": 0.003927280660206324,
"tri-near-atluna": 0.05152380794668238,
"tri-near-flx": 0.005352739772599185,
"flx": 0.6035084548209152,
"mecha": 0.3238571647313898,
"atluna": 56.03044830683542,
"atust": 0.9978898696197008,
"spirit-binspirit-spirit": 0.23917147998662366,
"arcadium": 0.01387639,
"agar": 46.87,
"amusdt": 1,
"amusdc": 1,
"amaave": 186.01,
"amdai": 1,
"aga": 0.274001,
"amweth": 3185.85,
"abi": 12.18,
"aumi": 0.00342286,
"fyn": 1.02,
"aria20": 0.53057,
"amwbtc": 43992,
"algb": 0.02205358,
"addy": 0.747579,
"amwmatic": 2.02,
"omen": 0.01414202,
"ageur": 1.14,
"apw": 1.24,
"gmi": 77.84,
"usv": 827.27,
"$anrx": 0.087709,
"axn": 0.00004243,
"pauto": 463.79,
"ciotx": 0.10724,
"ctsi": 0.539887,
"blok": 0.02511325,
"btu": 0.355484,
"chum": 0.00089032,
"um": 0.03700342,
"bridge": 0.02482004,
"tech": 0.00824267,
"raider": 5.46,
"elon": 9.8129793272514e-7,
"elet": 0.00372862,
"emon": 0.056082,
"dlycop": 0.00024938,
"dhv": 0.487848,
"dht": 0.561534,
"db": 27.77,
"dnxc": 0.03490748,
"gfarm2": 3640.37,
"get": 2.47,
"fint": 0.04806349,
"gaj": 0.04978198,
"hh": 0.591888,
"hawk": 0.00123671,
"1flr": 0.00079196,
"hex": 0.209261,
"gfi": 0.00292549,
"combo": 0.239854,
"gms": 0.00058674,
"gogo": 0.266982,
"fsn": 0.710693,
"gamer": 0.16288,
"hanu": 0.00000165,
"genesis": 0.068822,
"knight": 0.213344,
"welt": 0.01608191,
"fear": 0.687089,
"flame": 0.710602,
"game": 0.12507,
"gaia": 0.075265,
"eth2x-fli-p": 40.82,
"iris": 3.88,
"kom": 0.00589963,
"kogecoin": 0.04874303,
"ioen": 0.02710813,
"wixs": 0.312887,
"mst": 1.8665034571942556,
"idol": 0.177371,
"imx": 0.101782,
"kaby": 0.01126188,
"luxy": 0.130636,
"ixt": 3.16,
"maaave": 175.33,
"ifarm": 156.09,
"krl": 0.00155851,
"kasta": 0.475535,
"igg": 0.0003963,
"kitty": 0.909829,
"0xbtc": 1.51,
"nxd": 1.31,
"cat": 25.89,
"matpad": 0.00942335,
"champ": 0.190328,
"myfriends": 0.00644031,
"moca": 1.02,
"maweth": 2761.46,
"wolf": 8.80685e-7,
"mcash": 0.03209528,
"msu": 0.131393,
"nitro": 0.05599,
"nacho": 2.24,
"meeb": 0.078455,
"mona": 427.29,
"guru": 1.51,
"mooned": 0.03900626,
"mta": 0.72741,
"nshare": 78.32,
"mvi": 177.23,
"plr": 0.01448336,
"pyd": 0.992006,
"pbr": 0.471944,
"vert": 0.00487456,
"collar": 0.083797,
"pcake": 0.00233711,
"yeld v2": 0.266061,
"ndefi": 10.33,
"sage": 0.745334,
"polr": 0.01406134,
"shi3ld": 0.00171883,
"pgov": 0.00117487,
"ppdex": 0.82499,
"pla": 1.18,
"roll": 0.01576682,
"bull": 0.00018573,
"polygold": 0.206604,
"plot": 0.154894,
"pym": 0.02022255,
"angel": 0.02062672,
"rndr": 3.37,
"dsla": 0.02575493,
"aurum": 0.04175781,
"sim": 0.00013742,
"prxy": 8.79,
"quickchart": 0.00009682,
"sca": 0.102713,
"snk": 0.245875,
"rbc": 0.278674,
"tomi": 0.00319135,
"vsq": 13.42,
"sne": 0.00256006,
"eurs": 1.15,
"try": 0.098446,
"superbid": 0.458866,
"sff": 0.01571898,
"pyr": 14.98,
"warp": 378.86,
"zut": 284.29,
"voxel": 1.81,
"xusd": 1.06,
"mocha": 0.4746686935974109,
"bag": 1.05,
"abr": 3.21,
"coval": 0.059878,
"bshare": 205.58,
"0xmr": 0.00006854,
"based": 28.64,
"5table": 0.962911,
"cerby": 0.00043848,
"astral": 24.77,
"bouje": 0.198073,
"blood": 0.349623,
"comb": 308.06,
"anyp": 0.00051147,
"aqu": 0.00309803,
"cgs": 0.00442257,
"coffin": 0.057907,
"cousd": 0.795577,
"baker": 0.00005085,
"1art": 0.150465,
"babyboo": 0.00000258,
"casper": 0.00730273,
"ausd": 1.13,
"atlas": 459.51,
"bfc": 0.20217,
"bsgg": 0.04852461,
"3omb": 5.26,
"3shares": 15960.06,
"btcbr": 0.438112,
"fpup": 2.56,
"rise": 0.00133916,
"exod": 143.72,
"fs": 0.018940213115402317,
"fang": 1.84,
"drc": 0.276455,
"ffs": 0.00034971,
"ftmo": 0.01674428,
"cre8r": 0.214678,
"elite": 1190.88,
"fterra": 0.153789,
"dmd": 0.095783,
"escrow": 0.00186037,
"dfi": 0.056971,
"font": 0.6927763889652682,
"bro": 0.01740249,
"fmf": 0.01119491,
"fry": 0.00268354,
"dna": 0.434775,
"devil": 0.03487765,
"dp": 0.362818,
"death": 4.98786e-7,
"anyfsn": 0.698405,
"fatcake": 0.00222587,
"duo": 0.163363,
"cyber": 10.5,
"ftml": 0.00604111,
"frank": 0.00889068,
"frog": 22.79,
"fhm": 41.4,
"credit": 2.308087167357048,
"gscarab": 548.45,
"ironice": 0.935217,
"god": 0.00150706,
"ink": 430.94,
"grim evo": 1.92,
"levl": 0.099808,
"ginspirit": 0.085339,
"giza": 25.29,
"moda": 2.69,
"meso": 0.853398,
"klr": 0.00080409,
"mm": 1.68,
"kp3r": 841.35,
"linspirit": 0.129131,
"mensa": 0.02326907,
"msa": 0.125811,
"hegic": 0.04816215,
"knights": 248.44,
"magik": 2.84,
"grim": 0.276228,
"gro": 14.46,
"midas": 25.57,
"fkavian": 0.00141456,
"mcrt": 0.01550475,
"ib": 55.7,
"gshare": 2.29,
"lux": 60.82,
"pftm": 10.840254713326376,
"mshare": 249.74,
"ring": 2.53,
"plaza": 0.00055862,
"rndm": 0.01171141,
"sapphire": 0.367448,
"ppblz": 45.59,
"pae": 716.3116547578967,
"paper": 11.4,
"pawn": 5.93,
"plat": 15.8,
"rich": 71.54,
"pepevr": 0.00002592,
"susd": 0.994831,
"pills": 1.9213795982830935,
"phm": 19.93,
"bcp": 2.84,
"scare": 0.161024,
"poop": 0.01910957,
"folive": 0.03352667,
"raven": 0.04825297,
"n3": 0.00679969,
"scarab": 2.16,
"octo": 3.98,
"onx": 0.378266,
"premia": 0.02860413,
"reaper": 0.01461129,
"nbk": 0.00411701,
"pos": 0.00233188,
"mars": 0.0000034,
"rocket": 0.234138,
"proto": 0.534748,
"power": 23.99,
"our": 0.00033601,
"nord": 1.96,
"rgt": 20.37,
"srocket": 13.79,
"pallas": 0.00035059,
"moneyrain": 21.47,
"sexod": 182.31,
"totem": 0.00066922,
"liqr": 0.00742906,
"tcs": 0.547568,
"xrune": 0.10424,
"snt": 0.01142876,
"seed": 0.000731,
"smart": 4.71,
"shadow": 0.0005895,
"sshare": 74.68,
"spr": 0.329113,
"supa": 0.0395034,
"specter": 1.01,
"stn": 0.082511,
"spar": 4.49546e-7,
"spook": 0.0000011,
"tngl": 0.00010701,
"scc": 0.0000011,
"syf": 0.00000146,
"seance": 0.051653,
"scr": 14.69,
"vest": 0.093611,
"spk10k": 1.27,
"trava": 0.0072989,
"spa": 19.6,
"vid": 0.291497,
"vsp": 2.77,
"universe": 12,
"trick": 0.152383,
"wsexod": 1197.32,
"undead": 0.195194,
"waka": 0.208703,
"weve": 0.0458369,
"vive": 3.08,
"duck": 0.01400118,
"unidx": 1.07,
"wis": 0.01767696,
"zlot": 41.11,
"waterfall": 1.96,
"wbond": 0.076428,
"fswamp": 0.0017487997909306815,
"morph": 0.9830130643285212,
"wild": 0.053662278126535776,
"kae": 31.96,
"xy": 1.23,
"book": 0.04013210613656876,
"dark": 0.5017512039585944,
"domi": 0.2564111711857165,
"fodl": 0.22342392582937465,
"glint": 0.00838542764034349,
"ime": 0.03787903074120569,
"loot": 0.0014098762885619476,
"sky": 301.7769889931039,
"solace": 0.09908583143266739,
"stnear": 11.765731422666656,
"wglmr": 5.123575638472713,
"xtri": 0.7919950170254798,
"xcredit": 2.456614833784173,
"2omb-2omb-2share": 190.1939244142352,
"baby-avax-usdt": 21.97906786789311,
"beamswap-bifi-wglmr": 230.51323693112877,
"beamswap-busd-bnb": 41.64287335633293,
"beamswap-busd-wglmr": 4.5974121597591875,
"beamswap-wglmr-glint": 0.42009987149586775,
"boo-font-ftm": 2.436723465675985,
"boo-mst-wftm": 4.091936761105684,
"boo-usdc-fs": 302156.3092589794,
"cometh-matic-psp": 1.09143916404678,
"credit-credit-ftm": 4.580977192468403,
"dark-dark-cro": 1.039938515930372,
"dark-sky-cro": 25.24588458022894,
"joe-gohm-frax": 7074.72626080031,
"joe-wavax-domi": 10.293345015263577,
"joe-wavax-ime": 4.041102763057734,
"joe-wavax-pefi2": 13.130397298441707,
"png-loot-wavax": 0.8265576992899448,
"quick-book-matic": 54161.52493302643,
"quick-fodl-matic": 1.2831598957865398,
"ripae-pae-ftm": 81.07172753095973,
"ripae-pftm-ftm": 11.573772436876107,
"spirit-ftm-pills": 4.3508793551911955,
"tri-solace-near": 0.0021528982657028272,
"tri-stnear-near": 0.00002346837481344904,
"tri-stnear-xtri": 0.006242615143276961,
"trisolaris-bifi-weth": 5683.945237277084,
"voltage-fusd-bnb": 43.89538727079662,
"voltage-luna-ust": 15.045391667882832,
"voltage-wfuse-busd": 1.7904367228188172,
"voltage-wfuse-elon": 0.0016117489235757843,
"voltage-wfuse-fusd": 1.8345060248486535,
"voltage-wfuse-ust": 1.6658617077483528,
"voltage-wfuse-weth": 95.53377101039047,
"beets-multichain-maxi": 6.906486302907561,
"beets-treeb-me-bro": 0.32486097632278677,
"beets-beardhemian-brushsody": 0.2862690930994609,
"beets-demeters-degree": 996.8809952029997,
"curve-ftm-cusd": 1.0018191578591291,
"puli": 0.00943061,
"torn": 30.59,
"bomb": 3.79,
"mafa": 0.351746,
"elunr": 0.571546,
"gear": 0.473909,
"nwc": 0.250392,
"rvz": 0.0008571
}
    transaction_single:
      type: object
      properties:
        "hash": 
          type: string
          example: "0x2413f852be4aa14c62799c3dc55e010d14d250fb9ff943d027bedd8d2e512336"
        "nonce": 
          type: string
          example: "510"
        "transaction_index": 
          type: string
          example: "77"
        "from_address": 
          type: string
          example: "0xf35b3c268abeac6965cee050461c50a163be736c"
        "to_address": 
          type: string
          example: "0x3920123482070c1a2dff73aad695c60e7c6f6862"
        "value": 
          type: string
          example: "0"
        "gas": 
          type: string
          example: "100000"
        "gas_price": 
          type: string
          example: "5200000000"
        "input": 
          type: string
          example: "0x095ea7b300000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000000000000000000000000000000000000000000000"
        "receipt_cumulative_gas_used": 
          type: string
          nullable: true
          example: null
        "receipt_gas_used": 
          type: string
          nullable: true
          example: null
        "receipt_contract_address": 
          type: string
          nullable: true
          example: null
        "receipt_root": 
          type: string
          nullable: true
          example: null
        "receipt_status": 
          type: string
          example: "0"
        "block_timestamp": 
          type: string
          example: "2021-12-11T02:09:42.000Z"
        "block_number": 
          type: string
          example: "13369461"
        "block_hash": 
          type: string
          example: "0x3941d88b4eae240764b73aded0fe0102f0342076944a44a535afa9cf3ae74877"
        "token_transfers": 
          type: array
          items: 
            type: object
            example: []
        "logs": 
          type: array
          items: 
            type: object
            example: [
        {
            "log_index": "102",
            "transaction_hash": "0x2413f852be4aa14c62799c3dc55e010d14d250fb9ff943d027bedd8d2e512336",
            "transaction_index": "77",
            "address": "0x3920123482070c1a2dff73aad695c60e7c6f6862",
            "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "topic0": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
            "topic1": "0x000000000000000000000000f35b3c268abeac6965cee050461c50a163be736c",
            "topic2": "0x00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e",
            "topic3": null,
            "block_timestamp": "2021-12-11T02:09:42.000Z",
            "block_number": "13369461",
            "block_hash": "0x3941d88b4eae240764b73aded0fe0102f0342076944a44a535afa9cf3ae74877"
        }
     ]
    Get_portfolios:
      type: array
      items:
        type: object
        properties:
          "user_sub": 
                type: string
                example: "18a4d00f-17ac-4f02-bd89-d3e4a671af63"
          "created_at": 
                type: string
                example: "2022-02-24T14:56:32.704Z"
          "name": 
                type: string
                example: "portfolio"
          "identifier": 
                type: string
                example: "74929ee6-7a01-403c-b5bc-04ea777212c6"
    sales:
      type: object
      properties:
        "total":
          type: object
          example: {
        "value": 45,
        "relation": "eq"
        }
        "max_score":
          type: integer
          format: int32
          example: 1
        "hits": 
          type: array
          items: 
            type: object
            example: [
        {
            "_index": "marketplace_01252022",
            "_type": "_doc",
            "_id": "286",
            "_score": 1,
            "_source": {
                "base_token_address": "0x4e51d810015227fbe24aad99acf8cc82819e73ed",
                "next_claim": {},
                "seller_wallet": "0x4a9e0fcdd826af2b235c69fc4e2ee03cdbb82632",
                "identifier": "286",
                "close_date": 1645879232000,
                "period": "0",
                "purchases": {
                    "0x35c223fefa0724e99adf6adc8bc43ed48693d0cf": [
                        {
                            "amountIn": 0.0001,
                            "amountOut": 0.000099,
                            "timestamp": 1645879232000
                        }
                    ]
                },
                "kind": "0",
                "quote_token_name": "Wrapped BNB",
                "base_token_id": "0",
                "packages": "0",
                "base_token_symbol": "EULER",
                "update_date": 1645879208000,
                "quote_token_address": "0xae13d989dac2f0debff460ac112a837c89baa7cd",
                "base_token_quantity": 0.000099,
                "quote_token_quantity": 0.0001,
                "blockchain": "bsctest",
                "quote_token_symbol": "WBNB",
                "claims": {},
                "category": "token",
                "create_date": 1645879208000,
                "base_token_name": "Euler.Tools",
                "ratio": 0.9899999999999999,
                "whitelisted_wallets": null
            }
        },
        {
            "_index": "marketplace_01252022",
            "_type": "_doc",
            "_id": "308",
            "_score": 1,
            "_source": {
                "next_claim": {},
                "seller_wallet": "0x4a9e0fcdd826af2b235c69fc4e2ee03cdbb82632",
                "close_date": 0,
                "quote_token_name": "Wrapped BNB",
                "base_token_id": "0",
                "quote_token_id": "0",
                "base_token_quantity": 1,
                "quote_token_quantity": 1,
                "create_date": 0,
                "base_token_name": "Test Token",
                "base_token_address": "0x0fec3b226f744aa34dcd0462c368a6ed6f9bad55",
                "identifier": "308",
                "period": "0",
                "purchases": {},
                "kind": "1",
                "packages": "0",
                "base_token_symbol": "TEST",
                "update_date": 0,
                "quote_token_address": "0xae13d989dac2f0debff460ac112a837c89baa7cd",
                "blockchain": "bsctest",
                "quote_token_symbol": "WBNB",
                "claims": {},
                "category": "token",
                "ratio": 1,
                "whitelisted_wallets": [
                    "0xdaabecacdd888dcf68ff1f2d9202e74aba0601bd"
                ]
            }
        },
        {
            "_index": "marketplace_01252022",
            "_type": "_doc",
            "_id": "285",
            "_score": 1,
            "_source": {
                "base_token_address": "0xa037c562d8a5914f9e314efa5308e1f8e3bad1ac",
                "next_claim": {},
                "seller_wallet": "0x4a9e0fcdd826af2b235c69fc4e2ee03cdbb82632",
                "identifier": "285",
                "close_date": 1645879202000,
                "period": "0",
                "purchases": {
                    "0x35c223fefa0724e99adf6adc8bc43ed48693d0cf": [
                        {
                            "amountIn": 0.0001,
                            "amountOut": 0.0001,
                            "timestamp": 1645879202000
                        }
                    ]
                },
                "kind": "0",
                "quote_token_name": "Wrapped BNB",
                "base_token_id": "0",
                "packages": "0",
                "base_token_symbol": "TESTC",
                "update_date": 1645879177000,
                "quote_token_address": "0xae13d989dac2f0debff460ac112a837c89baa7cd",
                "base_token_quantity": 0.0001,
                "quote_token_quantity": 0.0001,
                "blockchain": "bsctest",
                "quote_token_symbol": "WBNB",
                "claims": {},
                "category": "token",
                "create_date": 1645879177000,
                "base_token_name": "Test coin",
                "ratio": 1,
                "whitelisted_wallets": null
            }
        },
        {
            "_index": "marketplace_01252022",
            "_type": "_doc",
            "_id": "276",
            "_score": 1,
            "_source": {
                "base_token_address": "0x385d0e7357d26aed0ba9ce3d9beef21a2c53bbca",
                "next_claim": {},
                "seller_wallet": "0x4a9e0fcdd826af2b235c69fc4e2ee03cdbb82632",
                "identifier": "276",
                "close_date": 1645878953000,
                "period": "0",
                "purchases": {
                    "0x35c223fefa0724e99adf6adc8bc43ed48693d0cf": [
                        {
                            "amountIn": 0.0001,
                            "amountOut": "1",
                            "timestamp": 1645878953000
                        }
                    ]
                },
                "kind": "5",
                "quote_token_name": "Wrapped BNB",
                "base_token_id": "17",
                "packages": "0",
                "base_token_symbol": "TEST",
                "update_date": 1645878938000,
                "quote_token_address": "0xae13d989dac2f0debff460ac112a837c89baa7cd",
                "base_token_quantity": "1",
                "quote_token_quantity": 0.0001,
                "blockchain": "bsctest",
                "quote_token_symbol": "WBNB",
                "claims": {},
                "category": "token",
                "create_date": 1645878938000,
                "base_token_name": "Test NFT",
                "ratio": 10000,
                "whitelisted_wallets": null
            }
        },
        {
            "_index": "marketplace_01252022",
            "_type": "_doc",
            "_id": "284",
            "_score": 1,
            "_source": {
                "base_token_address": "0xa037c562d8a5914f9e314efa5308e1f8e3bad1ac",
                "next_claim": {},
                "seller_wallet": "0x4a9e0fcdd826af2b235c69fc4e2ee03cdbb82632",
                "identifier": "284",
                "close_date": 0,
                "period": "1",
                "purchases": {},
                "kind": "2",
                "quote_token_name": "Wrapped BNB",
                "base_token_id": "0",
                "packages": "1",
                "base_token_symbol": "TESTC",
                "update_date": 1645879164000,
                "quote_token_address": "0xae13d989dac2f0debff460ac112a837c89baa7cd",
                "base_token_quantity": 0.0001,
                "quote_token_quantity": 0.0001,
                "blockchain": "bsctest",
                "quote_token_symbol": "WBNB",
                "claims": {},
                "category": "token",
                "create_date": 1645879164000,
                "base_token_name": "Test coin",
                "ratio": 1,
                "whitelisted_wallets": null
            }
        },
        {
            "_index": "marketplace_01252022",
            "_type": "_doc",
            "_id": "292",
            "_score": 1,
            "_source": {
                "base_token_address": "0x4e51d810015227fbe24aad99acf8cc82819e73ed",
                "next_claim": {},
                "seller_wallet": "0x4a9e0fcdd826af2b235c69fc4e2ee03cdbb82632",
                "identifier": "292",
                "close_date": 1645879424000,
                "period": "1",
                "purchases": {
                    "0x35c223fefa0724e99adf6adc8bc43ed48693d0cf": [
                        {
                            "amountIn": 0.0001,
                            "amountOut": 0.000099,
                            "timestamp": 1645879424000
                        }
                    ]
                },
                "kind": "3",
                "quote_token_name": "Wrapped BNB",
                "base_token_id": "0",
                "packages": "1",
                "base_token_symbol": "EULER",
                "update_date": 1645879401000,
                "quote_token_address": "0xae13d989dac2f0debff460ac112a837c89baa7cd",
                "base_token_quantity": 0.000099,
                "quote_token_quantity": 0.0001,
                "blockchain": "bsctest",
                "quote_token_symbol": "WBNB",
                "claims": {
                    "0x35c223fefa0724e99adf6adc8bc43ed48693d0cf": [
                        {
                            "amount": 0.000099,
                            "numberPackage": "0",
                            "timestamp": 1645879433000
                        }
                    ]
                },
                "category": "token",
                "create_date": 1645879401000,
                "base_token_name": "Euler.Tools",
                "ratio": 0.9899999999999999,
                "whitelisted_wallets": [
                    "0x35c223fefa0724e99adf6adc8bc43ed48693d0cf"
                ]
            }
        },
        {
            "_index": "marketplace_01252022",
            "_type": "_doc",
            "_id": "13",
            "_score": 1,
            "_source": {
                "next_claim": {},
                "seller_wallet": "0x4a9e0fcdd826af2b235c69fc4e2ee03cdbb82632",
                "close_date": 1646046141000,
                "quote_token_name": "Wrapped BNB",
                "base_token_id": "0",
                "quote_token_id": "0",
                "base_token_quantity": 0.000099,
                "quote_token_quantity": 0.0001,
                "create_date": 1646046113000,
                "base_token_name": "Euler.Tools",
                "base_token_address": "0x4e51d810015227fbe24aad99acf8cc82819e73ed",
                "identifier": "13",
                "period": "0",
                "purchases": {
                    "0x35c223fefa0724e99adf6adc8bc43ed48693d0cf": [
                        {
                            "amountIn": 0.0001,
                            "amountOut": 0.000099,
                            "timestamp": 1646046141000
                        }
                    ]
                },
                "kind": "0",
                "packages": "0",
                "base_token_symbol": "EULER",
                "update_date": 1646046113000,
                "quote_token_address": "0xae13d989dac2f0debff460ac112a837c89baa7cd",
                "blockchain": "bsctest",
                "quote_token_symbol": "WBNB",
                "claims": {},
                "category": "token",
                "ratio": 0.9899999999999999,
                "whitelisted_wallets": null
            }
        },
        {
            "_index": "marketplace_01252022",
            "_type": "_doc",
            "_id": "16",
            "_score": 1,
            "_source": {
                "next_claim": {},
                "seller_wallet": "0x4a9e0fcdd826af2b235c69fc4e2ee03cdbb82632",
                "close_date": 1646046207000,
                "quote_token_name": "Wrapped BNB",
                "base_token_id": "0",
                "quote_token_id": "0",
                "base_token_quantity": 0.0001,
                "quote_token_quantity": 0.0001,
                "create_date": 1646046189000,
                "base_token_name": "Test coin",
                "base_token_address": "0xa037c562d8a5914f9e314efa5308e1f8e3bad1ac",
                "identifier": "16",
                "period": "0",
                "purchases": {},
                "kind": "0",
                "packages": "0",
                "base_token_symbol": "TESTC",
                "update_date": 1646046189000,
                "quote_token_address": "0xae13d989dac2f0debff460ac112a837c89baa7cd",
                "blockchain": "bsctest",
                "quote_token_symbol": "WBNB",
                "claims": {},
                "category": "token",
                "ratio": 1,
                "whitelisted_wallets": null
            }
        },
        {
            "_index": "marketplace_01252022",
            "_type": "_doc",
            "_id": "17",
            "_score": 1,
            "_source": {
                "next_claim": {},
                "seller_wallet": "0x4a9e0fcdd826af2b235c69fc4e2ee03cdbb82632",
                "close_date": 0,
                "quote_token_name": "Wrapped BNB",
                "base_token_id": "0",
                "quote_token_id": "0",
                "base_token_quantity": 0.0001,
                "quote_token_quantity": 0.0001,
                "create_date": 1646046212000,
                "base_token_name": "Test coin",
                "base_token_address": "0xa037c562d8a5914f9e314efa5308e1f8e3bad1ac",
                "identifier": "17",
                "period": "0",
                "purchases": {},
                "kind": "0",
                "packages": "0",
                "base_token_symbol": "TESTC",
                "update_date": 1646046212000,
                "quote_token_address": "0xae13d989dac2f0debff460ac112a837c89baa7cd",
                "blockchain": "bsctest",
                "quote_token_symbol": "WBNB",
                "claims": {},
                "category": "token",
                "ratio": 1,
                "whitelisted_wallets": null
            }
        },
        {
            "_index": "marketplace_01252022",
            "_type": "_doc",
            "_id": "19",
            "_score": 1,
            "_source": {
                "next_claim": {},
                "seller_wallet": "0x4a9e0fcdd826af2b235c69fc4e2ee03cdbb82632",
                "close_date": 1646057421000,
                "quote_token_name": "Wrapped BNB",
                "base_token_id": "0",
                "quote_token_id": "0",
                "base_token_quantity": 0.000099,
                "quote_token_quantity": 0.0001,
                "create_date": 1646057396000,
                "base_token_name": "Euler.Tools",
                "base_token_address": "0x4e51d810015227fbe24aad99acf8cc82819e73ed",
                "identifier": "19",
                "period": "0",
                "purchases": {
                    "0x35c223fefa0724e99adf6adc8bc43ed48693d0cf": [
                        {
                            "amountIn": 0.0001,
                            "amountOut": 0.000099,
                            "timestamp": 1646057421000
                        }
                    ]
                },
                "kind": "0",
                "packages": "0",
                "base_token_symbol": "EULER",
                "update_date": 1646057396000,
                "quote_token_address": "0xae13d989dac2f0debff460ac112a837c89baa7cd",
                "blockchain": "bsctest",
                "quote_token_symbol": "WBNB",
                "claims": {},
                "category": "token",
                "ratio": 0.9899999999999999,
                "whitelisted_wallets": null
            }
        }
     ]
    cognito:
      type: object
      properties:
        "AuthenticationResult":
          type: object
          example: {
        "AccessToken": "eyJraWQiOiI5TU9ScXNlMDhhY1N0S25KVXFTV1RZc0hIMUhnWlJ2ZFRkM3k5eFlEZ1wvMD0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIxOGE0ZDAwZi0xN2FjLTRmMDItYmQ4OS1kM2U0YTY3MWFmNjMiLCJkZXZpY2Vfa2V5IjoidXMtZWFzdC0xX2Y1ZDEwZGNmLWU1NWMtNDBhNC05ZTdlLTQwNmZkZGVmYTIzNyIsImV2ZW50X2lkIjoiYWZkN2MxOTMtNzA3Mi00NDI2LThiZDMtOWEzMjdmYTAyMDMzIiwidG9rZW5fdXNlIjoiYWNjZXNzIiwic2NvcGUiOiJhd3MuY29nbml0by5zaWduaW4udXNlci5hZG1pbiIsImF1dGhfdGltZSI6MTY0NjI0NDU4OCwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tXC91cy1lYXN0LTFfTGZ4dW82dWljIiwiZXhwIjoxNjQ2MzMwMzUzLCJpYXQiOjE2NDYzMjY3NTMsImp0aSI6ImMzMDI4YTIzLTFjOTAtNDk0YS1iZjk3LTQyN2QzZTQ2ZGU3OCIsImNsaWVudF9pZCI6IjRlbDg1bXFzbjFiMnFsZWZpaDVtbWU2N2JrIiwidXNlcm5hbWUiOiJqb3NlcGgifQ.dcEJnLXdPqQLWT7Jti6Q3-i5Mc2iyD9eAHP816qY4rRDRKpWn3giyi9xMo5FHrQHQwYDKlZXSeh46aWy24Yh9Kzj06DXFcyxYYySA8BIYDDBmdwI01-_tPFQQouYgBLqrynYfOtDIpN7hihoc74AmHa60H0wvzDd70kjoPZWuv5qWEXfBxfhodqf5ePRxgZSUOOhBoKFA6YJj982w-ubrjfGXtOwCJe4o7egTK_Fe8pMAoPV7YHfTjiWh26AOHxxQYEL57-amOU3CSI75FRXJ6BLh0sm3fa5TBrhIMuQa7Too3mg0Tbl0T1oKsTA7LZ6NSpZJ2WjgO6vhWF8AYLw5Q",
        "ExpiresIn": 3600,
        "IdToken": "eyJraWQiOiJaSHNXeFhOUnRheXBDXC9yVGk2dCtGZk9UMGZqaU9qY1ZVK1JKYUZqWkNQTT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIxOGE0ZDAwZi0xN2FjLTRmMDItYmQ4OS1kM2U0YTY3MWFmNjMiLCJhdWQiOiI0ZWw4NW1xc24xYjJxbGVmaWg1bW1lNjdiayIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiZXZlbnRfaWQiOiJhZmQ3YzE5My03MDcyLTQ0MjYtOGJkMy05YTMyN2ZhMDIwMzMiLCJ0b2tlbl91c2UiOiJpZCIsImF1dGhfdGltZSI6MTY0NjI0NDU4OCwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tXC91cy1lYXN0LTFfTGZ4dW82dWljIiwiY29nbml0bzp1c2VybmFtZSI6Impvc2VwaCIsInByZWZlcnJlZF91c2VybmFtZSI6Ikpvc2VwaCIsImV4cCI6MTY0NjMzMDM1MywiaWF0IjoxNjQ2MzI2NzUzLCJlbWFpbCI6Impvc2VicmVzdDI1QGdtYWlsLmNvbSJ9.q2F4qi9rGqlje-J1Dv64rs95eGp7F9DfAssaDVgARTAz6KDyMhGcXJgW8PRV-GSnLdHf80rPXgBH2K-6mlxAjc_9xozIORWGPP9nOM_ys7EVKHvQIgsAaSzQX0z_rLs62WTM2xpCigmzSM7O6saHrl8_hbtaqgYLIBkODEYcZj-pEQcAXO63FikXthPOsnfmBEyQDeKFRlZQJujgFHoiIDMrWwgDOI5g4E6clzoK-1BDBCFgkFRMhPP4HaKW1LVPv89cqPvXhN3-dp8OaoV-baZImYQVDOv9rGQi4erhXDD_zE86vtlj9r1HZkZv2-q1UOCUDF0PQ4Q5wLfYlmT3jg",
        "TokenType": "Bearer"
          }
        "ChallengeParameters":
          type: object
          example: {}

    
    

